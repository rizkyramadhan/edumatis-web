{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport config from \"../../config\";\nimport { getSession } from \"./getsetSession\";\n\nvar get = require(\"lodash.get\");\n\nexport var checkSession =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var session, response, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getSession();\n\n          case 2:\n            session = _context.sent;\n\n            if (session) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 5:\n            _context.prev = 5;\n            _context.next = 8;\n            return fetch(config.url, {\n              method: \"POST\",\n              body: _JSON$stringify({\n                query: \"{\\n          session(where:{id:{_eq:\\\"\".concat(session.id, \"\\\"}}) {\\n            id\\n            \").concat(config.table, \" {\\n              \").concat(config.user.columns.join(\"\\n\"), \"\\n            }\\n          }\\n        }\")\n              }),\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-Hasura-Session-Id\": session.id\n              }\n            });\n\n          case 8:\n            response = _context.sent;\n            _context.next = 11;\n            return response.json();\n\n          case 11:\n            res = _context.sent;\n            return _context.abrupt(\"return\", get(res, \"data.session[0]\"));\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](5);\n            return _context.abrupt(\"return\", session);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 15]]);\n  }));\n\n  return function checkSession() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}