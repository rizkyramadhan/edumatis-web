{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { AsyncStorage } from \"react-native-web\";\nimport config from \"../../config\";\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(query, wsCallback, options) {\n    var opt, headers, sessionRaw, session, ws;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            opt = _objectSpread({}, {\n              useSession: true,\n              debug: false\n            }, options);\n            headers = {\n              \"Content-Type\": \"application/json\"\n            };\n\n            if (!opt.useSession) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 5;\n            return AsyncStorage.getItem(\"SESSION\");\n\n          case 5:\n            sessionRaw = _context2.sent;\n            session = JSON.parse(sessionRaw || \"false\");\n\n            if (session) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 11:\n            headers[\"X-Hasura-Session-Id\"] = session.id;\n\n          case 12:\n            ws = new WebSocket(config.wsurl);\n            ws.onopen =\n            /*#__PURE__*/\n            _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      ws.send(_JSON$stringify({\n                        type: \"connection_init\",\n                        payload: {\n                          headers: headers\n                        }\n                      }));\n                      ws.send(_JSON$stringify({\n                        id: \"1\",\n                        type: \"start\",\n                        payload: {\n                          variables: {},\n                          extensions: {},\n                          operationName: null,\n                          query: query\n                        }\n                      }));\n\n                    case 2:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            ws.onmessage = function (e) {\n              try {\n                var data = JSON.parse(e.data);\n\n                if (data.type === \"data\" || data.type === \"error\") {\n                  wsCallback(data);\n\n                  if (data.type === \"error\") {\n                    console.log(query, data);\n                  }\n                }\n              } catch (err) {}\n            };\n\n            ws.onerror = function (e) {// an error occurred\n            };\n\n            ws.onclose = function (e) {// connection closed\n            };\n\n            return _context2.abrupt(\"return\", ws);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/queries/crud/streamQuery.ts"],"names":["AsyncStorage","config","query","wsCallback","options","opt","useSession","debug","headers","getItem","sessionRaw","session","JSON","parse","id","ws","WebSocket","wsurl","onopen","send","type","payload","variables","extensions","operationName","onmessage","e","data","console","log","err","onerror","onclose"],"mappings":";;;;AAAA,SAASA,YAAT;AACA,OAAOC,MAAP;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,kBACbC,KADa,EAEbC,UAFa,EAGbC,OAHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAKPC,YAAAA,GALO,qBAMR;AAAEC,cAAAA,UAAU,EAAE,IAAd;AAAoBC,cAAAA,KAAK,EAAE;AAA3B,aANQ,EAORH,OAPQ;AASTI,YAAAA,OATS,GASM;AACjB,8BAAgB;AADC,aATN;;AAAA,iBAYTH,GAAG,CAACC,UAZK;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAacN,YAAY,CAACS,OAAb,CAAqB,SAArB,CAbd;;AAAA;AAaLC,YAAAA,UAbK;AAcLC,YAAAA,OAdK,GAcKC,IAAI,CAACC,KAAL,CAAWH,UAAU,IAAI,OAAzB,CAdL;;AAAA,gBAeNC,OAfM;AAAA;AAAA;AAAA;;AAAA,8CAgBF,KAhBE;;AAAA;AAkBTH,YAAAA,OAAO,CAAC,qBAAD,CAAP,GAAiCG,OAAO,CAACG,EAAzC;;AAlBS;AAsBPC,YAAAA,EAtBO,GAsBF,IAAIC,SAAJ,CAAcf,MAAM,CAACgB,KAArB,CAtBE;AAuBbF,YAAAA,EAAE,CAACG,MAAH;AAAA;AAAA;AAAA;AAAA,qCAAY;AAAA;AAAA;AAAA;AAAA;AACVH,sBAAAA,EAAE,CAACI,IAAH,CACE,gBAAe;AACbC,wBAAAA,IAAI,EAAE,iBADO;AAEbC,wBAAAA,OAAO,EAAE;AACPb,0BAAAA,OAAO,EAAPA;AADO;AAFI,uBAAf,CADF;AAQAO,sBAAAA,EAAE,CAACI,IAAH,CACE,gBAAe;AACbL,wBAAAA,EAAE,EAAE,GADS;AAEbM,wBAAAA,IAAI,EAAE,OAFO;AAGbC,wBAAAA,OAAO,EAAE;AACPC,0BAAAA,SAAS,EAAE,EADJ;AAEPC,0BAAAA,UAAU,EAAE,EAFL;AAGPC,0BAAAA,aAAa,EAAE,IAHR;AAIPtB,0BAAAA,KAAK,EAALA;AAJO;AAHI,uBAAf,CADF;;AATU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAZ;;AAuBAa,YAAAA,EAAE,CAACU,SAAH,GAAe,UAACC,CAAD,EAAY;AACzB,kBAAI;AACF,oBAAMC,IAAI,GAAGf,IAAI,CAACC,KAAL,CAAWa,CAAC,CAACC,IAAb,CAAb;;AACA,oBAAIA,IAAI,CAACP,IAAL,KAAc,MAAd,IAAwBO,IAAI,CAACP,IAAL,KAAc,OAA1C,EAAmD;AACjDjB,kBAAAA,UAAU,CAACwB,IAAD,CAAV;;AACA,sBAAIA,IAAI,CAACP,IAAL,KAAc,OAAlB,EAA2B;AACzBQ,oBAAAA,OAAO,CAACC,GAAR,CAAY3B,KAAZ,EAAmByB,IAAnB;AACD;AACF;AACF,eARD,CAQE,OAAOG,GAAP,EAAY,CAAE;AACjB,aAVD;;AAYAf,YAAAA,EAAE,CAACgB,OAAH,GAAa,UAACL,CAAD,EAAY,CACvB;AACD,aAFD;;AAIAX,YAAAA,EAAE,CAACiB,OAAH,GAAa,UAACN,CAAD,EAAY,CACvB;AACD,aAFD;;AA9Da,8CAiENX,EAjEM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { AsyncStorage } from \"react-native\";\nimport config from \"@app/libs/config\";\n\ninterface opts {\n  useSession?: boolean;\n  debug?: boolean;\n}\n\nexport default async (\n  query: string,\n  wsCallback: (value: any) => void,\n  options?: opts\n) => {\n  const opt = {\n    ...{ useSession: true, debug: false },\n    ...options\n  };\n  let headers: any = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (opt.useSession) {\n    const sessionRaw = await AsyncStorage.getItem(\"SESSION\");\n    const session = JSON.parse(sessionRaw || \"false\");\n    if (!session) {\n      return false;\n    } else {\n      headers[\"X-Hasura-Session-Id\"] = session.id;\n    }\n  }\n\n  const ws = new WebSocket(config.wsurl);\n  ws.onopen = async () => {\n    ws.send(\n      JSON.stringify({\n        type: \"connection_init\",\n        payload: {\n          headers\n        }\n      })\n    );\n    ws.send(\n      JSON.stringify({\n        id: \"1\",\n        type: \"start\",\n        payload: {\n          variables: {},\n          extensions: {},\n          operationName: null,\n          query\n        }\n      })\n    );\n  };\n\n  ws.onmessage = (e: any) => {\n    try {\n      const data = JSON.parse(e.data);\n      if (data.type === \"data\" || data.type === \"error\") {\n        wsCallback(data);\n        if (data.type === \"error\") {\n          console.log(query, data);\n        }\n      }\n    } catch (err) {}\n  };\n\n  ws.onerror = (e: any) => {\n    // an error occurred\n  };\n\n  ws.onclose = (e: any) => {\n    // connection closed\n  };\n  return ws;\n};\n"]},"metadata":{},"sourceType":"module"}