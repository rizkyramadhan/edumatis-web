{"ast":null,"code":"var _jsxFileName = \"/Users/riz/Documents/edumatis-web/libs/ui/UIFieldSelectNative.tsx\";\nvar __jsx = React.createElement;\nimport { S, St } from \"./Style\";\nimport React, { useState } from \"react\";\nimport { Picker, Text, View } from \"react-native-web\";\nexport default (({\n  setValue,\n  value,\n  items,\n  label,\n  style,\n  fieldActiveStyle,\n  inputStyle = S(St.TextInput),\n  inputProps\n}) => {\n  const {\n    0: temp,\n    1: setTemp\n  } = useState();\n  const {\n    0: focused,\n    1: setFocused\n  } = useState(false);\n  const SLabel = !!value || !!temp ? St.LabelFocus : St.SelectLabel;\n  return __jsx(View, {\n    style: focused ? S(S(St.Field, style), S(St.FieldActive, fieldActiveStyle)) : S(St.Field, style),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, !!label && __jsx(Text, {\n    style: S(St.LabelFocus, {\n      marginLeft: 10\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, label), __jsx(Picker, {\n    mode: \"dialog\",\n    style: {\n      marginVertical: 5\n    },\n    selectedValue: value || temp,\n    onValueChange: (itemValue, itemIndex) => setValue != undefined ? setValue(itemValue) : setTemp(itemValue),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, items.map((item, index) => {\n    if (typeof item === \"string\") return __jsx(Picker.Item, {\n      key: index,\n      label: item,\n      value: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n    return __jsx(Picker.Item, {\n      key: index,\n      label: item.label,\n      value: item.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  })));\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/ui/UIFieldSelectNative.tsx"],"names":["S","St","React","useState","Picker","Text","View","setValue","value","items","label","style","fieldActiveStyle","inputStyle","TextInput","inputProps","temp","setTemp","focused","setFocused","SLabel","LabelFocus","SelectLabel","Field","FieldActive","marginLeft","marginVertical","itemValue","itemIndex","undefined","map","item","index"],"mappings":";;AAAA,SAASA,CAAT,EAAYC,EAAZ;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB;AAEA,gBAAe,CAAC;AACdC,EAAAA,QADc;AAEdC,EAAAA,KAFc;AAGdC,EAAAA,KAHc;AAIdC,EAAAA,KAJc;AAKdC,EAAAA,KALc;AAMdC,EAAAA,gBANc;AAOdC,EAAAA,UAAU,GAAGb,CAAC,CAACC,EAAE,CAACa,SAAJ,CAPA;AAQdC,EAAAA;AARc,CAAD,KASJ;AACT,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBd,QAAQ,EAAhC;AACA,QAAM;AAAA,OAACe,OAAD;AAAA,OAAUC;AAAV,MAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMiB,MAAM,GAAG,CAAC,CAACZ,KAAF,IAAW,CAAC,CAACQ,IAAb,GAAoBf,EAAE,CAACoB,UAAvB,GAAoCpB,EAAE,CAACqB,WAAtD;AAEA,SACE,MAAC,IAAD;AACE,IAAA,KAAK,EACHJ,OAAO,GACHlB,CAAC,CAACA,CAAC,CAACC,EAAE,CAACsB,KAAJ,EAAWZ,KAAX,CAAF,EAAqBX,CAAC,CAACC,EAAE,CAACuB,WAAJ,EAAiBZ,gBAAjB,CAAtB,CADE,GAEHZ,CAAC,CAACC,EAAE,CAACsB,KAAJ,EAAWZ,KAAX,CAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOG,CAAC,CAACD,KAAF,IACC,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEV,CAAC,CAACC,EAAE,CAACoB,UAAJ,EAAgB;AAAEI,MAAAA,UAAU,EAAE;AAAd,KAAhB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoDf,KAApD,CARJ,EAUE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAE;AAAEgB,MAAAA,cAAc,EAAE;AAAlB,KAFT;AAGE,IAAA,aAAa,EAAElB,KAAK,IAAIQ,IAH1B;AAIE,IAAA,aAAa,EAAE,CAACW,SAAD,EAAYC,SAAZ,KACbrB,QAAQ,IAAIsB,SAAZ,GAAwBtB,QAAQ,CAACoB,SAAD,CAAhC,GAA8CV,OAAO,CAACU,SAAD,CALzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGlB,KAAK,CAACqB,GAAN,CAAU,CAACC,IAAD,EAAYC,KAAZ,KAA8B;AACvC,QAAI,OAAOD,IAAP,KAAgB,QAApB,EACE,OAAO,MAAC,MAAD,CAAQ,IAAR;AAAa,MAAA,GAAG,EAAEC,KAAlB;AAAyB,MAAA,KAAK,EAAED,IAAhC;AAAsC,MAAA,KAAK,EAAEA,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEF,WACE,MAAC,MAAD,CAAQ,IAAR;AAAa,MAAA,GAAG,EAAEC,KAAlB;AAAyB,MAAA,KAAK,EAAED,IAAI,CAACrB,KAArC;AAA4C,MAAA,KAAK,EAAEqB,IAAI,CAACvB,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GAPA,CARH,CAVF,CADF;AA8BD,CA5CD","sourcesContent":["import { S, St } from \"@app/libs/ui/Style\";\nimport React, { useState } from \"react\";\nimport { Picker, Text, View } from \"react-native\";\n\nexport default ({\n  setValue,\n  value,\n  items,\n  label,\n  style,\n  fieldActiveStyle,\n  inputStyle = S(St.TextInput),\n  inputProps\n}: any) => {\n  const [temp, setTemp] = useState();\n  const [focused, setFocused] = useState(false);\n  const SLabel = !!value || !!temp ? St.LabelFocus : St.SelectLabel;\n\n  return (\n    <View\n      style={\n        focused\n          ? S(S(St.Field, style), S(St.FieldActive, fieldActiveStyle))\n          : S(St.Field, style)\n      }\n    >\n      {!!label && (\n        <Text style={S(St.LabelFocus, { marginLeft: 10 })}>{label}</Text>\n      )}\n      <Picker\n        mode=\"dialog\"\n        style={{ marginVertical: 5 }}\n        selectedValue={value || temp}\n        onValueChange={(itemValue, itemIndex) =>\n          setValue != undefined ? setValue(itemValue) : setTemp(itemValue)\n        }\n      >\n        {items.map((item: any, index: number) => {\n          if (typeof item === \"string\")\n            return <Picker.Item key={index} label={item} value={item} />;\n\n          return (\n            <Picker.Item key={index} label={item.label} value={item.value} />\n          );\n        })}\n      </Picker>\n    </View>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}