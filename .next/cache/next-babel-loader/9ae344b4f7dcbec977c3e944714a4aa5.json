{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\nimport createRecord from \"../../../../../libs/queries/crud/createRecord\";\nimport deleteRecord from \"../../../../../libs/queries/crud/deleteRecord\";\nimport rawQuery from \"../../../../../libs/queries/crud/rawQuery\";\nimport updateRecord from \"../../../../../libs/queries/crud/updateRecord\";\nimport UIBody from \"../../../../../libs/ui/UIBody\";\nimport UIButton from \"../../../../../libs/ui/UIButton\";\nimport UICol from \"../../../../../libs/ui/UICol\";\nimport UIContainer from \"../../../../../libs/ui/UIContainer\";\nimport UIFieldSelectNative from \"../../../../../libs/ui/UIFieldSelectNative\";\nimport UIFieldText from \"../../../../../libs/ui/UIFieldText\";\nimport UIHead from \"../../../../../libs/ui/UIHead\";\nimport UIRow from \"../../../../../libs/ui/UIRow\";\nimport { observer, useObservable } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { Alert, Platform, Text, View, TouchableOpacity } from \"react-native-web\";\nimport KelasPicker from \"../Kelas/KelasPicker\";\nimport get from \"lodash.get\";\nexport default observer(({\n  navigation\n}) => {\n  const data = useObservable({\n    form: (navigation || {\n      getParam: () => ({})\n    }).getParam(\"item\")\n  });\n  const count = get(data, \"form.transaksi_aggregate.aggregate.count\");\n  useEffect(() => {\n    if (data.form.id) {\n      rawQuery(`\n      {\n        kewajiban(where: {id: {_eq: ${data.form.id}}}) {\n          kelas\n          batas_pembayaran\n          id\n          nominal\n          nama_kewajiban\n          status\n          tgl_batas_pembayaran_bulan\n          tipe_pembayaran\n          transaksi_aggregate {\n            aggregate {\n              count\n            }\n          }\n        }\n      }\n    `).then(res => {\n        data.form = res.kewajiban[0];\n      });\n    }\n  }, []);\n  return __jsx(UIContainer, null, __jsx(UIHead, {\n    navigation: navigation,\n    title: ` Kewajiban ` + (data.form.id ? `#${data.form.id}: ${data.form.nama_kewajiban}` : `Baru`),\n    onBack: () => {\n      navigation.goBack();\n    }\n  }, __jsx(UIRow, null, __jsx(UIButton, {\n    onPress: async () => {\n      if (data.form.id) {\n        await updateRecord(\"kewajiban\", data.form);\n      } else {\n        await createRecord(\"kewajiban\", data.form);\n      }\n\n      navigation.goBack();\n    }\n  }, \"Simpan\"), count === 0 && __jsx(UIButton, {\n    style: {\n      backgroundColor: \"red\",\n      marginLeft: -5\n    },\n    onPress: async () => {\n      if (Platform.OS === \"web\") {\n        if (confirm(\"Apakah anda yakin ingin menghapus kewajiban ini ?\")) {\n          if (data.form.id) {\n            await deleteRecord(\"kewajiban\", {\n              id: data.form.id\n            });\n          }\n\n          navigation.goBack();\n        }\n      } else {\n        Alert.alert(\"Menghapus Kewajiban\", \"Apakah Anda yakin ingin menghapus kewajiban ini ?\", [{\n          text: \"NO\",\n          style: \"cancel\",\n          onPress: () => {}\n        }, {\n          text: \"YES\",\n          onPress: async () => {\n            if (data.form.id) {\n              await deleteRecord(\"kewajiban\", {\n                id: data.form.id\n              });\n            }\n\n            navigation.goBack();\n          }\n        }]);\n      }\n    }\n  }, \"Hapus\"))), __jsx(UIBody, null, __jsx(UIRow, {\n    style: {\n      paddingBottom: 25\n    }\n  }, count === 0 ? __jsx(Text, null, \"Transaksi untuk kewajiban ini masih kosong.\") : __jsx(TouchableOpacity, null, __jsx(UIRow, null, __jsx(Text, null, \"Terdapat\"), __jsx(Text, {\n    style: {\n      marginHorizontal: 5,\n      textDecorationLine: \"underline\"\n    }\n  }, count, \" transaksi\"), __jsx(Text, null, \" untuk kewajiban ini.\")))), __jsx(UIFieldText, {\n    label: \"Nama Kewajiban\",\n    setValue: value => {\n      data.form.nama_kewajiban = value;\n    },\n    value: data.form.nama_kewajiban\n  }), __jsx(UIRow, null, __jsx(UICol, {\n    size: 4,\n    sizesm: 6,\n    sizexs: 6,\n    sizemd: 6\n  }, __jsx(UIFieldText, {\n    label: \"Nominal\",\n    setValue: value => {\n      data.form.nominal = value;\n    },\n    value: data.form.nominal\n  })), __jsx(UICol, {\n    size: 4,\n    sizesm: 6,\n    sizexs: 6,\n    sizemd: 6\n  }, __jsx(UIFieldSelectNative, {\n    label: \"Status Kewajiban\",\n    items: [\"aktif\", \"non-aktif\"],\n    setValue: value => {\n      data.form.status = value;\n    },\n    value: data.form.status\n  })), __jsx(UICol, {\n    size: 4,\n    sizesm: 6,\n    sizexs: 6,\n    sizemd: 6\n  }, __jsx(UIFieldSelectNative, {\n    label: \"Tipe Pembayaran\",\n    items: [\"Bulanan\", \"Insidentil\"],\n    setValue: value => {\n      data.form.tipe_pembayaran = value;\n    },\n    value: data.form.tipe_pembayaran\n  }))), __jsx(KelasPicker, {\n    form: data.form,\n    renderKelasTitle: kelas => __jsx(Text, null, \"Rp \", _parseInt(kelas.nominal).toLocaleString(), \" \"),\n    renderKelas: (kelas, k) => {\n      return __jsx(View, null, __jsx(UIFieldText, {\n        label: `Nominal untuk murid kelas ${k.nama_kelas}`,\n        value: kelas.nominal,\n        setValue: value => {\n          kelas.nominal = value;\n        }\n      }), __jsx(Text, {\n        style: {\n          padding: 10,\n          paddingLeft: 15,\n          color: \"#333\"\n        }\n      }, \"Khusus untuk murid ini, di set sesuai nominal tertera:\"));\n    },\n    renderMurid: (murid, kelas) => {\n      return __jsx(UICol, {\n        size: 6\n      }, __jsx(UIFieldText, {\n        label: \"Nominal\",\n        value: murid.nominal || kelas.nominal,\n        setValue: value => {\n          murid.nominal = value;\n        }\n      }));\n    }\n  })));\n});","map":null,"metadata":{},"sourceType":"module"}