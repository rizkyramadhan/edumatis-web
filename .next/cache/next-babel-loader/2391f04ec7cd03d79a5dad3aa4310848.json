{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\nimport { observer, useObservable } from \"mobx-react-lite\";\nimport React, { useRef } from \"react\";\nimport { toJS } from \"mobx\";\n\nvar container = function container(routes) {\n  var routeStack = [];\n  var navParam = {};\n  return observer(function (props, ref) {\n    var screenRef = useRef(null);\n    var current = useObservable({\n      name: \"\"\n    });\n\n    if (current.name === \"\") {\n      _Object$keys(routes).map(function (r, index) {\n        if (index === 0) {\n          current.name = r;\n          screenRef.current = routes[r].screen;\n        }\n      });\n    }\n\n    var navigation = {\n      _routes: routes,\n      getParam: function getParam(key) {\n        return navParam[key];\n      },\n      dangerouslyGetParent: function dangerouslyGetParent() {\n        return props.parentNavigation;\n      },\n      goBack: function goBack() {\n        if (routeStack.length > 0) {\n          var screen = routeStack.pop();\n\n          if (routes[screen.name]) {\n            navParam = screen.data;\n            screenRef.current = routes[screen.name].screen;\n            current.name = screen.name;\n          }\n        }\n      },\n      navigate: function navigate(screen, data) {\n        routeStack.push({\n          name: current.name,\n          data: toJS(navParam)\n        });\n\n        if (routes[screen]) {\n          navParam = data;\n          screenRef.current = routes[screen].screen;\n          current.name = screen;\n        }\n      },\n      replace: function replace(screen) {\n        if (routes[screen]) {\n          screenRef.current = routes[screen].screen;\n          current.name = screen;\n        }\n      },\n      popToTop: function popToTop() {\n        if (props.parentNavigation) {\n          props.parentNavigation.popToTop();\n        } else {\n          var first = _Object$keys(routes)[0];\n\n          current.name = first;\n          screenRef.current = routes[first].screen;\n        }\n      }\n    };\n    var Component = screenRef.current;\n\n    if (ref && ref.current) {\n      ref.current = navigation;\n    }\n\n    return __jsx(Component, _extends({}, props, {\n      navigation: navigation\n    }));\n  }, {\n    forwardRef: true\n  });\n};\n\nexport default (function (data) {\n  return container(data);\n});\nexport var createNavigateTo = function createNavigateTo(navigation) {\n  return function (screen) {\n    navigation.replace(screen);\n    if (navigation.closeDrawer) navigation.closeDrawer();\n  };\n};","map":null,"metadata":{},"sourceType":"module"}