{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport query from \"../queries/crud/query\";\nimport streamQuery from \"../queries/crud/streamQuery\";\nimport { AsyncStorage } from \"react-native-web\";\nimport { flow, types } from \"mobx-state-tree\";\nexport default (function (opt) {\n  return types.model({\n    query: types.optional(types.string, opt.query || \"\"),\n    loading: types.optional(types[\"boolean\"], false),\n    list: types.array(opt.record)\n  }).actions(function (self) {\n    var meta = JSON.parse(opt.record.properties._meta._defaultValue);\n    return {\n      afterCreate: function afterCreate() {\n        if (opt.stream) {\n          self.startStream();\n        } else {\n          self.requery();\n        }\n      },\n      startStream: function startStream() {\n        var where = _Object$keys(opt.where || {}).map(function (w) {\n          return \"\".concat(w, \": {_eq: \").concat(_JSON$stringify(opt.where[w]), \"}\");\n        });\n\n        if (where.length > 0) {\n          where[0] = \",where:{\" + where[0];\n          where[where.length - 1] = where[where.length - 1] + \"}\";\n        }\n\n        var tableArgs = \"\".concat(opt.args || \"\", \" \").concat(where.join(\",\")).trim();\n\n        if (tableArgs.length > 0) {\n          tableArgs = \"(\".concat(tableArgs, \")\");\n        }\n\n        var record = JSON.parse(opt.record.properties._meta._defaultValue);\n        var query = \"subscription {\\n            \".concat(record.tableName).concat(tableArgs, \" \\n              \").concat(opt.query, \" \\n          }\");\n        streamQuery(query, function (result) {\n          if (result.type !== \"error\" && result.payload && result.payload.data && result.payload.data[record.tableName]) {\n            self.setList(result.payload.data[record.tableName].map(function (item) {\n              return opt.record.create(item);\n            }));\n          }\n        });\n      },\n      requery: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var queryOpt, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                queryOpt = {};\n                if (opt.where) queryOpt[\"where\"] = opt.where;\n                if (opt.args) queryOpt[\"args\"] = opt.args;\n                _context.next = 5;\n                return query(meta.tableName, opt.query, queryOpt);\n\n              case 5:\n                result = _context.sent;\n                self.list = (result || []).map(function (item) {\n                  return opt.record.create(item);\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })),\n      serverModify: function serverModify(list) {\n        self.list = list;\n      },\n      localUpdate: function localUpdate(criteria, data) {\n        self.list.forEach(function (item) {\n          var shouldUpdate = true;\n\n          for (var i in criteria) {\n            if (criteria[i] !== item[i]) {\n              shouldUpdate = false;\n              break;\n            }\n          }\n\n          if (shouldUpdate) {\n            for (var _i in data) {\n              item[_i] = data[_i];\n            }\n          }\n        });\n      },\n      localDelete: function localDelete(criteria) {\n        var newlist = [];\n        self.list.forEach(function (item) {\n          var shouldDelete = true;\n\n          for (var i in criteria) {\n            if (criteria[i] !== item[i]) {\n              shouldDelete = false;\n              break;\n            }\n          }\n\n          if (!shouldDelete) {\n            newlist.push(item);\n          }\n        });\n        self.list = newlist;\n      },\n      setList: function setList(newList) {\n        self.list = newList;\n      },\n      localSave: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                self.loading = true;\n                _context2.next = 3;\n                return AsyncStorage.setItem(meta.tableName, _JSON$stringify(self.list));\n\n              case 3:\n                self.loading = false;\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })),\n      localLoad: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                self.loading = true;\n                _context3.next = 3;\n                return AsyncStorage.getItem(meta.tableName);\n\n              case 3:\n                result = _context3.sent;\n                self.list = JSON.parse(result || \"\");\n                self.loading = false;\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))\n    };\n  });\n});","map":null,"metadata":{},"sourceType":"module"}