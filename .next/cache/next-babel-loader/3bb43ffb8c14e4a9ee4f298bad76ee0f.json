{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { AsyncStorage } from \"react-native-web\";\nimport query from \"../crud/query\";\nimport config from \"../../config\";\nexport function setSession(_x) {\n  return _setSession.apply(this, arguments);\n}\n\nfunction _setSession() {\n  _setSession = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(value) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return AsyncStorage.setItem(\"SESSION\", _JSON$stringify(value));\n\n          case 3:\n            _context.next = 8;\n            break;\n\n          case 5:\n            _context.prev = 5;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\");\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 5]]);\n  }));\n  return _setSession.apply(this, arguments);\n}\n\nexport function getSession() {\n  return _getSession.apply(this, arguments);\n}\n\nfunction _getSession() {\n  _getSession = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var loadFromCache,\n        sessionRaw,\n        session,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loadFromCache = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : true;\n            _context2.prev = 1;\n            _context2.next = 4;\n            return AsyncStorage.getItem(\"SESSION\");\n\n          case 4:\n            sessionRaw = _context2.sent;\n\n            if (!(sessionRaw !== null)) {\n              _context2.next = 13;\n              break;\n            }\n\n            session = JSON.parse(sessionRaw);\n\n            if (!(loadFromCache === false)) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 10;\n            return query(\"user\", _toConsumableArray(config.user.columns), {\n              where: {\n                username: session.user.username\n              }\n            });\n\n          case 10:\n            session.user = _context2.sent;\n            setSession(session);\n\n          case 12:\n            return _context2.abrupt(\"return\", session);\n\n          case 13:\n            return _context2.abrupt(\"return\", null);\n\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](1);\n            return _context2.abrupt(\"return\", null);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 16]]);\n  }));\n  return _getSession.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/queries/user/getsetSession.ts"],"names":["AsyncStorage","query","config","setSession","value","setItem","getSession","loadFromCache","getItem","sessionRaw","session","JSON","parse","user","columns","where","username"],"mappings":";;;;AAAA,SAASA,YAAT;AACA,OAAOC,KAAP;AACA,OAAOC,MAAP;AAEA,gBAAsBC,UAAtB;AAAA;AAAA;;;;;2BAAO,iBAA0BC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEGJ,YAAY,CAACK,OAAb,CAAqB,SAArB,EAAgC,gBAAeD,KAAf,CAAhC,CAFH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsBE,UAAtB;AAAA;AAAA;;;;;2BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BC,YAAAA,aAA1B,8DAA0C,IAA1C;AAAA;AAAA;AAAA,mBAEsBP,YAAY,CAACQ,OAAb,CAAqB,SAArB,CAFtB;;AAAA;AAEGC,YAAAA,UAFH;;AAAA,kBAGCA,UAAU,KAAK,IAHhB;AAAA;AAAA;AAAA;;AAIGC,YAAAA,OAJH,GAIaC,IAAI,CAACC,KAAL,CAAWH,UAAX,CAJb;;AAAA,kBAKGF,aAAa,KAAK,KALrB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMsBN,KAAK,CAAC,MAAD,qBAAaC,MAAM,CAACW,IAAP,CAAYC,OAAzB,GAAmC;AAC3DC,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,QAAQ,EAAEN,OAAO,CAACG,IAAR,CAAaG;AAAzB;AADoD,aAAnC,CAN3B;;AAAA;AAMCN,YAAAA,OAAO,CAACG,IANT;AASCV,YAAAA,UAAU,CAACO,OAAD,CAAV;;AATD;AAAA,8CAYMA,OAZN;;AAAA;AAAA,8CAcI,IAdJ;;AAAA;AAAA;AAAA;AAAA,8CAgBI,IAhBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { AsyncStorage } from \"react-native\";\nimport query from \"../crud/query\";\nimport config from \"@app/libs/config\";\n\nexport async function setSession(value: any) {\n  try {\n    await AsyncStorage.setItem(\"SESSION\", JSON.stringify(value));\n  } catch (error) {\n    return;\n  }\n}\n\nexport async function getSession(loadFromCache = true) {\n  try {\n    const sessionRaw = await AsyncStorage.getItem(\"SESSION\");\n    if (sessionRaw !== null) {\n      let session = JSON.parse(sessionRaw);\n      if (loadFromCache === false) {\n        session.user = await query(\"user\", [...config.user.columns], {\n          where: { username: session.user.username }\n        });\n        setSession(session);\n      }\n\n      return session;\n    }\n    return null;\n  } catch (error) {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}