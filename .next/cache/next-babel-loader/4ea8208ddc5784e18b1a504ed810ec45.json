{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport config from \"../../config\";\n\nconst get = require(\"lodash.get\");\n\nexport default (async (client_id, username = \"\", password = \"\") => {\n  const query = `query ($u: String!, $c: Int!) {\n    ${config.table}(where: {_and: {${config.identifier.client_id}: {_eq: $c}, ${config.identifier.username}: {_eq: $u}}}) {\n      sessions(limit: 1, order_by: {tstamp: desc}) {\n        id\n        ${config.table} {\n          ${config.user.columns.join(\"\\n\")}\n        }\n      }\n    }\n  }`;\n  const response = await fetch(config.url, {\n    method: \"POST\",\n    body: _JSON$stringify({\n      query,\n      variables: {\n        u: username,\n        c: client_id\n      }\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-Hasura-Username\": username,\n      \"X-Hasura-Password\": password,\n      \"X-Hasura-Cid\": client_id\n    }\n  });\n  const res = await response.json();\n  return get(res, `data.${config.table}[0].sessions[0]`);\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/queries/user/login.ts"],"names":["config","get","require","client_id","username","password","query","table","identifier","user","columns","join","response","fetch","url","method","body","variables","u","c","headers","res","json"],"mappings":";AAAA,OAAOA,MAAP;;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AAEA,gBAAe,OACbC,SADa,EAEbC,QAAgB,GAAG,EAFN,EAGbC,QAAgB,GAAG,EAHN,KAIV;AACH,QAAMC,KAAK,GAAI;MACXN,MAAM,CAACO,KAAM,mBAAkBP,MAAM,CAACQ,UAAP,CAAkBL,SAAU,gBAC7DH,MAAM,CAACQ,UAAP,CAAkBJ,QACnB;;;UAGOJ,MAAM,CAACO,KAAM;YACXP,MAAM,CAACS,IAAP,CAAYC,OAAZ,CAAoBC,IAApB,CAAyB,IAAzB,CAA+B;;;;IAPzC;AAYA,QAAMC,QAAkB,GAAG,MAAMC,KAAK,CAACb,MAAM,CAACc,GAAR,EAAa;AACjDC,IAAAA,MAAM,EAAE,MADyC;AAEjDC,IAAAA,IAAI,EAAE,gBAAe;AACnBV,MAAAA,KADmB;AAEnBW,MAAAA,SAAS,EAAE;AACTC,QAAAA,CAAC,EAAEd,QADM;AAETe,QAAAA,CAAC,EAAEhB;AAFM;AAFQ,KAAf,CAF2C;AASjDiB,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,2BAAqBhB,QAFd;AAGP,2BAAqBC,QAHd;AAIP,sBAAgBF;AAJT;AATwC,GAAb,CAAtC;AAgBA,QAAMkB,GAAG,GAAG,MAAMT,QAAQ,CAACU,IAAT,EAAlB;AACA,SAAOrB,GAAG,CAACoB,GAAD,EAAO,QAAOrB,MAAM,CAACO,KAAM,iBAA3B,CAAV;AACD,CAnCD","sourcesContent":["import config from \"@app/libs/config\";\n\nconst get = require(\"lodash.get\");\n\nexport default async (\n  client_id: string,\n  username: string = \"\",\n  password: string = \"\"\n) => {\n  const query = `query ($u: String!, $c: Int!) {\n    ${config.table}(where: {_and: {${config.identifier.client_id}: {_eq: $c}, ${\n    config.identifier.username\n  }: {_eq: $u}}}) {\n      sessions(limit: 1, order_by: {tstamp: desc}) {\n        id\n        ${config.table} {\n          ${config.user.columns.join(\"\\n\")}\n        }\n      }\n    }\n  }`;\n  const response: Response = await fetch(config.url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      query,\n      variables: {\n        u: username,\n        c: client_id\n      }\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-Hasura-Username\": username,\n      \"X-Hasura-Password\": password,\n      \"X-Hasura-Cid\": client_id\n    }\n  });\n  const res = await response.json();\n  return get(res, `data.${config.table}[0].sessions[0]`);\n};\n"]},"metadata":{},"sourceType":"module"}