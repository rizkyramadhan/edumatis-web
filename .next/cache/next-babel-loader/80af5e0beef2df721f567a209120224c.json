{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport query from \"../queries/crud/query\";\nimport streamQuery from \"../queries/crud/streamQuery\";\nimport { AsyncStorage } from \"react-native-web\";\nimport { flow, types } from \"mobx-state-tree\";\nexport default (function (opt) {\n  return types.model({\n    query: types.optional(types.string, opt.query || \"\"),\n    loading: types.optional(types[\"boolean\"], false),\n    list: types.array(opt.record)\n  }).actions(function (self) {\n    var meta = JSON.parse(opt.record.properties._meta._defaultValue);\n    return {\n      afterCreate: function afterCreate() {\n        if (opt.stream) {\n          self.startStream();\n        } else {\n          self.requery();\n        }\n      },\n      startStream: function startStream() {\n        var where = _Object$keys(opt.where || {}).map(function (w) {\n          return \"\".concat(w, \": {_eq: \").concat(_JSON$stringify(opt.where[w]), \"}\");\n        });\n\n        if (where.length > 0) {\n          where[0] = \",where:{\" + where[0];\n          where[where.length - 1] = where[where.length - 1] + \"}\";\n        }\n\n        var tableArgs = \"\".concat(opt.args || \"\", \" \").concat(where.join(\",\")).trim();\n\n        if (tableArgs.length > 0) {\n          tableArgs = \"(\".concat(tableArgs, \")\");\n        }\n\n        var record = JSON.parse(opt.record.properties._meta._defaultValue);\n        var query = \"subscription {\\n            \".concat(record.tableName).concat(tableArgs, \" \\n              \").concat(opt.query, \" \\n          }\");\n        streamQuery(query, function (result) {\n          if (result.type !== \"error\" && result.payload && result.payload.data && result.payload.data[record.tableName]) {\n            self.setList(result.payload.data[record.tableName].map(function (item) {\n              return opt.record.create(item);\n            }));\n          }\n        });\n      },\n      requery: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var queryOpt, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                queryOpt = {};\n                if (opt.where) queryOpt[\"where\"] = opt.where;\n                if (opt.args) queryOpt[\"args\"] = opt.args;\n                _context.next = 5;\n                return query(meta.tableName, opt.query, queryOpt);\n\n              case 5:\n                result = _context.sent;\n                self.list = (result || []).map(function (item) {\n                  return opt.record.create(item);\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })),\n      serverModify: function serverModify(list) {\n        self.list = list;\n      },\n      localUpdate: function localUpdate(criteria, data) {\n        self.list.forEach(function (item) {\n          var shouldUpdate = true;\n\n          for (var i in criteria) {\n            if (criteria[i] !== item[i]) {\n              shouldUpdate = false;\n              break;\n            }\n          }\n\n          if (shouldUpdate) {\n            for (var _i in data) {\n              item[_i] = data[_i];\n            }\n          }\n        });\n      },\n      localDelete: function localDelete(criteria) {\n        var newlist = [];\n        self.list.forEach(function (item) {\n          var shouldDelete = true;\n\n          for (var i in criteria) {\n            if (criteria[i] !== item[i]) {\n              shouldDelete = false;\n              break;\n            }\n          }\n\n          if (!shouldDelete) {\n            newlist.push(item);\n          }\n        });\n        self.list = newlist;\n      },\n      setList: function setList(newList) {\n        self.list = newList;\n      },\n      localSave: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                self.loading = true;\n                _context2.next = 3;\n                return AsyncStorage.setItem(meta.tableName, _JSON$stringify(self.list));\n\n              case 3:\n                self.loading = false;\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })),\n      localLoad: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                self.loading = true;\n                _context3.next = 3;\n                return AsyncStorage.getItem(meta.tableName);\n\n              case 3:\n                result = _context3.sent;\n                self.list = JSON.parse(result || \"\");\n                self.loading = false;\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))\n    };\n  });\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/utils/List.ts"],"names":["query","streamQuery","AsyncStorage","flow","types","opt","model","optional","string","loading","list","array","record","actions","self","meta","JSON","parse","properties","_meta","_defaultValue","afterCreate","stream","startStream","requery","where","map","w","length","tableArgs","args","join","trim","tableName","result","type","payload","data","setList","item","create","queryOpt","serverModify","localUpdate","criteria","forEach","shouldUpdate","i","localDelete","newlist","shouldDelete","push","newList","localSave","setItem","localLoad","getItem"],"mappings":"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","sourcesContent":["import query from \"@app/libs/queries/crud/query\";\nimport streamQuery from \"@app/libs/queries/crud/streamQuery\";\nimport { AsyncStorage } from \"react-native\";\nimport { flow, types } from \"mobx-state-tree\";\n\ninterface ListOptions {\n  record: any;\n  query: string;\n  stream?: boolean;\n  args?: string;\n  where?: any;\n}\n\ninterface StreamOptions {\n  useSession: boolean;\n}\n\nexport default (opt: ListOptions) => {\n  return types\n    .model({\n      query: types.optional(types.string, opt.query || \"\"),\n      loading: types.optional(types.boolean, false),\n      list: types.array(opt.record)\n    })\n    .actions((self: any) => {\n      const meta = JSON.parse(opt.record.properties._meta._defaultValue);\n      return {\n        afterCreate: function() {\n          if (opt.stream) {\n            self.startStream();\n          } else {\n            self.requery();\n          }\n        },\n        startStream: function() {\n          const where = Object.keys(opt.where || {}).map((w: string) => {\n            return `${w}: {_eq: ${JSON.stringify(opt.where[w])}}`;\n          });\n          if (where.length > 0) {\n            where[0] = \",where:{\" + where[0];\n            where[where.length - 1] = where[where.length - 1] + \"}\";\n          }\n\n          let tableArgs = `${opt.args || \"\"} ${where.join(\",\")}`.trim();\n          if (tableArgs.length > 0) {\n            tableArgs = `(${tableArgs})`;\n          }\n          const record = JSON.parse(opt.record.properties._meta._defaultValue);\n          const query = `subscription {\n            ${record.tableName}${tableArgs} \n              ${opt.query} \n          }`;\n          streamQuery(query, (result: any) => {\n            if (\n              result.type !== \"error\" &&\n              result.payload &&\n              result.payload.data &&\n              result.payload.data[record.tableName]\n            ) {\n              self.setList(\n                result.payload.data[record.tableName].map((item: any) => {\n                  return opt.record.create(item);\n                })\n              );\n            }\n          });\n        },\n        requery: flow(function*() {\n          let queryOpt: any = {};\n\n          if (opt.where) queryOpt[\"where\"] = opt.where;\n          if (opt.args) queryOpt[\"args\"] = opt.args;\n          const result = yield query(meta.tableName, opt.query, queryOpt);\n\n          self.list = (result || []).map((item: any) => {\n            return opt.record.create(item);\n          });\n        }),\n        serverModify: function(list: ReadonlyArray<any>) {\n          self.list = list;\n        },\n        localUpdate: function(criteria: any, data: any) {\n          self.list.forEach((item: any) => {\n            let shouldUpdate = true;\n            for (let i in criteria) {\n              if (criteria[i] !== item[i]) {\n                shouldUpdate = false;\n                break;\n              }\n            }\n            if (shouldUpdate) {\n              for (let i in data) {\n                item[i] = data[i];\n              }\n            }\n          });\n        },\n        localDelete: function(criteria: any) {\n          const newlist: any = [];\n          self.list.forEach((item: any) => {\n            let shouldDelete = true;\n            for (let i in criteria) {\n              if (criteria[i] !== item[i]) {\n                shouldDelete = false;\n                break;\n              }\n            }\n            if (!shouldDelete) {\n              newlist.push(item);\n            }\n          });\n          self.list = newlist;\n        },\n        setList: function(newList: any[]) {\n          self.list = newList;\n        },\n        localSave: flow(function*() {\n          self.loading = true;\n          yield AsyncStorage.setItem(meta.tableName, JSON.stringify(self.list));\n          self.loading = false;\n        }),\n        localLoad: flow(function*() {\n          self.loading = true;\n          const result = yield AsyncStorage.getItem(meta.tableName)\n          self.list = JSON.parse(result || \"\");\n          self.loading = false;\n        })\n      };\n    });\n};\n"]},"metadata":{},"sourceType":"module"}