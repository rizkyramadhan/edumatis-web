{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport StackNav from \"../../../../../libs/nav/StackNav\";\nimport rawQuery from \"../../../../../libs/queries/crud/rawQuery\";\nimport { getSession } from \"../../../../../libs/queries/user/getsetSession\";\nimport UIBody from \"../../../../../libs/ui/UIBody\";\nimport UIContainer from \"../../../../../libs/ui/UIContainer\";\nimport UIHead from \"../../../../../libs/ui/UIHead\";\nimport UIList from \"../../../../../libs/ui/UIList\";\nimport UIListItem from \"../../../../../libs/ui/UIListItem\";\nimport dayjs from \"dayjs\";\nimport { observer, useObservable } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Text, View } from \"react-native-web\";\nimport KewajibanDetail from \"./KewajibanDetail\";\nvar Kewajiban = observer(function (_ref) {\n  var navigation = _ref.navigation;\n  var data = useObservable({\n    list: [],\n    loading: true\n  });\n  return __jsx(UIContainer, null, __jsx(UIHead, {\n    title: \"Kewajiban bulan ini\",\n    navigation: navigation\n  }), __jsx(UIBody, null, __jsx(UIList, {\n    data: data.list,\n    loading: data.loading,\n    render: function render(list) {\n      var item = list.item;\n      return __jsx(UIListItem, {\n        onPress: function onPress() {\n          navigation.navigate(\"KewajibanDetail\", {\n            item: item\n          });\n        }\n      }, __jsx(View, null, __jsx(Text, {\n        style: {\n          fontSize: 15,\n          fontWeight: \"bold\",\n          color: \"#555\"\n        }\n      }, item.nama_kewajiban), __jsx(Text, {\n        style: {\n          fontSize: 14\n        }\n      }, \"Rp \", item.nominal.toLocaleString(), \" (\", item.status, \")\")), __jsx(View, null, __jsx(Text, null, item.tipe_pembayaran)));\n    },\n    reload:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var session, kelasRaw, kelas, monthStart, monthEnd, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getSession();\n\n            case 2:\n              session = _context.sent;\n              _context.next = 5;\n              return rawQuery(\"{\\n              kelas_murid(where: {murid_id: {_eq: \".concat(session.murid.id, \"}}) {\\n                kelas_id\\n              }\\n            }\"));\n\n            case 5:\n              kelasRaw = _context.sent;\n\n              if (!(kelasRaw && kelasRaw.kelas_murid && kelasRaw.kelas_murid.length > 0)) {\n                _context.next = 14;\n                break;\n              }\n\n              kelas = kelasRaw.kelas_murid.map(function (k) {\n                return k.kelas_id.toString();\n              });\n              monthStart = dayjs().startOf(\"month\").subtract(1, \"day\").format(\"YYYY-MM-DD\");\n              monthEnd = dayjs().endOf(\"month\").add(1, \"day\").format(\"YYYY-MM-DD\");\n              _context.next = 12;\n              return rawQuery(\"{\\n                kewajiban(order_by: [{tipe_pembayaran: asc}, {id: asc}], \\n                  where: {kelas: {_has_keys_any: \".concat(_JSON$stringify(kelas), \"}}) {\\n                  id\\n                  nama_kewajiban\\n                  nominal\\n                  tipe_pembayaran\\n                  kelas\\n                  transaksi(\\n                    where: {\\n                      kewajiban: {\\n                        _or:[\\n                          {_and:[\\n                            {tipe_pembayaran:{_eq:\\\"Bulanan\\\"}},\\n                            {transaksi: {\\n                               _and:[\\n                                {tstamp: {_gte: \\\"\").concat(monthStart, \"\\\"}},\\n                                {tstamp: {_lte: \\\"\").concat(monthEnd, \"\\\"}},\\n                              ] \\n                            }}\\n                          ]},\\n                          {tipe_pembayaran:{_eq:\\\"Insidentil\\\"}}\\n                        ]\\n                      }\\n                    }\\n                  ) {\\n                    id\\n                    status\\n                    tstamp\\n                    detail\\n                  }\\n                }  \\n              }\"));\n\n            case 12:\n              result = _context.sent;\n              data.list = result.kewajiban.map(function (item) {\n                _Object$keys(item.kelas).forEach(function (i) {\n                  var k = item.kelas[i];\n\n                  if (kelas.indexOf(k.id + \"\") >= 0 && k.nominal !== undefined) {\n                    item.nominal = k.nominal * 1;\n                  }\n\n                  k.murid.forEach(function (m) {\n                    if (m && session.murid && m.id === session.murid.id) {\n                      if (m.nominal !== undefined) {\n                        item.nominal = m.nominal * 1;\n                      }\n                    }\n                  });\n                });\n\n                item.status = \"Belum Lunas\";\n                item.transaksi.forEach(function (t) {\n                  if (t.paid === \"success\") {\n                    item.status = \"Lunas\";\n                  }\n                });\n                return item;\n              });\n\n            case 14:\n              data.loading = false;\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))\n  })));\n});\nexport default StackNav({\n  Kewajiban: {\n    screen: Kewajiban\n  },\n  KewajibanDetail: {\n    screen: KewajibanDetail\n  }\n});","map":null,"metadata":{},"sourceType":"module"}