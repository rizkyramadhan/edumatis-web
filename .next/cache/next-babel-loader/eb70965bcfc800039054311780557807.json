{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { AsyncStorage } from \"react-native-web\";\nimport config from \"../../config\";\nexport default (async (query, wsCallback, options) => {\n  const opt = _objectSpread({}, {\n    useSession: true,\n    debug: false\n  }, options);\n\n  let headers = {\n    \"Content-Type\": \"application/json\"\n  };\n\n  if (opt.useSession) {\n    const sessionRaw = await AsyncStorage.getItem(\"SESSION\");\n    const session = JSON.parse(sessionRaw || \"false\");\n\n    if (!session) {\n      return false;\n    } else {\n      headers[\"X-Hasura-Session-Id\"] = session.id;\n    }\n  }\n\n  const ws = new WebSocket(config.wsurl);\n\n  ws.onopen = async () => {\n    ws.send(_JSON$stringify({\n      type: \"connection_init\",\n      payload: {\n        headers\n      }\n    }));\n    ws.send(_JSON$stringify({\n      id: \"1\",\n      type: \"start\",\n      payload: {\n        variables: {},\n        extensions: {},\n        operationName: null,\n        query\n      }\n    }));\n  };\n\n  ws.onmessage = e => {\n    try {\n      const data = JSON.parse(e.data);\n\n      if (data.type === \"data\" || data.type === \"error\") {\n        wsCallback(data);\n\n        if (data.type === \"error\") {\n          console.log(query, data);\n        }\n      }\n    } catch (err) {}\n  };\n\n  ws.onerror = e => {// an error occurred\n  };\n\n  ws.onclose = e => {// connection closed\n  };\n\n  return ws;\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/queries/crud/streamQuery.ts"],"names":["AsyncStorage","config","query","wsCallback","options","opt","useSession","debug","headers","sessionRaw","getItem","session","JSON","parse","id","ws","WebSocket","wsurl","onopen","send","type","payload","variables","extensions","operationName","onmessage","e","data","console","log","err","onerror","onclose"],"mappings":";;AAAA,SAASA,YAAT;AACA,OAAOC,MAAP;AAOA,gBAAe,OACbC,KADa,EAEbC,UAFa,EAGbC,OAHa,KAIV;AACH,QAAMC,GAAG,qBACJ;AAAEC,IAAAA,UAAU,EAAE,IAAd;AAAoBC,IAAAA,KAAK,EAAE;AAA3B,GADI,EAEJH,OAFI,CAAT;;AAIA,MAAII,OAAY,GAAG;AACjB,oBAAgB;AADC,GAAnB;;AAGA,MAAIH,GAAG,CAACC,UAAR,EAAoB;AAClB,UAAMG,UAAU,GAAG,MAAMT,YAAY,CAACU,OAAb,CAAqB,SAArB,CAAzB;AACA,UAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,UAAU,IAAI,OAAzB,CAAhB;;AACA,QAAI,CAACE,OAAL,EAAc;AACZ,aAAO,KAAP;AACD,KAFD,MAEO;AACLH,MAAAA,OAAO,CAAC,qBAAD,CAAP,GAAiCG,OAAO,CAACG,EAAzC;AACD;AACF;;AAED,QAAMC,EAAE,GAAG,IAAIC,SAAJ,CAAcf,MAAM,CAACgB,KAArB,CAAX;;AACAF,EAAAA,EAAE,CAACG,MAAH,GAAY,YAAY;AACtBH,IAAAA,EAAE,CAACI,IAAH,CACE,gBAAe;AACbC,MAAAA,IAAI,EAAE,iBADO;AAEbC,MAAAA,OAAO,EAAE;AACPb,QAAAA;AADO;AAFI,KAAf,CADF;AAQAO,IAAAA,EAAE,CAACI,IAAH,CACE,gBAAe;AACbL,MAAAA,EAAE,EAAE,GADS;AAEbM,MAAAA,IAAI,EAAE,OAFO;AAGbC,MAAAA,OAAO,EAAE;AACPC,QAAAA,SAAS,EAAE,EADJ;AAEPC,QAAAA,UAAU,EAAE,EAFL;AAGPC,QAAAA,aAAa,EAAE,IAHR;AAIPtB,QAAAA;AAJO;AAHI,KAAf,CADF;AAYD,GArBD;;AAuBAa,EAAAA,EAAE,CAACU,SAAH,GAAgBC,CAAD,IAAY;AACzB,QAAI;AACF,YAAMC,IAAI,GAAGf,IAAI,CAACC,KAAL,CAAWa,CAAC,CAACC,IAAb,CAAb;;AACA,UAAIA,IAAI,CAACP,IAAL,KAAc,MAAd,IAAwBO,IAAI,CAACP,IAAL,KAAc,OAA1C,EAAmD;AACjDjB,QAAAA,UAAU,CAACwB,IAAD,CAAV;;AACA,YAAIA,IAAI,CAACP,IAAL,KAAc,OAAlB,EAA2B;AACzBQ,UAAAA,OAAO,CAACC,GAAR,CAAY3B,KAAZ,EAAmByB,IAAnB;AACD;AACF;AACF,KARD,CAQE,OAAOG,GAAP,EAAY,CAAE;AACjB,GAVD;;AAYAf,EAAAA,EAAE,CAACgB,OAAH,GAAcL,CAAD,IAAY,CACvB;AACD,GAFD;;AAIAX,EAAAA,EAAE,CAACiB,OAAH,GAAcN,CAAD,IAAY,CACvB;AACD,GAFD;;AAGA,SAAOX,EAAP;AACD,CAlED","sourcesContent":["import { AsyncStorage } from \"react-native\";\nimport config from \"@app/libs/config\";\n\ninterface opts {\n  useSession?: boolean;\n  debug?: boolean;\n}\n\nexport default async (\n  query: string,\n  wsCallback: (value: any) => void,\n  options?: opts\n) => {\n  const opt = {\n    ...{ useSession: true, debug: false },\n    ...options\n  };\n  let headers: any = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (opt.useSession) {\n    const sessionRaw = await AsyncStorage.getItem(\"SESSION\");\n    const session = JSON.parse(sessionRaw || \"false\");\n    if (!session) {\n      return false;\n    } else {\n      headers[\"X-Hasura-Session-Id\"] = session.id;\n    }\n  }\n\n  const ws = new WebSocket(config.wsurl);\n  ws.onopen = async () => {\n    ws.send(\n      JSON.stringify({\n        type: \"connection_init\",\n        payload: {\n          headers\n        }\n      })\n    );\n    ws.send(\n      JSON.stringify({\n        id: \"1\",\n        type: \"start\",\n        payload: {\n          variables: {},\n          extensions: {},\n          operationName: null,\n          query\n        }\n      })\n    );\n  };\n\n  ws.onmessage = (e: any) => {\n    try {\n      const data = JSON.parse(e.data);\n      if (data.type === \"data\" || data.type === \"error\") {\n        wsCallback(data);\n        if (data.type === \"error\") {\n          console.log(query, data);\n        }\n      }\n    } catch (err) {}\n  };\n\n  ws.onerror = (e: any) => {\n    // an error occurred\n  };\n\n  ws.onclose = (e: any) => {\n    // connection closed\n  };\n  return ws;\n};\n"]},"metadata":{},"sourceType":"module"}