{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport { S, St } from \"./Style\";\nimport React from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native-web\";\nexport default (({\n  children,\n  icon,\n  iconMode = \"start\",\n  expand = \"block\",\n  fill = \"solid\",\n  size,\n  style,\n  labelStyle,\n  buttonProps = {},\n  onPress\n}) => {\n  const btnExpand = \"Button\" + expand.charAt(0).toUpperCase() + expand.slice(1).toLowerCase();\n  const btnFIll = \"Button\" + fill.charAt(0).toUpperCase() + fill.slice(1).toLowerCase();\n  const labelClear = fill == \"outline\" || fill == \"clear\" ? \"ButtonLabelClear\" : \"ButtonLabelSolid\";\n  style = S(St.Button, St[btnExpand], St[btnFIll], style);\n  const defaultLabelStyle = S(St.ButtonLabel, St[labelClear], size == \"small\" && St.ButtonLabelSmall, size == \"large\" && St.ButtonLabelLarge);\n\n  if (children.length === 1 || typeof children === \"string\") {\n    labelStyle = S(defaultLabelStyle, labelStyle);\n  }\n\n  return __jsx(TouchableOpacity, _extends({\n    onPress: onPress\n  }, buttonProps, {\n    style: style\n  }), icon && iconMode == \"start\" && __jsx(Text, null, icon), children.map && children.length > 1 ? __jsx(View, {\n    style: S(labelStyle, {\n      paddingVertical: 10\n    })\n  }, children.map((C, i) => {\n    if (typeof C !== \"object\") {\n      if (typeof C === \"string\" && C.trim() === \"\") return null;\n      return __jsx(Text, {\n        key: i,\n        style: S(defaultLabelStyle, {\n          paddingVertical: 1,\n          marginVertical: 1,\n          lineHeight: \"auto\"\n        })\n      }, C);\n    } else {\n      return C;\n    }\n  })) : __jsx(Text, {\n    style: labelStyle\n  }, children), icon && iconMode == \"end\" && __jsx(Text, null, icon));\n});","map":null,"metadata":{},"sourceType":"module"}