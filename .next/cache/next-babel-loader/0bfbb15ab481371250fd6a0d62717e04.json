{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { AsyncStorage } from \"react-native-web\";\nimport config from \"../../config\";\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(query, wsCallback, options) {\n    var opt, headers, sessionRaw, session, ws;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            opt = _objectSpread({}, {\n              useSession: true,\n              debug: false\n            }, options);\n            headers = {\n              \"Content-Type\": \"application/json\"\n            };\n\n            if (!opt.useSession) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 5;\n            return AsyncStorage.getItem(\"SESSION\");\n\n          case 5:\n            sessionRaw = _context2.sent;\n            session = JSON.parse(sessionRaw || \"false\");\n\n            if (session) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 11:\n            headers[\"X-Hasura-Session-Id\"] = session.id;\n\n          case 12:\n            ws = new WebSocket(config.wsurl);\n            ws.onopen =\n            /*#__PURE__*/\n            _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      ws.send(_JSON$stringify({\n                        type: \"connection_init\",\n                        payload: {\n                          headers: headers\n                        }\n                      }));\n                      ws.send(_JSON$stringify({\n                        id: \"1\",\n                        type: \"start\",\n                        payload: {\n                          variables: {},\n                          extensions: {},\n                          operationName: null,\n                          query: query\n                        }\n                      }));\n\n                    case 2:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            ws.onmessage = function (e) {\n              try {\n                var data = JSON.parse(e.data);\n\n                if (data.type === \"data\" || data.type === \"error\") {\n                  wsCallback(data);\n\n                  if (data.type === \"error\") {\n                    console.log(query, data);\n                  }\n                }\n              } catch (err) {}\n            };\n\n            ws.onerror = function (e) {// an error occurred\n            };\n\n            ws.onclose = function (e) {// connection closed\n            };\n\n            return _context2.abrupt(\"return\", ws);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":null,"metadata":{},"sourceType":"module"}