{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport StackNav from \"../../../../../libs/nav/StackNav\";\nimport rawQuery from \"../../../../../libs/queries/crud/rawQuery\";\nimport { getSession } from \"../../../../../libs/queries/user/getsetSession\";\nimport UIBody from \"../../../../../libs/ui/UIBody\";\nimport UIContainer from \"../../../../../libs/ui/UIContainer\";\nimport UIHead from \"../../../../../libs/ui/UIHead\";\nimport UIList from \"../../../../../libs/ui/UIList\";\nimport UIListItem from \"../../../../../libs/ui/UIListItem\";\nimport dayjs from \"dayjs\";\nimport { observer, useObservable } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Text, View } from \"react-native-web\";\nimport KewajibanDetail from \"./KewajibanDetail\";\nconst Kewajiban = observer(({\n  navigation\n}) => {\n  const data = useObservable({\n    list: [],\n    loading: true\n  });\n  return __jsx(UIContainer, null, __jsx(UIHead, {\n    title: \"Kewajiban bulan ini\",\n    navigation: navigation\n  }), __jsx(UIBody, null, __jsx(UIList, {\n    data: data.list,\n    loading: data.loading,\n    render: list => {\n      const item = list.item;\n      return __jsx(UIListItem, {\n        onPress: () => {\n          navigation.navigate(\"KewajibanDetail\", {\n            item: item\n          });\n        }\n      }, __jsx(View, null, __jsx(Text, {\n        style: {\n          fontSize: 15,\n          fontWeight: \"bold\",\n          color: \"#555\"\n        }\n      }, item.nama_kewajiban), __jsx(Text, {\n        style: {\n          fontSize: 14\n        }\n      }, \"Rp \", item.nominal.toLocaleString(), \" (\", item.status, \")\")), __jsx(View, null, __jsx(Text, null, item.tipe_pembayaran)));\n    },\n    reload: async () => {\n      const session = await getSession();\n      const kelasRaw = await rawQuery(`{\n              kelas_murid(where: {murid_id: {_eq: ${session.murid.id}}}) {\n                kelas_id\n              }\n            }`);\n\n      if (kelasRaw && kelasRaw.kelas_murid && kelasRaw.kelas_murid.length > 0) {\n        const kelas = kelasRaw.kelas_murid.map(k => {\n          return k.kelas_id.toString();\n        });\n        const monthStart = dayjs().startOf(\"month\").subtract(1, \"day\").format(\"YYYY-MM-DD\");\n        const monthEnd = dayjs().endOf(\"month\").add(1, \"day\").format(\"YYYY-MM-DD\");\n        const result = await rawQuery(`{\n                kewajiban(order_by: [{tipe_pembayaran: asc}, {id: asc}], \n                  where: {kelas: {_has_keys_any: ${_JSON$stringify(kelas)}}}) {\n                  id\n                  nama_kewajiban\n                  nominal\n                  tipe_pembayaran\n                  kelas\n                  transaksi(\n                    where: {\n                      kewajiban: {\n                        _or:[\n                          {_and:[\n                            {tipe_pembayaran:{_eq:\"Bulanan\"}},\n                            {transaksi: {\n                               _and:[\n                                {tstamp: {_gte: \"${monthStart}\"}},\n                                {tstamp: {_lte: \"${monthEnd}\"}},\n                              ] \n                            }}\n                          ]},\n                          {tipe_pembayaran:{_eq:\"Insidentil\"}}\n                        ]\n                      }\n                    }\n                  ) {\n                    id\n                    status\n                    tstamp\n                    detail\n                  }\n                }  \n              }`);\n        data.list = result.kewajiban.map(item => {\n          _Object$keys(item.kelas).forEach(i => {\n            const k = item.kelas[i];\n\n            if (kelas.indexOf(k.id + \"\") >= 0 && k.nominal !== undefined) {\n              item.nominal = k.nominal * 1;\n            }\n\n            k.murid.forEach(m => {\n              if (m && session.murid && m.id === session.murid.id) {\n                if (m.nominal !== undefined) {\n                  item.nominal = m.nominal * 1;\n                }\n              }\n            });\n          });\n\n          item.status = \"Belum Lunas\";\n          item.transaksi.forEach(t => {\n            if (t.paid === \"success\") {\n              item.status = \"Lunas\";\n            }\n          });\n          return item;\n        });\n      }\n\n      data.loading = false;\n    }\n  })));\n});\nexport default StackNav({\n  Kewajiban: {\n    screen: Kewajiban\n  },\n  KewajibanDetail: {\n    screen: KewajibanDetail\n  }\n});","map":null,"metadata":{},"sourceType":"module"}