{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport config from \"../../config\";\nimport { AsyncStorage } from \"react-native-web\";\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(query, options) {\n    var opt, headers, sessionRaw, session, response, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            opt = _objectSpread({}, {\n              useSession: true,\n              debug: false,\n              where: {},\n              args: \"limit:1\"\n            }, options);\n            headers = {\n              \"Content-Type\": \"application/json\"\n            };\n\n            if (!opt.useSession) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 5;\n            return AsyncStorage.getItem(\"SESSION\");\n\n          case 5:\n            sessionRaw = _context.sent;\n            session = JSON.parse(sessionRaw || \"false\");\n\n            if (session) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 11:\n            headers[\"X-Hasura-Session-Id\"] = session.id;\n\n          case 12:\n            _context.next = 14;\n            return fetch(config.url, {\n              method: \"POST\",\n              body: _JSON$stringify({\n                query: query\n              }),\n              headers: headers\n            });\n\n          case 14:\n            response = _context.sent;\n            _context.next = 17;\n            return response.json();\n\n          case 17:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json.data);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/queries/crud/rawQuery.ts"],"names":["config","AsyncStorage","query","options","opt","useSession","debug","where","args","headers","getItem","sessionRaw","session","JSON","parse","id","fetch","url","method","body","response","json","data"],"mappings":";;;;AAAA,OAAOA,MAAP;AACA,SAASC,YAAT;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBAAOC,KAAP,EAAsBC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,GADO,qBAER;AAAEC,cAAAA,UAAU,EAAE,IAAd;AAAoBC,cAAAA,KAAK,EAAE,KAA3B;AAAkCC,cAAAA,KAAK,EAAE,EAAzC;AAA6CC,cAAAA,IAAI,EAAE;AAAnD,aAFQ,EAGRL,OAHQ;AAMTM,YAAAA,OANS,GAMM;AACjB,8BAAgB;AADC,aANN;;AAAA,iBASTL,GAAG,CAACC,UATK;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAUcJ,YAAY,CAACS,OAAb,CAAqB,SAArB,CAVd;;AAAA;AAULC,YAAAA,UAVK;AAWLC,YAAAA,OAXK,GAWKC,IAAI,CAACC,KAAL,CAAWH,UAAU,IAAI,OAAzB,CAXL;;AAAA,gBAYNC,OAZM;AAAA;AAAA;AAAA;;AAAA,6CAaF,KAbE;;AAAA;AAeTH,YAAAA,OAAO,CAAC,qBAAD,CAAP,GAAiCG,OAAO,CAACG,EAAzC;;AAfS;AAAA;AAAA,mBAmBoBC,KAAK,CAAChB,MAAM,CAACiB,GAAR,EAAa;AACjDC,cAAAA,MAAM,EAAE,MADyC;AAEjDC,cAAAA,IAAI,EAAE,gBAAe;AACnBjB,gBAAAA,KAAK,EAALA;AADmB,eAAf,CAF2C;AAKjDO,cAAAA,OAAO,EAAPA;AALiD,aAAb,CAnBzB;;AAAA;AAmBPW,YAAAA,QAnBO;AAAA;AAAA,mBA0BMA,QAAQ,CAACC,IAAT,EA1BN;;AAAA;AA0BPA,YAAAA,IA1BO;AAAA,6CA2BNA,IAAI,CAACC,IA3BC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import config from \"@app/libs/config\";\nimport { AsyncStorage } from \"react-native\";\n\ninterface opts {\n  useSession?: boolean;\n}\n\nexport default async (query: string, options?: opts) => {\n  const opt = {\n    ...{ useSession: true, debug: false, where: {}, args: \"limit:1\" },\n    ...options\n  };\n\n  let headers: any = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (opt.useSession) {\n    const sessionRaw = await AsyncStorage.getItem(\"SESSION\");\n    const session = JSON.parse(sessionRaw || \"false\");\n    if (!session) {\n      return false;\n    } else {\n      headers[\"X-Hasura-Session-Id\"] = session.id;\n    }\n  }\n\n  const response: Response = await fetch(config.url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      query\n    }),\n    headers\n  });\n  const json = await response.json();\n  return json.data;\n};\n"]},"metadata":{},"sourceType":"module"}