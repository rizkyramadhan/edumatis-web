{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport createRecord from \"../queries/crud/createRecord\";\nimport deleteRecord from \"../queries/crud/deleteRecord\";\nimport query from \"../queries/crud/query\";\nimport updateRecord from \"../queries/crud/updateRecord\";\nimport { flow } from \"mobx-state-tree\";\nimport { isLateType, isUnionType, types } from \"mobx-state-tree\";\nexport default (function (opt) {\n  var primaryKey = !opt.primaryKey ? \"id\" : opt.primaryKey;\n  var columns = {};\n\n  for (var i in opt.columns) {\n    var c = opt.columns[i];\n\n    if (typeof c !== typeof types.maybeNull) {\n      columns[i] = types.maybeNull(c);\n    } else {\n      columns[i] = c;\n    }\n  }\n\n  var recordResult = types.model(_objectSpread({}, columns, {\n    _meta: types.optional(types.string, _JSON$stringify({\n      primaryKey: primaryKey,\n      tableName: opt.tableName\n    })),\n    loading: types.optional(types[\"boolean\"], false),\n    errors: types.optional(types.array(types.string), []),\n    isSaved: types.optional(types[\"boolean\"], false)\n  })).views(function (self) {\n    return {\n      get isNewRecord() {\n        return !self[primaryKey];\n      },\n\n      get rawData() {\n        var col = _Object$keys(opt.columns);\n\n        var result = {};\n        col.forEach(function (key) {\n          if (self[key] !== null) {\n            result[key] = self[key];\n          }\n        });\n        return result;\n      }\n\n    };\n  }).actions(function (self) {\n    var actions = {};\n\n    if (opt.actions) {\n      actions = opt.actions(self);\n    }\n\n    return _objectSpread({}, actions, {\n      set: function set(key, value) {\n        if (typeof key === \"string\") {\n          self[key] = value;\n\n          if (self[key] !== value) {\n            self.isSaved = false;\n          }\n        } else {\n          for (var _i in key) {\n            self[_i] = key[_i];\n          }\n\n          self.isSaved = false;\n        }\n      },\n      save: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var id;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                self.validate();\n\n                if (!(self.errors.length === 0)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                if (!self.isNewRecord) {\n                  _context.next = 11;\n                  break;\n                }\n\n                self.set(\"loading\", true);\n                _context.next = 6;\n                return createRecord(opt.tableName, self.rawData, {\n                  primaryKey: primaryKey\n                });\n\n              case 6:\n                id = _context.sent;\n\n                if (id) {\n                  self.set(primaryKey, id);\n                  self.set(\"isSaved\", true);\n                }\n\n                self.set(\"loading\", false);\n                _context.next = 13;\n                break;\n\n              case 11:\n                _context.next = 13;\n                return updateRecord(opt.tableName, self.rawData, {\n                  primaryKey: primaryKey\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })),\n      validate: function validate() {\n        if (opt.validations) {\n          var validations = opt.validations;\n          var errors = [];\n\n          _Object$keys(validations).forEach(function (key) {\n            if (validations[key] === \"required\") {\n              if (self[key] === undefined || self[key] === null || self[key] === \"\") {\n                errors.push(\"\".concat(key, \" is required.\"));\n              }\n            }\n          });\n\n          self.errors = errors;\n        }\n      },\n      load: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (self.isNewRecord) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                _context2.next = 3;\n                return self.find(_defineProperty({}, primaryKey, self[primaryKey]));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })),\n      find: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(where, findopt) {\n        var _columns, record, _c, _value;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                self.set(\"loading\", true);\n                _context3.prev = 1;\n                _columns = _Object$keys(opt.columns).map(function (c) {\n                  if (isLateType(opt.columns[c]) || isUnionType(opt.columns[c])) {\n                    var _query = \"\";\n                    var col = opt.columns[c];\n                    if (col._subType) _query = col._subType.properties.query._defaultValue;\n\n                    if (_Array$isArray(col._types)) {\n                      col._types.forEach(function (e) {\n                        if (isLateType(e)) {\n                          if (e._subType) {\n                            _query = \"{ \".concat(e._subType.columns.join(\"\\n\"), \" }\");\n                          }\n                        }\n                      });\n                    }\n\n                    if (findopt && findopt.query && findopt.query[c]) {\n                      _query = findopt.query[c];\n                    }\n\n                    if (_query) {\n                      return \"\".concat(c, \" \").concat(_query);\n                    } else {\n                      return \"\";\n                    }\n                  }\n\n                  return c;\n                });\n                _context3.next = 5;\n                return query(opt.tableName, _columns, {\n                  where: where\n                });\n\n              case 5:\n                _context3.t0 = _context3.sent;\n\n                if (_context3.t0) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.t0 = {};\n\n              case 8:\n                record = _context3.t0;\n\n                for (_c in record) {\n                  _value = record[_c];\n\n                  if (_Array$isArray(_value) && isLateType(opt.columns[_c])) {\n                    self.set(_c, {\n                      list: _value,\n                      loading: false\n                    });\n                  } else {\n                    self.set(_c, _value);\n                  }\n                }\n\n                self.set(\"isSaved\", true);\n                self.set(\"loading\", false);\n                _context3.next = 18;\n                break;\n\n              case 14:\n                _context3.prev = 14;\n                _context3.t1 = _context3[\"catch\"](1);\n                self.set(\"loading\", false);\n                console.warn(_context3.t1);\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 14]]);\n      })),\n      \"delete\": flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var row;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return deleteRecord(opt.tableName, self.rawData, {\n                  primaryKey: primaryKey\n                });\n\n              case 3:\n                row = _context4.sent;\n\n                _Object$keys(opt.columns).forEach(function (c) {\n                  if (self[c] !== null) {\n                    self.set(c, null);\n                  }\n                });\n\n                _context4.next = 9;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[0, 7]]);\n      }))\n    });\n  });\n  recordResult.columns = _Object$keys(columns);\n  return recordResult;\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/utils/Record.ts"],"names":["createRecord","deleteRecord","query","updateRecord","flow","isLateType","isUnionType","types","opt","primaryKey","columns","i","c","maybeNull","recordResult","model","_meta","optional","string","tableName","loading","errors","array","isSaved","views","self","isNewRecord","rawData","col","result","forEach","key","actions","set","value","save","validate","length","id","validations","undefined","push","load","find","where","findopt","map","_subType","properties","_defaultValue","_types","e","join","record","list","console","warn","row"],"mappings":";;;;;;AAAA,OAAOA,YAAP;AACA,OAAOC,YAAP;AACA,OAAOC,KAAP;AACA,OAAOC,YAAP;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAAqBC,UAArB,EAAiCC,WAAjC,EAAkHC,KAAlH,QAA+H,iBAA/H;AAEA,gBAAe,UAA4CC,GAA5C,EAsBV;AACH,MAAIC,UAAU,GAAG,CAACD,GAAG,CAACC,UAAL,GAAkB,IAAlB,GAAyBD,GAAG,CAACC,UAA9C;AACA,MAAIC,OAAY,GAAG,EAAnB;;AAEA,OAAK,IAAIC,CAAT,IAAcH,GAAG,CAACE,OAAlB,EAA2B;AACzB,QAAME,CAAC,GAAGJ,GAAG,CAACE,OAAJ,CAAYC,CAAZ,CAAV;;AACA,QAAI,OAAOC,CAAP,KAAa,OAAOL,KAAK,CAACM,SAA9B,EAAyC;AACvCH,MAAAA,OAAO,CAACC,CAAD,CAAP,GAAaJ,KAAK,CAACM,SAAN,CAAgBD,CAAhB,CAAb;AACD,KAFD,MAEO;AACLF,MAAAA,OAAO,CAACC,CAAD,CAAP,GAAaC,CAAb;AACD;AACF;;AAED,MAAME,YAAiB,GAAGP,KAAK,CAC5BQ,KADuB,mBAEnBL,OAFmB;AAGtBM,IAAAA,KAAK,EAAET,KAAK,CAACU,QAAN,CACLV,KAAK,CAACW,MADD,EAEL,gBAAe;AACbT,MAAAA,UAAU,EAAEA,UADC;AAEbU,MAAAA,SAAS,EAAEX,GAAG,CAACW;AAFF,KAAf,CAFK,CAHe;AAUtBC,IAAAA,OAAO,EAAEb,KAAK,CAACU,QAAN,CAAeV,KAAK,WAApB,EAA8B,KAA9B,CAVa;AAWtBc,IAAAA,MAAM,EAAEd,KAAK,CAACU,QAAN,CAAeV,KAAK,CAACe,KAAN,CAAYf,KAAK,CAACW,MAAlB,CAAf,EAA0C,EAA1C,CAXc;AAYtBK,IAAAA,OAAO,EAAEhB,KAAK,CAACU,QAAN,CAAeV,KAAK,WAApB,EAA8B,KAA9B;AAZa,MAcvBiB,KAduB,CAcjB,UAACC,IAAD;AAAA,WAAgB;AACrB,UAAIC,WAAJ,GAAkB;AAChB,eAAO,CAACD,IAAI,CAAChB,UAAD,CAAZ;AACD,OAHoB;;AAIrB,UAAIkB,OAAJ,GAAc;AACZ,YAAMC,GAAG,GAAG,aAAYpB,GAAG,CAACE,OAAhB,CAAZ;;AACA,YAAMmB,MAAW,GAAG,EAApB;AACAD,QAAAA,GAAG,CAACE,OAAJ,CAAY,UAAAC,GAAG,EAAI;AACjB,cAAIN,IAAI,CAACM,GAAD,CAAJ,KAAc,IAAlB,EAAwB;AACtBF,YAAAA,MAAM,CAACE,GAAD,CAAN,GAAcN,IAAI,CAACM,GAAD,CAAlB;AACD;AACF,SAJD;AAKA,eAAOF,MAAP;AACD;;AAboB,KAAhB;AAAA,GAdiB,EA6BvBG,OA7BuB,CA6Bf,UAACP,IAAD,EAAe;AACtB,QAAIO,OAAO,GAAG,EAAd;;AAEA,QAAIxB,GAAG,CAACwB,OAAR,EAAiB;AACfA,MAAAA,OAAO,GAAGxB,GAAG,CAACwB,OAAJ,CAAYP,IAAZ,CAAV;AACD;;AAED,6BACKO,OADL;AAEEC,MAAAA,GAAG,EAAE,aAASF,GAAT,EAA4BG,KAA5B,EAAyC;AAC5C,YAAI,OAAOH,GAAP,KAAe,QAAnB,EAA6B;AAC3BN,UAAAA,IAAI,CAACM,GAAD,CAAJ,GAAYG,KAAZ;;AACA,cAAIT,IAAI,CAACM,GAAD,CAAJ,KAAcG,KAAlB,EAAyB;AACvBT,YAAAA,IAAI,CAACF,OAAL,GAAe,KAAf;AACD;AACF,SALD,MAKO;AACL,eAAK,IAAIZ,EAAT,IAAcoB,GAAd,EAAmB;AACjBN,YAAAA,IAAI,CAACd,EAAD,CAAJ,GAAUoB,GAAG,CAACpB,EAAD,CAAb;AACD;;AACDc,UAAAA,IAAI,CAACF,OAAL,GAAe,KAAf;AACD;AACF,OAdH;AAeEY,MAAAA,IAAI,EAAE/B,IAAI;AAAA;AAAA,+BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACTqB,gBAAAA,IAAI,CAACW,QAAL;;AADS,sBAELX,IAAI,CAACJ,MAAL,CAAYgB,MAAZ,KAAuB,CAFlB;AAAA;AAAA;AAAA;;AAAA,qBAGHZ,IAAI,CAACC,WAHF;AAAA;AAAA;AAAA;;AAILD,gBAAAA,IAAI,CAACQ,GAAL,CAAS,SAAT,EAAoB,IAApB;AAJK;AAKM,uBAAMjC,YAAY,CAACQ,GAAG,CAACW,SAAL,EAAgBM,IAAI,CAACE,OAArB,EAA8B;AACzDlB,kBAAAA,UAAU,EAAVA;AADyD,iBAA9B,CAAlB;;AALN;AAKC6B,gBAAAA,EALD;;AAQL,oBAAIA,EAAJ,EAAQ;AACNb,kBAAAA,IAAI,CAACQ,GAAL,CAASxB,UAAT,EAAqB6B,EAArB;AACAb,kBAAAA,IAAI,CAACQ,GAAL,CAAS,SAAT,EAAoB,IAApB;AACD;;AACDR,gBAAAA,IAAI,CAACQ,GAAL,CAAS,SAAT,EAAoB,KAApB;AAZK;AAAA;;AAAA;AAAA;AAcL,uBAAM9B,YAAY,CAACK,GAAG,CAACW,SAAL,EAAgBM,IAAI,CAACE,OAArB,EAA8B;AAC9ClB,kBAAAA,UAAU,EAAVA;AAD8C,iBAA9B,CAAlB;;AAdK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD,EAfZ;AAmCE2B,MAAAA,QAAQ,EAAE,oBAAW;AACnB,YAAI5B,GAAG,CAAC+B,WAAR,EAAqB;AACnB,cAAMA,WAAW,GAAG/B,GAAG,CAAC+B,WAAxB;AACA,cAAMlB,MAAgB,GAAG,EAAzB;;AACA,uBAAYkB,WAAZ,EAAyBT,OAAzB,CAAiC,UAAAC,GAAG,EAAI;AACtC,gBAAIQ,WAAW,CAACR,GAAD,CAAX,KAAqB,UAAzB,EAAqC;AACnC,kBACEN,IAAI,CAACM,GAAD,CAAJ,KAAcS,SAAd,IACAf,IAAI,CAACM,GAAD,CAAJ,KAAc,IADd,IAEAN,IAAI,CAACM,GAAD,CAAJ,KAAc,EAHhB,EAIE;AACAV,gBAAAA,MAAM,CAACoB,IAAP,WAAeV,GAAf;AACD;AACF;AACF,WAVD;;AAYAN,UAAAA,IAAI,CAACJ,MAAL,GAAcA,MAAd;AACD;AACF,OArDH;AAsDEqB,MAAAA,IAAI,EAAEtC,IAAI;AAAA;AAAA,+BAAC;AAAA;AAAA;AAAA;AAAA;AAAA,oBACJqB,IAAI,CAACC,WADD;AAAA;AAAA;AAAA;;AAAA;AAEP,uBAAMD,IAAI,CAACkB,IAAL,qBAAalC,UAAb,EAA0BgB,IAAI,CAAChB,UAAD,CAA9B,EAAN;;AAFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD,EAtDZ;AA2DEkC,MAAAA,IAAI,EAAEvC,IAAI;AAAA;AAAA,+BAAC,kBACTwC,KADS,EAETC,OAFS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAITpB,gBAAAA,IAAI,CAACQ,GAAL,CAAS,SAAT,EAAoB,IAApB;AAJS;AAMDvB,gBAAAA,QANC,GAMS,aAAYF,GAAG,CAACE,OAAhB,EAAyBoC,GAAzB,CAA6B,UAAAlC,CAAC,EAAI;AAChD,sBACEP,UAAU,CAACG,GAAG,CAACE,OAAJ,CAAYE,CAAZ,CAAD,CAAV,IACAN,WAAW,CAACE,GAAG,CAACE,OAAJ,CAAYE,CAAZ,CAAD,CAFb,EAGE;AACA,wBAAIV,MAAK,KAAT;AACA,wBAAM0B,GAAQ,GAAGpB,GAAG,CAACE,OAAJ,CAAYE,CAAZ,CAAjB;AACA,wBAAIgB,GAAG,CAACmB,QAAR,EACE7C,MAAK,GAAG0B,GAAG,CAACmB,QAAJ,CAAaC,UAAb,CAAwB9C,KAAxB,CAA8B+C,aAAtC;;AAEF,wBAAI,eAAcrB,GAAG,CAACsB,MAAlB,CAAJ,EAA+B;AAC7BtB,sBAAAA,GAAG,CAACsB,MAAJ,CAAWpB,OAAX,CAAmB,UAACqB,CAAD,EAAY;AAC7B,4BAAI9C,UAAU,CAAC8C,CAAD,CAAd,EAAmB;AACjB,8BAAIA,CAAC,CAACJ,QAAN,EAAgB;AACd7C,4BAAAA,MAAK,eAAQiD,CAAC,CAACJ,QAAF,CAAWrC,OAAX,CAAmB0C,IAAnB,CAAwB,IAAxB,CAAR,OAAL;AACD;AACF;AACF,uBAND;AAOD;;AAED,wBAAIP,OAAO,IAAIA,OAAO,CAAC3C,KAAnB,IAA4B2C,OAAO,CAAC3C,KAAR,CAAcU,CAAd,CAAhC,EAAkD;AAChDV,sBAAAA,MAAK,GAAG2C,OAAO,CAAC3C,KAAR,CAAcU,CAAd,CAAR;AACD;;AAED,wBAAIV,MAAJ,EAAW;AACT,uCAAUU,CAAV,cAAeV,MAAf;AACD,qBAFD,MAEO;AACL;AACD;AACF;;AACD,yBAAOU,CAAP;AACD,iBA/Be,CANT;AAAA;AAuCO,uBAAMV,KAAK,CAACM,GAAG,CAACW,SAAL,EAAgBT,QAAhB,EAAyB;AAChDkC,kBAAAA,KAAK,EAALA;AADgD,iBAAzB,CAAX;;AAvCP;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,+BAyCA,EAzCA;;AAAA;AAuCHS,gBAAAA,MAvCG;;AA2CP,qBAASzC,EAAT,IAAcyC,MAAd,EAAsB;AACdnB,kBAAAA,MADc,GACNmB,MAAM,CAACzC,EAAD,CADA;;AAEpB,sBAAI,eAAcsB,MAAd,KAAwB7B,UAAU,CAACG,GAAG,CAACE,OAAJ,CAAYE,EAAZ,CAAD,CAAtC,EAA+D;AAC7Da,oBAAAA,IAAI,CAACQ,GAAL,CAASrB,EAAT,EAAY;AACV0C,sBAAAA,IAAI,EAAEpB,MADI;AAEVd,sBAAAA,OAAO,EAAE;AAFC,qBAAZ;AAID,mBALD,MAKO;AACLK,oBAAAA,IAAI,CAACQ,GAAL,CAASrB,EAAT,EAAYsB,MAAZ;AACD;AACF;;AACDT,gBAAAA,IAAI,CAACQ,GAAL,CAAS,SAAT,EAAoB,IAApB;AACAR,gBAAAA,IAAI,CAACQ,GAAL,CAAS,SAAT,EAAoB,KAApB;AAvDO;AAAA;;AAAA;AAAA;AAAA;AAyDPR,gBAAAA,IAAI,CAACQ,GAAL,CAAS,SAAT,EAAoB,KAApB;AACAsB,gBAAAA,OAAO,CAACC,IAAR;;AA1DO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD,EA3DZ;AAwHE,gBAAQpD,IAAI;AAAA;AAAA,+BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEG,uBAAMH,YAAY,CAACO,GAAG,CAACW,SAAL,EAAgBM,IAAI,CAACE,OAArB,EAA8B;AAC1DlB,kBAAAA,UAAU,EAAVA;AAD0D,iBAA9B,CAAlB;;AAFH;AAEHgD,gBAAAA,GAFG;;AAMT,6BAAYjD,GAAG,CAACE,OAAhB,EAAyBoB,OAAzB,CAAiC,UAAAlB,CAAC,EAAI;AACpC,sBAAIa,IAAI,CAACb,CAAD,CAAJ,KAAY,IAAhB,EAAsB;AACpBa,oBAAAA,IAAI,CAACQ,GAAL,CAASrB,CAAT,EAAY,IAAZ;AACD;AACF,iBAJD;;AANS;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;AAxHd;AAsID,GA1KuB,CAA1B;AA4KAE,EAAAA,YAAY,CAACJ,OAAb,GAAuB,aAAYA,OAAZ,CAAvB;AACA,SAAOI,YAAP;AACD,CAjND","sourcesContent":["import createRecord from \"@app/libs/queries/crud/createRecord\";\nimport deleteRecord from \"@app/libs/queries/crud/deleteRecord\";\nimport query from \"@app/libs/queries/crud/query\";\nimport updateRecord from \"@app/libs/queries/crud/updateRecord\";\nimport { flow } from \"mobx-state-tree\";\nimport { IModelType, isLateType, isUnionType, ModelPropertiesDeclaration, ModelPropertiesDeclarationToProperties, types } from \"mobx-state-tree\";\n\nexport default <P extends ModelPropertiesDeclaration = {}>(opt: {\n  tableName: string;\n  primaryKey?: string;\n  validations?: {\n    [key: string]: \"required\";\n  };\n  columns: P;\n  actions?: (\n    self: any\n  ) => {\n    [key: string]: any;\n  };\n}): IModelType<\n  ModelPropertiesDeclarationToProperties<P>,\n  {\n    set: (key: string | any, value?: any) => void;\n    save: () => void;\n    load: () => void;\n    validate: () => void;\n    delete: () => void;\n    find: (where: { [key: string]: any }, findopt?: { query?: any }) => void;\n  }\n> => {\n  let primaryKey = !opt.primaryKey ? \"id\" : opt.primaryKey;\n  let columns: any = {};\n\n  for (let i in opt.columns) {\n    const c = opt.columns[i];\n    if (typeof c !== typeof types.maybeNull) {\n      columns[i] = types.maybeNull(c as any);\n    } else {\n      columns[i] = c;\n    }\n  }\n\n  const recordResult: any = types\n    .model({\n      ...columns,\n      _meta: types.optional(\n        types.string,\n        JSON.stringify({\n          primaryKey: primaryKey,\n          tableName: opt.tableName\n        })\n      ),\n      loading: types.optional(types.boolean, false),\n      errors: types.optional(types.array(types.string), []),\n      isSaved: types.optional(types.boolean, false)\n    })\n    .views((self: any) => ({\n      get isNewRecord() {\n        return !self[primaryKey];\n      },\n      get rawData() {\n        const col = Object.keys(opt.columns);\n        const result: any = {};\n        col.forEach(key => {\n          if (self[key] !== null) {\n            result[key] = self[key];\n          }\n        });\n        return result;\n      }\n    }))\n    .actions((self: any) => {\n      let actions = {};\n\n      if (opt.actions) {\n        actions = opt.actions(self);\n      }\n\n      return {\n        ...actions,\n        set: function(key: string | any, value?: any) {\n          if (typeof key === \"string\") {\n            self[key] = value;\n            if (self[key] !== value) {\n              self.isSaved = false;\n            }\n          } else {\n            for (let i in key) {\n              self[i] = key[i];\n            }\n            self.isSaved = false;\n          }\n        },\n        save: flow(function*() {\n          self.validate();\n          if (self.errors.length === 0) {\n            if (self.isNewRecord) {\n              self.set(\"loading\", true);\n              const id = yield createRecord(opt.tableName, self.rawData, {\n                primaryKey\n              });\n              if (id) {\n                self.set(primaryKey, id);\n                self.set(\"isSaved\", true);\n              }\n              self.set(\"loading\", false);\n            } else {\n              yield updateRecord(opt.tableName, self.rawData, {\n                primaryKey\n              });\n            }\n          }\n        }),\n        validate: function() {\n          if (opt.validations) {\n            const validations = opt.validations;\n            const errors: string[] = [];\n            Object.keys(validations).forEach(key => {\n              if (validations[key] === \"required\") {\n                if (\n                  self[key] === undefined ||\n                  self[key] === null ||\n                  self[key] === \"\"\n                ) {\n                  errors.push(`${key} is required.`);\n                }\n              }\n            });\n\n            self.errors = errors;\n          }\n        },\n        load: flow(function*() {\n          if (!self.isNewRecord) {\n            yield self.find({ [primaryKey]: self[primaryKey] });\n          }\n        }),\n        find: flow(function*(\n          where: { [key: string]: any },\n          findopt?: { query?: any }\n        ) {\n          self.set(\"loading\", true);\n          try {\n            const columns = Object.keys(opt.columns).map(c => {\n              if (\n                isLateType(opt.columns[c] as any) ||\n                isUnionType(opt.columns[c] as any)\n              ) {\n                let query = ``;\n                const col: any = opt.columns[c];\n                if (col._subType)\n                  query = col._subType.properties.query._defaultValue;\n\n                if (Array.isArray(col._types)) {\n                  col._types.forEach((e: any) => {\n                    if (isLateType(e)) {\n                      if (e._subType) {\n                        query = `{ ${e._subType.columns.join(\"\\n\")} }`;\n                      }\n                    }\n                  });\n                }\n\n                if (findopt && findopt.query && findopt.query[c]) {\n                  query = findopt.query[c];\n                }\n\n                if (query) {\n                  return `${c} ${query}`;\n                } else {\n                  return ``;\n                }\n              }\n              return c;\n            });\n\n            let record = (yield query(opt.tableName, columns, {\n              where\n            })) || {};\n\n            for (let c in record) {\n              const value = record[c];\n              if (Array.isArray(value) && isLateType(opt.columns[c] as any)) {\n                self.set(c, {\n                  list: value,\n                  loading: false\n                });\n              } else {\n                self.set(c, value);\n              }\n            }\n            self.set(\"isSaved\", true);\n            self.set(\"loading\", false);\n          } catch (e) {\n            self.set(\"loading\", false);\n            console.warn(e);\n          }\n        }),\n        delete: flow(function*() {\n          try {\n            const row = yield deleteRecord(opt.tableName, self.rawData, {\n              primaryKey\n            });\n\n            Object.keys(opt.columns).forEach(c => {\n              if (self[c] !== null) {\n                self.set(c, null);\n              }\n            });\n          } catch (e) {}\n        })\n      };\n    });\n\n  recordResult.columns = Object.keys(columns);\n  return recordResult;\n};\n"]},"metadata":{},"sourceType":"module"}