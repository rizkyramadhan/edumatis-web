{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/Users/riz/Documents/edumatis-web/libs/nav/NavContainer.tsx\";\nvar __jsx = React.createElement;\nimport { observer, useObservable } from \"mobx-react-lite\";\nimport React, { useRef } from \"react\";\nimport { toJS } from \"mobx\";\n\nconst container = routes => {\n  const routeStack = [];\n  let navParam = {};\n  return observer((props, ref) => {\n    let screenRef = useRef(null);\n    let current = useObservable({\n      name: \"\"\n    });\n\n    if (current.name === \"\") {\n      _Object$keys(routes).map((r, index) => {\n        if (index === 0) {\n          current.name = r;\n          screenRef.current = routes[r].screen;\n        }\n      });\n    }\n\n    const navigation = {\n      _routes: routes,\n      getParam: function (key) {\n        return navParam[key];\n      },\n      dangerouslyGetParent: function () {\n        return props.parentNavigation;\n      },\n      goBack: function () {\n        if (routeStack.length > 0) {\n          const screen = routeStack.pop();\n\n          if (routes[screen.name]) {\n            navParam = screen.data;\n            screenRef.current = routes[screen.name].screen;\n            current.name = screen.name;\n          }\n        }\n      },\n      navigate: function (screen, data) {\n        routeStack.push({\n          name: current.name,\n          data: toJS(navParam)\n        });\n\n        if (routes[screen]) {\n          navParam = data;\n          screenRef.current = routes[screen].screen;\n          current.name = screen;\n        }\n      },\n      replace: function (screen) {\n        if (routes[screen]) {\n          screenRef.current = routes[screen].screen;\n          current.name = screen;\n        }\n      },\n      popToTop: function () {\n        if (props.parentNavigation) {\n          props.parentNavigation.popToTop();\n        } else {\n          let first = _Object$keys(routes)[0];\n\n          current.name = first;\n          screenRef.current = routes[first].screen;\n        }\n      }\n    };\n    const Component = screenRef.current;\n\n    if (ref && ref.current) {\n      ref.current = navigation;\n    }\n\n    return __jsx(Component, _extends({}, props, {\n      navigation: navigation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }));\n  }, {\n    forwardRef: true\n  });\n};\n\nexport default (data => {\n  return container(data);\n});\nexport const createNavigateTo = function (navigation) {\n  return function (screen) {\n    navigation.replace(screen);\n    if (navigation.closeDrawer) navigation.closeDrawer();\n  };\n};","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/nav/NavContainer.tsx"],"names":["observer","useObservable","React","useRef","toJS","container","routes","routeStack","navParam","props","ref","screenRef","current","name","map","r","index","screen","navigation","_routes","getParam","key","dangerouslyGetParent","parentNavigation","goBack","length","pop","data","navigate","push","replace","popToTop","first","Component","forwardRef","createNavigateTo","closeDrawer"],"mappings":"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","sourcesContent":["import { observer, useObservable } from \"mobx-react-lite\";\nimport React, { useRef } from \"react\";\nimport { toJS } from \"mobx\";\nconst container = (routes: any) => {\n  const routeStack: any[] = [];\n  let navParam: any = {};\n  return observer(\n    (props: any, ref: any) => {\n      let screenRef = useRef(null);\n      let current = useObservable({\n        name: \"\"\n      });\n      if (current.name === \"\") {\n        Object.keys(routes).map((r: any, index: number) => {\n          if (index === 0) {\n            current.name = r;\n            screenRef.current = routes[r].screen;\n          }\n        });\n      }\n      const navigation = {\n        _routes: routes,\n        getParam: function(key: string) {\n          return navParam[key];\n        },\n        dangerouslyGetParent: function() {\n          return props.parentNavigation;\n        },\n        goBack: function() {\n          if (routeStack.length > 0) {\n            const screen = routeStack.pop();\n            if (routes[screen.name]) {\n              navParam = screen.data;\n              screenRef.current = routes[screen.name].screen;\n              current.name = screen.name;\n            }\n          }\n        },\n        navigate: function(screen: string, data: any) {\n          routeStack.push({ name: current.name, data: toJS(navParam) });\n          if (routes[screen]) {\n            navParam = data;\n            screenRef.current = routes[screen].screen;\n            current.name = screen;\n          }\n        },\n        replace: function(screen: string) {\n          if (routes[screen]) {\n            screenRef.current = routes[screen].screen;\n            current.name = screen;\n          }\n        },\n        popToTop: function() {\n          if (props.parentNavigation) {\n            props.parentNavigation.popToTop();\n          } else {\n            let first = Object.keys(routes)[0];\n            current.name = first;\n            screenRef.current = routes[first].screen;\n          }\n        }\n      };\n      const Component: any = screenRef.current;\n      if (ref && ref.current) {\n        ref.current = navigation;\n      }\n\n      return <Component {...props} navigation={navigation} />;\n    },\n    { forwardRef: true }\n  );\n};\n\nexport default (data: any) => {\n  return container(data);\n};\n\nexport const createNavigateTo = function(navigation: any) {\n  return function(screen: string) {\n    navigation.replace(screen);\n    if (navigation.closeDrawer) navigation.closeDrawer();\n  };\n};\n"]},"metadata":{},"sourceType":"module"}