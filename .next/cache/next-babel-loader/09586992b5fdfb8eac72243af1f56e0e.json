{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport config from \"../../config\";\n\nvar get = require(\"lodash.get\");\n\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(client_id) {\n    var username,\n        password,\n        query,\n        response,\n        res,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            username = _args.length > 1 && _args[1] !== undefined ? _args[1] : \"\";\n            password = _args.length > 2 && _args[2] !== undefined ? _args[2] : \"\";\n            query = \"query ($u: String!, $c: Int!) {\\n    \".concat(config.table, \"(where: {_and: {\").concat(config.identifier.client_id, \": {_eq: $c}, \").concat(config.identifier.username, \": {_eq: $u}}}) {\\n      sessions(limit: 1, order_by: {tstamp: desc}) {\\n        id\\n        \").concat(config.table, \" {\\n          \").concat(config.user.columns.join(\"\\n\"), \"\\n        }\\n      }\\n    }\\n  }\");\n            _context.next = 5;\n            return fetch(config.url, {\n              method: \"POST\",\n              body: _JSON$stringify({\n                query: query,\n                variables: {\n                  u: username,\n                  c: client_id\n                }\n              }),\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-Hasura-Username\": username,\n                \"X-Hasura-Password\": password,\n                \"X-Hasura-Cid\": client_id\n              }\n            });\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            res = _context.sent;\n            return _context.abrupt(\"return\", get(res, \"data.\".concat(config.table, \"[0].sessions[0]\")));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":null,"metadata":{},"sourceType":"module"}