{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/riz/Documents/edumatis-web/pages/app/screens/admin/Kelas/KelasPicker.tsx\";\nvar __jsx = React.createElement;\nimport rawQuery from \"../../../../../libs/queries/crud/rawQuery\";\nimport UICol from \"../../../../../libs/ui/UICol\";\nimport UIField from \"../../../../../libs/ui/UIField\";\nimport UIFieldSelectNative from \"../../../../../libs/ui/UIFieldSelectNative\";\nimport UIRow from \"../../../../../libs/ui/UIRow\";\nimport { getUnique } from \"../../../../../libs/utils/GraphQL\";\nimport { observer, useObservable } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native-web\";\nexport default observer(function (_ref) {\n  var form = _ref.form,\n      renderMurid = _ref.renderMurid,\n      renderKelas = _ref.renderKelas,\n      renderKelasTitle = _ref.renderKelasTitle;\n  var data = useObservable({\n    expandKelas: [],\n    kelas: [],\n    kelasMurid: {}\n  });\n  useEffect(function () {\n    data.kelas = [];\n    rawQuery(\"{\\n        kelas {\\n          id \\n          nama_kelas\\n        }\\n      }\").then(function (res) {\n      data.kelas = res.kelas;\n    });\n  }, []);\n  return __jsx(UIRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, __jsx(UICol, {\n    size: 6,\n    sizexs: 12,\n    sizesm: 12,\n    sizemd: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(UIField, {\n    label: \"Berlaku untuk kelas:\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, data.kelas && data.kelas.map(function (k, index) {\n    var allkelas = form.kelas || {};\n    var kelas = allkelas[k.id];\n    return __jsx(View, {\n      key: k.id,\n      style: {\n        borderBottomWidth: index + 1 === data.kelas.length ? 0 : 1,\n        marginHorizontal: -12,\n        padding: 5,\n        paddingHorizontal: 12,\n        borderBottomColor: \"#ddd\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, __jsx(TouchableOpacity, {\n      onPress:\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var res, kelasMurid;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (data.kelasMurid[k.id]) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return rawQuery(\"{\\n                                murid(where: {kelas_murids: {kelas_id: {_eq: \".concat(k.id, \"}}}) {\\n                                  id\\n                                  nama_murid\\n                                }\\n                              }\\n                              \"));\n\n              case 3:\n                res = _context.sent;\n\n                if (res && res.murid) {\n                  kelasMurid = res.murid.map(function (m) {\n                    return {\n                      value: m.id,\n                      label: m.nama_murid\n                    };\n                  });\n                  data.kelasMurid[k.id] = [{\n                    value: 0,\n                    label: \"\"\n                  }].concat(_toConsumableArray(kelasMurid));\n                }\n\n              case 5:\n                if (kelas) {\n                  data.expandKelas = [k.id];\n                } else {\n                  allkelas[k.id] = {\n                    nominal: form.nominal,\n                    murid: [{}]\n                  };\n                  data.expandKelas = [k.id];\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, __jsx(Text, {\n      style: {\n        fontSize: 17,\n        height: 25\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, kelas ? \"☑\" : \"☐\", \"\\xA0\", k.nama_kelas)), kelas && __jsx(View, {\n      style: {\n        flexDirection: \"row\",\n        marginLeft: 30,\n        alignItems: \"center\",\n        position: \"absolute\",\n        right: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, renderKelasTitle && renderKelasTitle(kelas, k), __jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        allkelas[k.id] = undefined;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, __jsx(Text, {\n      style: {\n        color: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \" Hapus\"))), kelas && data.expandKelas.indexOf(k.id) >= 0 && __jsx(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, renderKelas && renderKelas(kelas, k), kelas.murid.map(function (murid, midx) {\n      return __jsx(UIRow, {\n        key: midx,\n        style: {\n          flexDirection: \"row\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, __jsx(UICol, {\n        size: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, __jsx(UIFieldSelectNative, {\n        label: \"Murid\",\n        items: data.kelasMurid[k.id] || [],\n        value: murid.id || 0,\n        setValue: function setValue(value) {\n          value = _parseInt(value);\n          murid.id = value;\n          var unique = getUnique(kelas.murid, \"id\").filter(function (m) {\n            return m.id !== 0;\n          });\n          kelas.murid.splice(0, kelas.murid.length);\n          unique.forEach(function (m) {\n            kelas.murid.push(m);\n          });\n          kelas.murid.push({\n            id: 0\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })), renderMurid && renderMurid(murid, kelas, k));\n    })));\n  }))));\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/pages/app/screens/admin/Kelas/KelasPicker.tsx"],"names":["rawQuery","UICol","UIField","UIFieldSelectNative","UIRow","getUnique","observer","useObservable","React","useEffect","Text","TouchableOpacity","View","form","renderMurid","renderKelas","renderKelasTitle","data","expandKelas","kelas","kelasMurid","then","res","map","k","index","allkelas","id","borderBottomWidth","length","marginHorizontal","padding","paddingHorizontal","borderBottomColor","murid","m","value","label","nama_murid","nominal","fontSize","height","nama_kelas","flexDirection","marginLeft","alignItems","position","right","undefined","color","indexOf","midx","unique","filter","splice","forEach","push"],"mappings":"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","sourcesContent":["import rawQuery from \"@app/libs/queries/crud/rawQuery\";\nimport UICol from \"@app/libs/ui/UICol\";\nimport UIField from \"@app/libs/ui/UIField\";\nimport UIFieldSelectNative from \"@app/libs/ui/UIFieldSelectNative\";\nimport UIRow from \"@app/libs/ui/UIRow\";\nimport { getUnique } from \"@app/libs/utils/GraphQL\";\nimport { observer, useObservable } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\n\nexport default observer(\n  ({ form, renderMurid, renderKelas, renderKelasTitle }: any) => {\n    const data = useObservable({\n      expandKelas: [] as any,\n      kelas: [] as any,\n      kelasMurid: {} as any\n    });\n    useEffect(() => {\n      data.kelas = [];\n      rawQuery(`{\n        kelas {\n          id \n          nama_kelas\n        }\n      }`).then((res: any) => {\n        data.kelas = res.kelas;\n      });\n    }, []);\n\n    return (\n      <UIRow>\n        <UICol size={6} sizexs={12} sizesm={12} sizemd={12}>\n          <UIField label=\"Berlaku untuk kelas:\">\n            {data.kelas &&\n              data.kelas.map((k: any, index: number) => {\n                const allkelas = form.kelas || {};\n                const kelas = allkelas[k.id];\n                return (\n                  <View\n                    key={k.id}\n                    style={{\n                      borderBottomWidth:\n                        index + 1 === data.kelas.length ? 0 : 1,\n                      marginHorizontal: -12,\n                      padding: 5,\n                      paddingHorizontal: 12,\n                      borderBottomColor: \"#ddd\"\n                    }}\n                  >\n                    <TouchableOpacity\n                      onPress={async () => {\n                        if (!data.kelasMurid[k.id]) {\n                          let res: any = await rawQuery(`{\n                                murid(where: {kelas_murids: {kelas_id: {_eq: ${\n                                  k.id\n                                }}}}) {\n                                  id\n                                  nama_murid\n                                }\n                              }\n                              `);\n                          if (res && res.murid) {\n                            const kelasMurid = res.murid.map((m: any) => {\n                              return {\n                                value: m.id,\n                                label: m.nama_murid\n                              };\n                            });\n                            data.kelasMurid[k.id] = [\n                              { value: 0, label: \"\" },\n                              ...kelasMurid\n                            ];\n                          }\n                        }\n                        if (kelas) {\n                          data.expandKelas = [k.id];\n                        } else {\n                          allkelas[k.id] = {\n                            nominal: form.nominal,\n                            murid: [{}]\n                          };\n                          data.expandKelas = [k.id];\n                        }\n                      }}\n                    >\n                      <Text style={{ fontSize: 17, height: 25 }}>\n                        {kelas ? \"☑\" : \"☐\"}\n                        &nbsp;\n                        {k.nama_kelas}\n                      </Text>\n                    </TouchableOpacity>\n\n                    {kelas && (\n                      <View\n                        style={{\n                          flexDirection: \"row\",\n                          marginLeft: 30,\n                          alignItems: \"center\",\n                          position: \"absolute\",\n                          right: 10\n                        }}\n                      >\n                        {renderKelasTitle && renderKelasTitle(kelas, k)}\n                        <TouchableOpacity\n                          onPress={() => {\n                            allkelas[k.id] = undefined;\n                          }}\n                        >\n                          <Text style={{ color: \"red\" }}> Hapus</Text>\n                        </TouchableOpacity>\n                      </View>\n                    )}\n\n                    {kelas &&\n                      (data.expandKelas.indexOf(k.id) >= 0 && (\n                        <View>\n                          {renderKelas && renderKelas(kelas, k)}\n                          {kelas.murid.map((murid: any, midx: number) => {\n                            return (\n                              <UIRow\n                                key={midx}\n                                style={{ flexDirection: \"row\" }}\n                              >\n                                <UICol size={6}>\n                                  <UIFieldSelectNative\n                                    label=\"Murid\"\n                                    items={data.kelasMurid[k.id] || []}\n                                    value={murid.id || 0}\n                                    setValue={(value: any) => {\n                                      value = parseInt(value);\n                                      murid.id = value;\n\n                                      const unique = getUnique(\n                                        kelas.murid,\n                                        \"id\"\n                                      ).filter(m => {\n                                        return m.id !== 0;\n                                      });\n                                      kelas.murid.splice(0, kelas.murid.length);\n\n                                      unique.forEach(m => {\n                                        kelas.murid.push(m);\n                                      });\n                                      kelas.murid.push({ id: 0 });\n                                    }}\n                                  />\n                                </UICol>\n\n                                {renderMurid && renderMurid(murid, kelas, k)}\n                              </UIRow>\n                            );\n                          })}\n                        </View>\n                      ))}\n                  </View>\n                );\n              })}\n          </UIField>\n        </UICol>\n      </UIRow>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}