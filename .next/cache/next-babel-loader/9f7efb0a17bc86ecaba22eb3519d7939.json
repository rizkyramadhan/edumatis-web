{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/riz/Documents/edumatis-web/libs/ui/UIButton.tsx\";\nvar __jsx = React.createElement;\nimport { S, St } from \"./Style\";\nimport React from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native-web\";\nexport default (function (_ref) {\n  var children = _ref.children,\n      icon = _ref.icon,\n      _ref$iconMode = _ref.iconMode,\n      iconMode = _ref$iconMode === void 0 ? \"start\" : _ref$iconMode,\n      _ref$expand = _ref.expand,\n      expand = _ref$expand === void 0 ? \"block\" : _ref$expand,\n      _ref$fill = _ref.fill,\n      fill = _ref$fill === void 0 ? \"solid\" : _ref$fill,\n      size = _ref.size,\n      style = _ref.style,\n      labelStyle = _ref.labelStyle,\n      _ref$buttonProps = _ref.buttonProps,\n      buttonProps = _ref$buttonProps === void 0 ? {} : _ref$buttonProps,\n      onPress = _ref.onPress;\n  var btnExpand = \"Button\" + expand.charAt(0).toUpperCase() + expand.slice(1).toLowerCase();\n  var btnFIll = \"Button\" + fill.charAt(0).toUpperCase() + fill.slice(1).toLowerCase();\n  var labelClear = fill == \"outline\" || fill == \"clear\" ? \"ButtonLabelClear\" : \"ButtonLabelSolid\";\n  style = S(St.Button, St[btnExpand], St[btnFIll], style);\n  var defaultLabelStyle = S(St.ButtonLabel, St[labelClear], size == \"small\" && St.ButtonLabelSmall, size == \"large\" && St.ButtonLabelLarge);\n\n  if (children.length === 1 || typeof children === \"string\") {\n    labelStyle = S(defaultLabelStyle, labelStyle);\n  }\n\n  return __jsx(TouchableOpacity, _extends({\n    onPress: onPress\n  }, buttonProps, {\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), icon && iconMode == \"start\" && __jsx(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, icon), children.map && children.length > 1 ? __jsx(View, {\n    style: S(labelStyle, {\n      paddingVertical: 10\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, children.map(function (C, i) {\n    if (typeof C !== \"object\") {\n      if (typeof C === \"string\" && C.trim() === \"\") return null;\n      return __jsx(Text, {\n        key: i,\n        style: S(defaultLabelStyle, {\n          paddingVertical: 1,\n          marginVertical: 1,\n          lineHeight: \"auto\"\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, C);\n    } else {\n      return C;\n    }\n  })) : __jsx(Text, {\n    style: labelStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, children), icon && iconMode == \"end\" && __jsx(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, icon));\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/ui/UIButton.tsx"],"names":["S","St","React","Text","TouchableOpacity","View","children","icon","iconMode","expand","fill","size","style","labelStyle","buttonProps","onPress","btnExpand","charAt","toUpperCase","slice","toLowerCase","btnFIll","labelClear","Button","defaultLabelStyle","ButtonLabel","ButtonLabelSmall","ButtonLabelLarge","length","map","paddingVertical","C","i","trim","marginVertical","lineHeight"],"mappings":"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","sourcesContent":["import { S, St } from \"@app/libs/ui/Style\";\nimport React from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\n\nexport default ({\n  children,\n  icon,\n  iconMode = \"start\",\n  expand = \"block\",\n  fill = \"solid\",\n  size,\n  style,\n  labelStyle,\n  buttonProps = {},\n  onPress\n}: any) => {\n  const btnExpand: string =\n    \"Button\" + expand.charAt(0).toUpperCase() + expand.slice(1).toLowerCase();\n  const btnFIll: any =\n    \"Button\" + fill.charAt(0).toUpperCase() + fill.slice(1).toLowerCase();\n  const labelClear: any =\n    fill == \"outline\" || fill == \"clear\"\n      ? \"ButtonLabelClear\"\n      : \"ButtonLabelSolid\";\n  style = S(St.Button, (St as any)[btnExpand], (St as any)[btnFIll], style);\n\n  const defaultLabelStyle = S(\n    St.ButtonLabel,\n    (St as any)[labelClear],\n    size == \"small\" && St.ButtonLabelSmall,\n    size == \"large\" && St.ButtonLabelLarge\n  );\n  if (children.length === 1 || typeof children === \"string\") {\n    labelStyle = S(defaultLabelStyle, labelStyle);\n  }\n\n  return (\n    <TouchableOpacity onPress={onPress} {...buttonProps} style={style}>\n      {icon && iconMode == \"start\" && <Text>{icon}</Text>}\n      {children.map && children.length > 1 ? (\n        <View style={S(labelStyle, { paddingVertical: 10 })}>\n          {children.map((C: any, i: number) => {\n            if (typeof C !== \"object\") {\n              if (typeof C === \"string\" && C.trim() === \"\") return null;\n              return (\n                <Text\n                  key={i}\n                  style={S(defaultLabelStyle, {\n                    paddingVertical: 1,\n                    marginVertical: 1,\n                    lineHeight: \"auto\"\n                  })}\n                >\n                  {C}\n                </Text>\n              );\n            } else {\n              return C;\n            }\n          })}\n        </View>\n      ) : (\n        <Text style={labelStyle}>{children}</Text>\n      )}\n      {icon && iconMode == \"end\" && <Text>{icon}</Text>}\n    </TouchableOpacity>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}