{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/riz/Documents/edumatis-web/libs/ui/UIList.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { FlatList, Text, View, ScrollView } from \"react-native-web\";\nimport UIButton from \"./UIButton\";\n\nconst UIList = props => {\n  useEffect(() => {\n    if (props.reload) props.reload();\n  }, []);\n  return __jsx(ScrollView, _extends({}, props.style, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), props.loading && __jsx(Text, {\n    style: {\n      margin: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"Loading...\"), props.data.length === 0 ? !props.loading && __jsx(View, {\n    style: {\n      alignItems: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, __jsx(Text, {\n    style: {\n      textAlign: \"center\",\n      margin: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"\\u2014 Empty \\u2014\"), __jsx(UIButton, {\n    onPress: props.reload,\n    size: \"small\",\n    style: {\n      width: 100\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Refresh\")) : __jsx(FlatList, {\n    extraData: props.extraData,\n    data: props.data,\n    keyExtractor: (item, index) => {\n      return index.toString();\n    },\n    refreshing: props.loading,\n    onRefresh: props.reload,\n    renderItem: data => {\n      return props.render(data);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n};\n\nUIList.defaultProps = {\n  name: \"UIList\"\n};\nexport default UIList;","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/ui/UIList.tsx"],"names":["React","useEffect","FlatList","Text","View","ScrollView","UIButton","UIList","props","reload","style","loading","margin","data","length","alignItems","textAlign","width","extraData","item","index","toString","render","defaultProps","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,UAA/B;AACA,OAAOC,QAAP;;AACA,MAAMC,MAAM,GAAIC,KAAD,IAOT;AACJP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,KAAK,CAACC,MAAV,EAAkBD,KAAK,CAACC,MAAN;AACnB,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,MAAC,UAAD,eAAgBD,KAAK,CAACE,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGF,KAAK,CAACG,OAAN,IAAiB,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADpB,EAEGJ,KAAK,CAACK,IAAN,CAAWC,MAAX,KAAsB,CAAtB,GACC,CAACN,KAAK,CAACG,OAAP,IACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEI,MAAAA,UAAU,EAAE;AAAd,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE,QAAb;AAAuBJ,MAAAA,MAAM,EAAE;AAA/B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAIE,MAAC,QAAD;AACE,IAAA,OAAO,EAAEJ,KAAK,CAACC,MADjB;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAE;AAAEQ,MAAAA,KAAK,EAAE;AAAT,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,CAFH,GAgBC,MAAC,QAAD;AACE,IAAA,SAAS,EAAET,KAAK,CAACU,SADnB;AAEE,IAAA,IAAI,EAAEV,KAAK,CAACK,IAFd;AAGE,IAAA,YAAY,EAAE,CAACM,IAAD,EAAYC,KAAZ,KAA8B;AAC1C,aAAOA,KAAK,CAACC,QAAN,EAAP;AACD,KALH;AAME,IAAA,UAAU,EAAEb,KAAK,CAACG,OANpB;AAOE,IAAA,SAAS,EAAEH,KAAK,CAACC,MAPnB;AAQE,IAAA,UAAU,EAAEI,IAAI,IAAI;AAClB,aAAOL,KAAK,CAACc,MAAN,CAAaT,IAAb,CAAP;AACD,KAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBJ,CADF;AAkCD,CA9CD;;AAgDAN,MAAM,CAACgB,YAAP,GAAsB;AACpBC,EAAAA,IAAI,EAAE;AADc,CAAtB;AAIA,eAAejB,MAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { FlatList, Text, View, ScrollView } from \"react-native\";\nimport UIButton from \"./UIButton\";\nconst UIList = (props: {\n  data: any[];\n  render: any;\n  loading: boolean;\n  extraData?: any;\n  reload?: any;\n  style?: any;\n}) => {\n  useEffect(() => {\n    if (props.reload) props.reload();\n  }, []);\n\n  return (\n    <ScrollView {...props.style}>\n      {props.loading && <Text style={{ margin: 15 }}>Loading...</Text>}\n      {props.data.length === 0 ? (\n        !props.loading && (\n          <View style={{ alignItems: \"center\" }}>\n            <Text style={{ textAlign: \"center\", margin: 15 }}>\n              &mdash; Empty &mdash;\n            </Text>\n            <UIButton\n              onPress={props.reload}\n              size=\"small\"\n              style={{ width: 100 }}\n            >\n              Refresh\n            </UIButton>\n          </View>\n        )\n      ) : (\n        <FlatList\n          extraData={props.extraData}\n          data={props.data}\n          keyExtractor={(item: any, index: number) => {\n            return index.toString();\n          }}\n          refreshing={props.loading}\n          onRefresh={props.reload}\n          renderItem={data => {\n            return props.render(data);\n          }}\n        />\n      )}\n    </ScrollView>\n  );\n};\n\nUIList.defaultProps = {\n  name: \"UIList\"\n};\n\nexport default UIList;\n"]},"metadata":{},"sourceType":"module"}