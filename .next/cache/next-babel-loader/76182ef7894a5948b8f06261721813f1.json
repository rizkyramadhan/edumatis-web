{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport query from \"../queries/crud/query\";\nimport streamQuery from \"../queries/crud/streamQuery\";\nimport { AsyncStorage } from \"react-native-web\";\nimport { flow, types } from \"mobx-state-tree\";\nexport default (opt => {\n  return types.model({\n    query: types.optional(types.string, opt.query || \"\"),\n    loading: types.optional(types.boolean, false),\n    list: types.array(opt.record)\n  }).actions(self => {\n    const meta = JSON.parse(opt.record.properties._meta._defaultValue);\n    return {\n      afterCreate: function () {\n        if (opt.stream) {\n          self.startStream();\n        } else {\n          self.requery();\n        }\n      },\n      startStream: function () {\n        const where = _Object$keys(opt.where || {}).map(w => {\n          return `${w}: {_eq: ${_JSON$stringify(opt.where[w])}}`;\n        });\n\n        if (where.length > 0) {\n          where[0] = \",where:{\" + where[0];\n          where[where.length - 1] = where[where.length - 1] + \"}\";\n        }\n\n        let tableArgs = `${opt.args || \"\"} ${where.join(\",\")}`.trim();\n\n        if (tableArgs.length > 0) {\n          tableArgs = `(${tableArgs})`;\n        }\n\n        const record = JSON.parse(opt.record.properties._meta._defaultValue);\n        const query = `subscription {\n            ${record.tableName}${tableArgs} \n              ${opt.query} \n          }`;\n        streamQuery(query, result => {\n          if (result.type !== \"error\" && result.payload && result.payload.data && result.payload.data[record.tableName]) {\n            self.setList(result.payload.data[record.tableName].map(item => {\n              return opt.record.create(item);\n            }));\n          }\n        });\n      },\n      requery: flow(function* () {\n        let queryOpt = {};\n        if (opt.where) queryOpt[\"where\"] = opt.where;\n        if (opt.args) queryOpt[\"args\"] = opt.args;\n        const result = yield query(meta.tableName, opt.query, queryOpt);\n        self.list = (result || []).map(item => {\n          return opt.record.create(item);\n        });\n      }),\n      serverModify: function (list) {\n        self.list = list;\n      },\n      localUpdate: function (criteria, data) {\n        self.list.forEach(item => {\n          let shouldUpdate = true;\n\n          for (let i in criteria) {\n            if (criteria[i] !== item[i]) {\n              shouldUpdate = false;\n              break;\n            }\n          }\n\n          if (shouldUpdate) {\n            for (let i in data) {\n              item[i] = data[i];\n            }\n          }\n        });\n      },\n      localDelete: function (criteria) {\n        const newlist = [];\n        self.list.forEach(item => {\n          let shouldDelete = true;\n\n          for (let i in criteria) {\n            if (criteria[i] !== item[i]) {\n              shouldDelete = false;\n              break;\n            }\n          }\n\n          if (!shouldDelete) {\n            newlist.push(item);\n          }\n        });\n        self.list = newlist;\n      },\n      setList: function (newList) {\n        self.list = newList;\n      },\n      localSave: flow(function* () {\n        self.loading = true;\n        yield AsyncStorage.setItem(meta.tableName, _JSON$stringify(self.list));\n        self.loading = false;\n      }),\n      localLoad: flow(function* () {\n        self.loading = true;\n        const result = yield AsyncStorage.getItem(meta.tableName);\n        self.list = JSON.parse(result || \"\");\n        self.loading = false;\n      })\n    };\n  });\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/utils/List.ts"],"names":["query","streamQuery","AsyncStorage","flow","types","opt","model","optional","string","loading","boolean","list","array","record","actions","self","meta","JSON","parse","properties","_meta","_defaultValue","afterCreate","stream","startStream","requery","where","map","w","length","tableArgs","args","join","trim","tableName","result","type","payload","data","setList","item","create","queryOpt","serverModify","localUpdate","criteria","forEach","shouldUpdate","i","localDelete","newlist","shouldDelete","push","newList","localSave","setItem","localLoad","getItem"],"mappings":";;AAAA,OAAOA,KAAP;AACA,OAAOC,WAAP;AACA,SAASC,YAAT;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,iBAA5B;AAcA,gBAAgBC,GAAD,IAAsB;AACnC,SAAOD,KAAK,CACTE,KADI,CACE;AACLN,IAAAA,KAAK,EAAEI,KAAK,CAACG,QAAN,CAAeH,KAAK,CAACI,MAArB,EAA6BH,GAAG,CAACL,KAAJ,IAAa,EAA1C,CADF;AAELS,IAAAA,OAAO,EAAEL,KAAK,CAACG,QAAN,CAAeH,KAAK,CAACM,OAArB,EAA8B,KAA9B,CAFJ;AAGLC,IAAAA,IAAI,EAAEP,KAAK,CAACQ,KAAN,CAAYP,GAAG,CAACQ,MAAhB;AAHD,GADF,EAMJC,OANI,CAMKC,IAAD,IAAe;AACtB,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWb,GAAG,CAACQ,MAAJ,CAAWM,UAAX,CAAsBC,KAAtB,CAA4BC,aAAvC,CAAb;AACA,WAAO;AACLC,MAAAA,WAAW,EAAE,YAAW;AACtB,YAAIjB,GAAG,CAACkB,MAAR,EAAgB;AACdR,UAAAA,IAAI,CAACS,WAAL;AACD,SAFD,MAEO;AACLT,UAAAA,IAAI,CAACU,OAAL;AACD;AACF,OAPI;AAQLD,MAAAA,WAAW,EAAE,YAAW;AACtB,cAAME,KAAK,GAAG,aAAYrB,GAAG,CAACqB,KAAJ,IAAa,EAAzB,EAA6BC,GAA7B,CAAkCC,CAAD,IAAe;AAC5D,iBAAQ,GAAEA,CAAE,WAAU,gBAAevB,GAAG,CAACqB,KAAJ,CAAUE,CAAV,CAAf,CAA6B,GAAnD;AACD,SAFa,CAAd;;AAGA,YAAIF,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AACpBH,UAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,aAAaA,KAAK,CAAC,CAAD,CAA7B;AACAA,UAAAA,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAL,GAA0BH,KAAK,CAACA,KAAK,CAACG,MAAN,GAAe,CAAhB,CAAL,GAA0B,GAApD;AACD;;AAED,YAAIC,SAAS,GAAI,GAAEzB,GAAG,CAAC0B,IAAJ,IAAY,EAAG,IAAGL,KAAK,CAACM,IAAN,CAAW,GAAX,CAAgB,EAArC,CAAuCC,IAAvC,EAAhB;;AACA,YAAIH,SAAS,CAACD,MAAV,GAAmB,CAAvB,EAA0B;AACxBC,UAAAA,SAAS,GAAI,IAAGA,SAAU,GAA1B;AACD;;AACD,cAAMjB,MAAM,GAAGI,IAAI,CAACC,KAAL,CAAWb,GAAG,CAACQ,MAAJ,CAAWM,UAAX,CAAsBC,KAAtB,CAA4BC,aAAvC,CAAf;AACA,cAAMrB,KAAK,GAAI;cACXa,MAAM,CAACqB,SAAU,GAAEJ,SAAU;gBAC3BzB,GAAG,CAACL,KAAM;YAFhB;AAIAC,QAAAA,WAAW,CAACD,KAAD,EAASmC,MAAD,IAAiB;AAClC,cACEA,MAAM,CAACC,IAAP,KAAgB,OAAhB,IACAD,MAAM,CAACE,OADP,IAEAF,MAAM,CAACE,OAAP,CAAeC,IAFf,IAGAH,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBzB,MAAM,CAACqB,SAA3B,CAJF,EAKE;AACAnB,YAAAA,IAAI,CAACwB,OAAL,CACEJ,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBzB,MAAM,CAACqB,SAA3B,EAAsCP,GAAtC,CAA2Ca,IAAD,IAAe;AACvD,qBAAOnC,GAAG,CAACQ,MAAJ,CAAW4B,MAAX,CAAkBD,IAAlB,CAAP;AACD,aAFD,CADF;AAKD;AACF,SAbU,CAAX;AAcD,OAxCI;AAyCLf,MAAAA,OAAO,EAAEtB,IAAI,CAAC,aAAY;AACxB,YAAIuC,QAAa,GAAG,EAApB;AAEA,YAAIrC,GAAG,CAACqB,KAAR,EAAegB,QAAQ,CAAC,OAAD,CAAR,GAAoBrC,GAAG,CAACqB,KAAxB;AACf,YAAIrB,GAAG,CAAC0B,IAAR,EAAcW,QAAQ,CAAC,MAAD,CAAR,GAAmBrC,GAAG,CAAC0B,IAAvB;AACd,cAAMI,MAAM,GAAG,MAAMnC,KAAK,CAACgB,IAAI,CAACkB,SAAN,EAAiB7B,GAAG,CAACL,KAArB,EAA4B0C,QAA5B,CAA1B;AAEA3B,QAAAA,IAAI,CAACJ,IAAL,GAAY,CAACwB,MAAM,IAAI,EAAX,EAAeR,GAAf,CAAoBa,IAAD,IAAe;AAC5C,iBAAOnC,GAAG,CAACQ,MAAJ,CAAW4B,MAAX,CAAkBD,IAAlB,CAAP;AACD,SAFW,CAAZ;AAGD,OAVY,CAzCR;AAoDLG,MAAAA,YAAY,EAAE,UAAShC,IAAT,EAAmC;AAC/CI,QAAAA,IAAI,CAACJ,IAAL,GAAYA,IAAZ;AACD,OAtDI;AAuDLiC,MAAAA,WAAW,EAAE,UAASC,QAAT,EAAwBP,IAAxB,EAAmC;AAC9CvB,QAAAA,IAAI,CAACJ,IAAL,CAAUmC,OAAV,CAAmBN,IAAD,IAAe;AAC/B,cAAIO,YAAY,GAAG,IAAnB;;AACA,eAAK,IAAIC,CAAT,IAAcH,QAAd,EAAwB;AACtB,gBAAIA,QAAQ,CAACG,CAAD,CAAR,KAAgBR,IAAI,CAACQ,CAAD,CAAxB,EAA6B;AAC3BD,cAAAA,YAAY,GAAG,KAAf;AACA;AACD;AACF;;AACD,cAAIA,YAAJ,EAAkB;AAChB,iBAAK,IAAIC,CAAT,IAAcV,IAAd,EAAoB;AAClBE,cAAAA,IAAI,CAACQ,CAAD,CAAJ,GAAUV,IAAI,CAACU,CAAD,CAAd;AACD;AACF;AACF,SAbD;AAcD,OAtEI;AAuELC,MAAAA,WAAW,EAAE,UAASJ,QAAT,EAAwB;AACnC,cAAMK,OAAY,GAAG,EAArB;AACAnC,QAAAA,IAAI,CAACJ,IAAL,CAAUmC,OAAV,CAAmBN,IAAD,IAAe;AAC/B,cAAIW,YAAY,GAAG,IAAnB;;AACA,eAAK,IAAIH,CAAT,IAAcH,QAAd,EAAwB;AACtB,gBAAIA,QAAQ,CAACG,CAAD,CAAR,KAAgBR,IAAI,CAACQ,CAAD,CAAxB,EAA6B;AAC3BG,cAAAA,YAAY,GAAG,KAAf;AACA;AACD;AACF;;AACD,cAAI,CAACA,YAAL,EAAmB;AACjBD,YAAAA,OAAO,CAACE,IAAR,CAAaZ,IAAb;AACD;AACF,SAXD;AAYAzB,QAAAA,IAAI,CAACJ,IAAL,GAAYuC,OAAZ;AACD,OAtFI;AAuFLX,MAAAA,OAAO,EAAE,UAASc,OAAT,EAAyB;AAChCtC,QAAAA,IAAI,CAACJ,IAAL,GAAY0C,OAAZ;AACD,OAzFI;AA0FLC,MAAAA,SAAS,EAAEnD,IAAI,CAAC,aAAY;AAC1BY,QAAAA,IAAI,CAACN,OAAL,GAAe,IAAf;AACA,cAAMP,YAAY,CAACqD,OAAb,CAAqBvC,IAAI,CAACkB,SAA1B,EAAqC,gBAAenB,IAAI,CAACJ,IAApB,CAArC,CAAN;AACAI,QAAAA,IAAI,CAACN,OAAL,GAAe,KAAf;AACD,OAJc,CA1FV;AA+FL+C,MAAAA,SAAS,EAAErD,IAAI,CAAC,aAAY;AAC1BY,QAAAA,IAAI,CAACN,OAAL,GAAe,IAAf;AACA,cAAM0B,MAAM,GAAG,MAAMjC,YAAY,CAACuD,OAAb,CAAqBzC,IAAI,CAACkB,SAA1B,CAArB;AACAnB,QAAAA,IAAI,CAACJ,IAAL,GAAYM,IAAI,CAACC,KAAL,CAAWiB,MAAM,IAAI,EAArB,CAAZ;AACApB,QAAAA,IAAI,CAACN,OAAL,GAAe,KAAf;AACD,OALc;AA/FV,KAAP;AAsGD,GA9GI,CAAP;AA+GD,CAhHD","sourcesContent":["import query from \"@app/libs/queries/crud/query\";\nimport streamQuery from \"@app/libs/queries/crud/streamQuery\";\nimport { AsyncStorage } from \"react-native\";\nimport { flow, types } from \"mobx-state-tree\";\n\ninterface ListOptions {\n  record: any;\n  query: string;\n  stream?: boolean;\n  args?: string;\n  where?: any;\n}\n\ninterface StreamOptions {\n  useSession: boolean;\n}\n\nexport default (opt: ListOptions) => {\n  return types\n    .model({\n      query: types.optional(types.string, opt.query || \"\"),\n      loading: types.optional(types.boolean, false),\n      list: types.array(opt.record)\n    })\n    .actions((self: any) => {\n      const meta = JSON.parse(opt.record.properties._meta._defaultValue);\n      return {\n        afterCreate: function() {\n          if (opt.stream) {\n            self.startStream();\n          } else {\n            self.requery();\n          }\n        },\n        startStream: function() {\n          const where = Object.keys(opt.where || {}).map((w: string) => {\n            return `${w}: {_eq: ${JSON.stringify(opt.where[w])}}`;\n          });\n          if (where.length > 0) {\n            where[0] = \",where:{\" + where[0];\n            where[where.length - 1] = where[where.length - 1] + \"}\";\n          }\n\n          let tableArgs = `${opt.args || \"\"} ${where.join(\",\")}`.trim();\n          if (tableArgs.length > 0) {\n            tableArgs = `(${tableArgs})`;\n          }\n          const record = JSON.parse(opt.record.properties._meta._defaultValue);\n          const query = `subscription {\n            ${record.tableName}${tableArgs} \n              ${opt.query} \n          }`;\n          streamQuery(query, (result: any) => {\n            if (\n              result.type !== \"error\" &&\n              result.payload &&\n              result.payload.data &&\n              result.payload.data[record.tableName]\n            ) {\n              self.setList(\n                result.payload.data[record.tableName].map((item: any) => {\n                  return opt.record.create(item);\n                })\n              );\n            }\n          });\n        },\n        requery: flow(function*() {\n          let queryOpt: any = {};\n\n          if (opt.where) queryOpt[\"where\"] = opt.where;\n          if (opt.args) queryOpt[\"args\"] = opt.args;\n          const result = yield query(meta.tableName, opt.query, queryOpt);\n\n          self.list = (result || []).map((item: any) => {\n            return opt.record.create(item);\n          });\n        }),\n        serverModify: function(list: ReadonlyArray<any>) {\n          self.list = list;\n        },\n        localUpdate: function(criteria: any, data: any) {\n          self.list.forEach((item: any) => {\n            let shouldUpdate = true;\n            for (let i in criteria) {\n              if (criteria[i] !== item[i]) {\n                shouldUpdate = false;\n                break;\n              }\n            }\n            if (shouldUpdate) {\n              for (let i in data) {\n                item[i] = data[i];\n              }\n            }\n          });\n        },\n        localDelete: function(criteria: any) {\n          const newlist: any = [];\n          self.list.forEach((item: any) => {\n            let shouldDelete = true;\n            for (let i in criteria) {\n              if (criteria[i] !== item[i]) {\n                shouldDelete = false;\n                break;\n              }\n            }\n            if (!shouldDelete) {\n              newlist.push(item);\n            }\n          });\n          self.list = newlist;\n        },\n        setList: function(newList: any[]) {\n          self.list = newList;\n        },\n        localSave: flow(function*() {\n          self.loading = true;\n          yield AsyncStorage.setItem(meta.tableName, JSON.stringify(self.list));\n          self.loading = false;\n        }),\n        localLoad: flow(function*() {\n          self.loading = true;\n          const result = yield AsyncStorage.getItem(meta.tableName)\n          self.list = JSON.parse(result || \"\");\n          self.loading = false;\n        })\n      };\n    });\n};\n"]},"metadata":{},"sourceType":"module"}