{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport config from \"../../config\";\nimport { checkSession } from \"../user/checkSession\";\nexport default (async (table, data, options) => {\n  const opt = _objectSpread({}, {\n    useSession: true,\n    debug: false,\n    primaryKey: \"id\"\n  }, options);\n\n  const gql = `mutation create($data:${table}_insert_input!) {\n    insert_${table}(\n      objects: [$data]\n    ) {\n      returning {\n        ${opt.primaryKey}\n      }\n    }\n  }`;\n\n  if (opt && opt.debug) {\n    console.log(gql, data);\n  }\n\n  let headers = {\n    \"Content-Type\": \"application/json\"\n  };\n\n  if (opt.useSession) {\n    const session = await checkSession();\n    headers[\"X-Hasura-Session-Id\"] = session.id;\n\n    if (!session) {\n      return false;\n    }\n  }\n\n  const postData = {};\n\n  for (let i in data) {\n    if (i.endsWith(\"_aggregate\")) {\n      continue;\n    }\n\n    postData[i] = data[i];\n  }\n\n  const response = await fetch(config.url, {\n    method: \"POST\",\n    body: _JSON$stringify({\n      operationName: \"create\",\n      query: gql,\n      variables: {\n        data: postData\n      }\n    }),\n    headers\n  });\n  const json = await response.json();\n\n  if (response.status !== 200) {\n    if (json && json.errors && json.errors[0] && json.errors[0].message) {\n      throw `\n(Create Record Failed) ${json.errors[0].message} \n\nGraphQL Mutation:\n${gql}\n\nData: \n${_JSON$stringify(data, null, 2).replace(/\"/gi, \"'\")}\n        `.trim();\n    }\n\n    return null;\n  }\n\n  return json.data[`insert_${table}`].returning[0].id;\n});","map":null,"metadata":{},"sourceType":"module"}