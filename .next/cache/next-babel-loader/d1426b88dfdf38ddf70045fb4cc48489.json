{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport config from \"../../config\";\n\nvar get = require(\"lodash.get\");\n\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(client_id) {\n    var username,\n        password,\n        query,\n        response,\n        res,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            username = _args.length > 1 && _args[1] !== undefined ? _args[1] : \"\";\n            password = _args.length > 2 && _args[2] !== undefined ? _args[2] : \"\";\n            query = \"query ($u: String!, $c: Int!) {\\n    \".concat(config.table, \"(where: {_and: {\").concat(config.identifier.client_id, \": {_eq: $c}, \").concat(config.identifier.username, \": {_eq: $u}}}) {\\n      sessions(limit: 1, order_by: {tstamp: desc}) {\\n        id\\n        \").concat(config.table, \" {\\n          \").concat(config.user.columns.join(\"\\n\"), \"\\n        }\\n      }\\n    }\\n  }\");\n            _context.next = 5;\n            return fetch(config.url, {\n              method: \"POST\",\n              body: _JSON$stringify({\n                query: query,\n                variables: {\n                  u: username,\n                  c: client_id\n                }\n              }),\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-Hasura-Username\": username,\n                \"X-Hasura-Password\": password,\n                \"X-Hasura-Cid\": client_id\n              }\n            });\n\n          case 5:\n            response = _context.sent;\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            res = _context.sent;\n            return _context.abrupt(\"return\", get(res, \"data.\".concat(config.table, \"[0].sessions[0]\")));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/queries/user/login.ts"],"names":["config","get","require","client_id","username","password","query","table","identifier","user","columns","join","fetch","url","method","body","variables","u","c","headers","response","json","res"],"mappings":";;;AAAA,OAAOA,MAAP;;AAEA,IAAMC,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBACbC,SADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbC,YAAAA,QAFa,2DAEM,EAFN;AAGbC,YAAAA,QAHa,2DAGM,EAHN;AAKPC,YAAAA,KALO,kDAMTN,MAAM,CAACO,KANE,6BAMsBP,MAAM,CAACQ,UAAP,CAAkBL,SANxC,0BAOXH,MAAM,CAACQ,UAAP,CAAkBJ,QAPP,yGAWLJ,MAAM,CAACO,KAXF,2BAYHP,MAAM,CAACS,IAAP,CAAYC,OAAZ,CAAoBC,IAApB,CAAyB,IAAzB,CAZG;AAAA;AAAA,mBAiBoBC,KAAK,CAACZ,MAAM,CAACa,GAAR,EAAa;AACjDC,cAAAA,MAAM,EAAE,MADyC;AAEjDC,cAAAA,IAAI,EAAE,gBAAe;AACnBT,gBAAAA,KAAK,EAALA,KADmB;AAEnBU,gBAAAA,SAAS,EAAE;AACTC,kBAAAA,CAAC,EAAEb,QADM;AAETc,kBAAAA,CAAC,EAAEf;AAFM;AAFQ,eAAf,CAF2C;AASjDgB,cAAAA,OAAO,EAAE;AACP,gCAAgB,kBADT;AAEP,qCAAqBf,QAFd;AAGP,qCAAqBC,QAHd;AAIP,gCAAgBF;AAJT;AATwC,aAAb,CAjBzB;;AAAA;AAiBPiB,YAAAA,QAjBO;AAAA;AAAA,mBAiCKA,QAAQ,CAACC,IAAT,EAjCL;;AAAA;AAiCPC,YAAAA,GAjCO;AAAA,6CAkCNrB,GAAG,CAACqB,GAAD,iBAActB,MAAM,CAACO,KAArB,qBAlCG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import config from \"@app/libs/config\";\n\nconst get = require(\"lodash.get\");\n\nexport default async (\n  client_id: string,\n  username: string = \"\",\n  password: string = \"\"\n) => {\n  const query = `query ($u: String!, $c: Int!) {\n    ${config.table}(where: {_and: {${config.identifier.client_id}: {_eq: $c}, ${\n    config.identifier.username\n  }: {_eq: $u}}}) {\n      sessions(limit: 1, order_by: {tstamp: desc}) {\n        id\n        ${config.table} {\n          ${config.user.columns.join(\"\\n\")}\n        }\n      }\n    }\n  }`;\n  const response: Response = await fetch(config.url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      query,\n      variables: {\n        u: username,\n        c: client_id\n      }\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-Hasura-Username\": username,\n      \"X-Hasura-Password\": password,\n      \"X-Hasura-Cid\": client_id\n    }\n  });\n  const res = await response.json();\n  return get(res, `data.${config.table}[0].sessions[0]`);\n};\n"]},"metadata":{},"sourceType":"module"}