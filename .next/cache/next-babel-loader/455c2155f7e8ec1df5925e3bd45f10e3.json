{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport login from \"../queries/user/login\";\nimport { flow, types } from 'mobx-state-tree';\nimport AsyncStorage from \"../utils/AsyncStorage\";\nimport { UserRecord } from \"./User\";\nimport List from \"../utils/List\";\nimport Record from \"../utils/Record\";\nimport config from \"../config\";\nimport rawQuery from \"../queries/crud/rawQuery\";\nexport var SessionRecord = Record({\n  tableName: 'session',\n  columns: {\n    id: types.maybe(types.string),\n    client_id: types.maybe(types.integer),\n    user: UserRecord\n  },\n  actions: function actions(self) {\n    return {\n      login: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(client_id, username, password) {\n        var response, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return login(client_id, username, password);\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return AsyncStorage.setItem('SESSION', _JSON$stringify(response));\n\n              case 6:\n                _context.next = 8;\n                return rawQuery(\"{\\n          kelas_murid(where: {murid_id: {_eq: \".concat(response.murid.id, \"}}) {\\n            kelas {\\n              sekolah {\\n                id\\n                margin\\n                nama_sekolah\\n              }\\n              nama_kelas\\n              id\\n            }\\n          }\\n        }\"));\n\n              case 8:\n                result = _context.sent;\n\n                if (result) {\n                  response.kelas = {\n                    id: result.kelas_murid[0].kelas.id,\n                    nama: result.kelas_murid[0].kelas.nama_kelas\n                  };\n                  response.sekolah = {\n                    id: result.kelas_murid[0].kelas.sekolah.id,\n                    margin: result.kelas_murid[0].kelas.sekolah.margin,\n                    nama: result.kelas_murid[0].kelas.sekolah.nama_sekolah\n                  };\n                }\n\n                _context.next = 12;\n                return AsyncStorage.setItem('SESSION', _JSON$stringify(response));\n\n              case 12:\n                return _context.abrupt(\"return\", response);\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](0);\n                console.warn(_context.t0);\n                return _context.abrupt(\"return\", false);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 15]]);\n      })),\n      restore: function restore(session) {\n        self.id = session.id;\n        self[config.table + '_id'] = session[config.table + '_id'];\n        self[config.table] = session[config.table];\n      },\n      logout: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return AsyncStorage.removeItem('SESSION');\n\n              case 2:\n                self.id = null;\n                self[config.table + '_id'] = null;\n                self[config.table] = null;\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))\n    };\n  }\n});\nexport var SessionList = List({\n  record: SessionRecord,\n  query: \"{\\n    id\\n    user_id\\n  }\"\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/stores/Session.ts"],"names":["login","flow","types","AsyncStorage","UserRecord","List","Record","config","rawQuery","SessionRecord","tableName","columns","id","maybe","string","client_id","integer","user","actions","self","username","password","response","setItem","murid","result","kelas","kelas_murid","nama","nama_kelas","sekolah","margin","nama_sekolah","console","warn","restore","session","table","logout","removeItem","SessionList","record","query"],"mappings":"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","sourcesContent":["import login from '@app/libs/queries/user/login';\nimport { flow, types } from 'mobx-state-tree';\nimport AsyncStorage from '@app/libs/utils/AsyncStorage';\nimport { UserRecord } from './User';\nimport List from '@app/libs/utils/List';\nimport Record from '@app/libs/utils/Record';\nimport config from '@app/libs/config';\nimport rawQuery from '@app/libs/queries/crud/rawQuery';\n\nexport const SessionRecord = Record({\n  tableName: 'session',\n  columns: {\n    id: types.maybe(types.string),\n    client_id: types.maybe(types.integer),\n    user: UserRecord\n  },\n  actions: (self: any) => ({\n    login: flow(function*(client_id, username, password) {\n      try {\n        const response: any = yield login(client_id, username, password);\n        yield AsyncStorage.setItem('SESSION', JSON.stringify(response));\n        const result: any = yield rawQuery(`{\n          kelas_murid(where: {murid_id: {_eq: ${response.murid.id}}}) {\n            kelas {\n              sekolah {\n                id\n                margin\n                nama_sekolah\n              }\n              nama_kelas\n              id\n            }\n          }\n        }`);\n        if (result) {\n          response.kelas = {\n            id: result.kelas_murid[0].kelas.id,\n            nama: result.kelas_murid[0].kelas.nama_kelas\n          };\n\n          response.sekolah = {\n            id: result.kelas_murid[0].kelas.sekolah.id,\n            margin: result.kelas_murid[0].kelas.sekolah.margin,\n            nama: result.kelas_murid[0].kelas.sekolah.nama_sekolah\n          };\n        }\n        yield AsyncStorage.setItem('SESSION', JSON.stringify(response));\n        return response;\n      } catch (e) {\n        console.warn(e);\n        return false;\n      }\n    }),\n    restore: function(session: any) {\n      self.id = session.id;\n      self[config.table + '_id'] = session[config.table + '_id'];\n      self[config.table] = session[config.table];\n    },\n    logout: flow(function*() {\n      yield AsyncStorage.removeItem('SESSION');\n      self.id = null;\n      self[config.table + '_id'] = null;\n      self[config.table] = null;\n    })\n  })\n});\n\nexport const SessionList = List({\n  record: SessionRecord,\n  query: `{\n    id\n    user_id\n  }`\n});\n"]},"metadata":{},"sourceType":"module"}