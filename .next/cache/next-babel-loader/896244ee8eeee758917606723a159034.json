{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport login from \"../queries/user/login\";\nimport { flow, types } from 'mobx-state-tree';\nimport AsyncStorage from \"../utils/AsyncStorage\";\nimport { UserRecord } from \"./User\";\nimport List from \"../utils/List\";\nimport Record from \"../utils/Record\";\nimport config from \"../config\";\nimport rawQuery from \"../queries/crud/rawQuery\";\nexport var SessionRecord = Record({\n  tableName: 'session',\n  columns: {\n    id: types.maybe(types.string),\n    client_id: types.maybe(types.integer),\n    user: UserRecord\n  },\n  actions: function actions(self) {\n    return {\n      login: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(client_id, username, password) {\n        var response, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return login(client_id, username, password);\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return AsyncStorage.setItem('SESSION', _JSON$stringify(response));\n\n              case 6:\n                _context.next = 8;\n                return rawQuery(\"{\\n          kelas_murid(where: {murid_id: {_eq: \".concat(response.murid.id, \"}}) {\\n            kelas {\\n              sekolah {\\n                id\\n                margin\\n                nama_sekolah\\n              }\\n              nama_kelas\\n              id\\n            }\\n          }\\n        }\"));\n\n              case 8:\n                result = _context.sent;\n\n                if (result) {\n                  response.kelas = {\n                    id: result.kelas_murid[0].kelas.id,\n                    nama: result.kelas_murid[0].kelas.nama_kelas\n                  };\n                  response.sekolah = {\n                    id: result.kelas_murid[0].kelas.sekolah.id,\n                    margin: result.kelas_murid[0].kelas.sekolah.margin,\n                    nama: result.kelas_murid[0].kelas.sekolah.nama_sekolah\n                  };\n                }\n\n                _context.next = 12;\n                return AsyncStorage.setItem('SESSION', _JSON$stringify(response));\n\n              case 12:\n                return _context.abrupt(\"return\", response);\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](0);\n                console.warn(_context.t0);\n                return _context.abrupt(\"return\", false);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 15]]);\n      })),\n      restore: function restore(session) {\n        self.id = session.id;\n        self[config.table + '_id'] = session[config.table + '_id'];\n        self[config.table] = session[config.table];\n      },\n      logout: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return AsyncStorage.removeItem('SESSION');\n\n              case 2:\n                self.id = null;\n                self[config.table + '_id'] = null;\n                self[config.table] = null;\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))\n    };\n  }\n});\nexport var SessionList = List({\n  record: SessionRecord,\n  query: \"{\\n    id\\n    user_id\\n  }\"\n});","map":null,"metadata":{},"sourceType":"module"}