{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport config from \"../../config\";\nimport { checkSession } from \"../user/checkSession\";\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(table, data, options) {\n    var opt, gql, headers, session, postData, i, response, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            opt = _objectSpread({}, {\n              useSession: true,\n              debug: false,\n              primaryKey: \"id\"\n            }, options);\n            gql = \"mutation create($data:\".concat(table, \"_insert_input!) {\\n    insert_\").concat(table, \"(\\n      objects: [$data]\\n    ) {\\n      returning {\\n        \").concat(opt.primaryKey, \"\\n      }\\n    }\\n  }\");\n\n            if (opt && opt.debug) {\n              console.log(gql, data);\n            }\n\n            headers = {\n              \"Content-Type\": \"application/json\"\n            };\n\n            if (!opt.useSession) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 7;\n            return checkSession();\n\n          case 7:\n            session = _context.sent;\n            headers[\"X-Hasura-Session-Id\"] = session.id;\n\n            if (session) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 11:\n            postData = {};\n            _context.t0 = _regeneratorRuntime.keys(data);\n\n          case 13:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 20;\n              break;\n            }\n\n            i = _context.t1.value;\n\n            if (!i.endsWith(\"_aggregate\")) {\n              _context.next = 17;\n              break;\n            }\n\n            return _context.abrupt(\"continue\", 13);\n\n          case 17:\n            postData[i] = data[i];\n            _context.next = 13;\n            break;\n\n          case 20:\n            _context.next = 22;\n            return fetch(config.url, {\n              method: \"POST\",\n              body: _JSON$stringify({\n                operationName: \"create\",\n                query: gql,\n                variables: {\n                  data: postData\n                }\n              }),\n              headers: headers\n            });\n\n          case 22:\n            response = _context.sent;\n            _context.next = 25;\n            return response.json();\n\n          case 25:\n            json = _context.sent;\n\n            if (!(response.status !== 200)) {\n              _context.next = 30;\n              break;\n            }\n\n            if (!(json && json.errors && json.errors[0] && json.errors[0].message)) {\n              _context.next = 29;\n              break;\n            }\n\n            throw \"\\n(Create Record Failed) \".concat(json.errors[0].message, \" \\n\\nGraphQL Mutation:\\n\").concat(gql, \"\\n\\nData: \\n\").concat(_JSON$stringify(data, null, 2).replace(/\"/gi, \"'\"), \"\\n        \").trim();\n\n          case 29:\n            return _context.abrupt(\"return\", null);\n\n          case 30:\n            return _context.abrupt(\"return\", json.data[\"insert_\".concat(table)].returning[0].id);\n\n          case 31:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":null,"metadata":{},"sourceType":"module"}