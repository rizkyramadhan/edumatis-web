{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport config from \"../../config\";\nimport { checkSession } from \"../user/checkSession\";\nexport default (async (table, data, options) => {\n  const opt = _objectSpread({}, {\n    useSession: true,\n    debug: false,\n    primaryKey: \"id\"\n  }, options);\n\n  const pk = typeof data[opt.primaryKey] === \"string\" ? `\"${data[opt.primaryKey]}\"` : data[opt.primaryKey];\n  const gql = `mutation delete {\n    delete_${table}(\n      where: {${opt.primaryKey}: {_eq: ${pk}}},\n    ) {\n      affected_rows\n    }\n  }`;\n  let headers = {\n    \"Content-Type\": \"application/json\"\n  };\n\n  if (opt.useSession) {\n    const session = await checkSession();\n    headers[\"X-Hasura-Session-Id\"] = session.id;\n\n    if (!session) {\n      return false;\n    }\n  }\n\n  const response = await fetch(config.url, {\n    method: \"POST\",\n    body: _JSON$stringify({\n      operationName: \"delete\",\n      query: gql\n    }),\n    headers\n  });\n  const json = await response.json();\n\n  if (response.status !== 200) {\n    if (json && json.errors && json.errors[0] && json.errors[0].message) {\n      throw `\n(Create Record Failed) ${json.errors[0].message} \n\nGraphQL Mutation:\n${gql}\n\nData: \n${_JSON$stringify(data, null, 2).replace(/\"/gi, \"'\")}\n        `.trim();\n    }\n\n    return null;\n  }\n\n  return json;\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/queries/crud/deleteRecord.ts"],"names":["config","checkSession","table","data","options","opt","useSession","debug","primaryKey","pk","gql","headers","session","id","response","fetch","url","method","body","operationName","query","json","status","errors","message","replace","trim"],"mappings":";;AAAA,OAAOA,MAAP;AACA,SAASC,YAAT;AAQA,gBAAe,OAAOC,KAAP,EAAsBC,IAAtB,EAAiCC,OAAjC,KAAoD;AACjE,QAAMC,GAAG,qBACJ;AAAEC,IAAAA,UAAU,EAAE,IAAd;AAAoBC,IAAAA,KAAK,EAAE,KAA3B;AAAkCC,IAAAA,UAAU,EAAE;AAA9C,GADI,EAEJJ,OAFI,CAAT;;AAIA,QAAMK,EAAE,GACN,OAAON,IAAI,CAACE,GAAG,CAACG,UAAL,CAAX,KAAgC,QAAhC,GACK,IAAGL,IAAI,CAACE,GAAG,CAACG,UAAL,CAAiB,GAD7B,GAEIL,IAAI,CAACE,GAAG,CAACG,UAAL,CAHV;AAKA,QAAME,GAAG,GAAI;aACFR,KAAM;gBACHG,GAAG,CAACG,UAAW,WAAUC,EAAG;;;;IAF1C;AAOA,MAAIE,OAAY,GAAG;AACjB,oBAAgB;AADC,GAAnB;;AAGA,MAAIN,GAAG,CAACC,UAAR,EAAoB;AAClB,UAAMM,OAAO,GAAG,MAAMX,YAAY,EAAlC;AACAU,IAAAA,OAAO,CAAC,qBAAD,CAAP,GAAiCC,OAAO,CAACC,EAAzC;;AACA,QAAI,CAACD,OAAL,EAAc;AACZ,aAAO,KAAP;AACD;AACF;;AAED,QAAME,QAAkB,GAAG,MAAMC,KAAK,CAACf,MAAM,CAACgB,GAAR,EAAa;AACjDC,IAAAA,MAAM,EAAE,MADyC;AAEjDC,IAAAA,IAAI,EAAE,gBAAe;AACnBC,MAAAA,aAAa,EAAE,QADI;AAEnBC,MAAAA,KAAK,EAAEV;AAFY,KAAf,CAF2C;AAMjDC,IAAAA;AANiD,GAAb,CAAtC;AAQA,QAAMU,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAT,EAAnB;;AACA,MAAIP,QAAQ,CAACQ,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,QAAID,IAAI,IAAIA,IAAI,CAACE,MAAb,IAAuBF,IAAI,CAACE,MAAL,CAAY,CAAZ,CAAvB,IAAyCF,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,OAA5D,EAAqE;AACnE,YAAO;yBACYH,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,OAAQ;;;EAG9Cd,GAAI;;;EAGJ,gBAAeP,IAAf,EAAqB,IAArB,EAA2B,CAA3B,EAA8BsB,OAA9B,CAAsC,KAAtC,EAA6C,GAA7C,CAAkD;SAPxC,CAQFC,IARE,EAAN;AASD;;AACD,WAAO,IAAP;AACD;;AACD,SAAOL,IAAP;AACD,CApDD","sourcesContent":["import config from \"@app/libs/config\";\nimport { checkSession } from \"../user/checkSession\";\n\ninterface opts {\n  useSession?: boolean;\n  debug?: boolean;\n  primaryKey?: string;\n}\n\nexport default async (table: string, data: any, options?: opts) => {\n  const opt = {\n    ...{ useSession: true, debug: false, primaryKey: \"id\" },\n    ...options\n  };\n  const pk =\n    typeof data[opt.primaryKey] === \"string\"\n      ? `\"${data[opt.primaryKey]}\"`\n      : data[opt.primaryKey];\n\n  const gql = `mutation delete {\n    delete_${table}(\n      where: {${opt.primaryKey}: {_eq: ${pk}}},\n    ) {\n      affected_rows\n    }\n  }`;\n  let headers: any = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (opt.useSession) {\n    const session = await checkSession();\n    headers[\"X-Hasura-Session-Id\"] = session.id;\n    if (!session) {\n      return false;\n    }\n  }\n\n  const response: Response = await fetch(config.url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      operationName: \"delete\",\n      query: gql\n    }),\n    headers\n  });\n  const json = await response.json();\n  if (response.status !== 200) {\n    if (json && json.errors && json.errors[0] && json.errors[0].message) {\n      throw `\n(Create Record Failed) ${json.errors[0].message} \n\nGraphQL Mutation:\n${gql}\n\nData: \n${JSON.stringify(data, null, 2).replace(/\"/gi, \"'\")}\n        `.trim();\n    }\n    return null;\n  }\n  return json;\n};\n"]},"metadata":{},"sourceType":"module"}