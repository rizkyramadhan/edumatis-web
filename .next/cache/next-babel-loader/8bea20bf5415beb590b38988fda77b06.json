{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport config from \"../../config\";\nimport { AsyncStorage } from \"react-native-web\";\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(table, columns, options) {\n    var opt, where, tableArgs, gql, headers, sessionRaw, session, response, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            opt = _objectSpread({}, {\n              useSession: true,\n              debug: false,\n              where: {},\n              args: \"limit:1\"\n            }, options);\n            where = _Object$keys(opt.where).map(function (w) {\n              return \"\".concat(w, \": {_eq: \").concat(_JSON$stringify(opt.where[w]), \"}\");\n            });\n\n            if (where.length > 0) {\n              where[0] = \",where:{\" + where[0];\n              where[where.length - 1] = where[where.length - 1] + \"}\";\n            }\n\n            tableArgs = \"\".concat(opt.args || '', \" \").concat(where.join(\",\")).trim();\n\n            if (tableArgs.length > 0) {\n              tableArgs = \"(\".concat(tableArgs, \")\");\n            }\n\n            gql = \"\\n    {\\n        \".concat(table).concat(tableArgs, \" \\n        \").concat(typeof columns === \"string\" ? columns : \"{\" + columns.join(\"\\n\") + \"}\", \"\\n        \\n    }\");\n\n            if (opt.debug) {\n              console.log(gql);\n            }\n\n            headers = {\n              \"Content-Type\": \"application/json\"\n            };\n\n            if (!opt.useSession) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 11;\n            return AsyncStorage.getItem(\"SESSION\");\n\n          case 11:\n            sessionRaw = _context.sent;\n            session = JSON.parse(sessionRaw || \"false\");\n\n            if (session) {\n              _context.next = 17;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 17:\n            headers[\"X-Hasura-Session-Id\"] = session.id;\n\n          case 18:\n            _context.next = 20;\n            return fetch(config.url, {\n              method: \"POST\",\n              body: _JSON$stringify({\n                query: gql\n              }),\n              headers: headers\n            });\n\n          case 20:\n            response = _context.sent;\n            _context.next = 23;\n            return response.json();\n\n          case 23:\n            json = _context.sent;\n\n            if (!(response.status !== 200)) {\n              _context.next = 28;\n              break;\n            }\n\n            if (!(json && json.errors && json.errors[0] && json.errors[0].message)) {\n              _context.next = 27;\n              break;\n            }\n\n            throw \"\\n  (Query Record Failed) \".concat(json.errors[0].message, \" \\n  \\n  GraphQL Query: \").concat(gql, \"\\n  \\n  \");\n\n          case 27:\n            return _context.abrupt(\"return\", null);\n\n          case 28:\n            if (!(typeof columns !== \"string\")) {\n              _context.next = 32;\n              break;\n            }\n\n            return _context.abrupt(\"return\", json.data[table][0]);\n\n          case 32:\n            return _context.abrupt(\"return\", json.data[table]);\n\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/queries/crud/query.ts"],"names":["config","AsyncStorage","table","columns","options","opt","useSession","debug","where","args","map","w","length","tableArgs","join","trim","gql","console","log","headers","getItem","sessionRaw","session","JSON","parse","id","fetch","url","method","body","query","response","json","status","errors","message","data"],"mappings":"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","sourcesContent":["import config from \"@app/libs/config\";\nimport { AsyncStorage } from \"react-native\";\n\ninterface opts {\n  useSession?: boolean;\n  debug?: boolean;\n  where?: any;\n  args?: string;\n}\n\nexport default async (\n  table: string,\n  columns: string[] | string,\n  options?: opts\n) => {\n  const opt = {\n    ...{ useSession: true, debug: false, where: {}, args: \"limit:1\" },\n    ...options\n  };\n\n  const where = Object.keys(opt.where).map((w: string) => {\n    return `${w}: {_eq: ${JSON.stringify(opt.where[w])}}`;\n  });\n  if (where.length > 0) {\n    where[0] = \",where:{\" + where[0];\n    where[where.length - 1] = where[where.length - 1] + \"}\";\n  }\n\n  let tableArgs = `${opt.args || ''} ${where.join(\",\")}`.trim();\n  if (tableArgs.length > 0) {\n    tableArgs = `(${tableArgs})`;\n  }\n\n  const gql = `\n    {\n        ${table}${tableArgs} \n        ${\n          typeof columns === \"string\" ? columns : \"{\" + columns.join(\"\\n\") + \"}\"\n        }\n        \n    }`;\n\n  if (opt.debug) {\n    console.log(gql);\n  }\n\n  let headers: any = {\n    \"Content-Type\": \"application/json\"\n  };\n  \n  if (opt.useSession) {\n    const sessionRaw = await AsyncStorage.getItem(\"SESSION\");\n    const session = JSON.parse(sessionRaw || \"false\");\n    if (!session) {\n      return false;\n    } else {\n      headers[\"X-Hasura-Session-Id\"] = session.id;\n    }\n  }\n\n  const response: Response = await fetch(config.url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      query: gql\n    }),\n    headers\n  });\n  const json = await response.json();\n  if (response.status !== 200) {\n    if (json && json.errors && json.errors[0] && json.errors[0].message) {\n      throw `\n  (Query Record Failed) ${json.errors[0].message} \n  \n  GraphQL Query: ${gql}\n  \n  `;\n    }\n    return null;\n  }\n\n  if (typeof columns !== \"string\") {\n    return json.data[table][0];\n  } else {\n    return json.data[table];\n  }\n};\n"]},"metadata":{},"sourceType":"module"}