{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport createRecord from \"../queries/crud/createRecord\";\nimport deleteRecord from \"../queries/crud/deleteRecord\";\nimport query from \"../queries/crud/query\";\nimport updateRecord from \"../queries/crud/updateRecord\";\nimport { flow } from \"mobx-state-tree\";\nimport { isLateType, isUnionType, types } from \"mobx-state-tree\";\nexport default (function (opt) {\n  var primaryKey = !opt.primaryKey ? \"id\" : opt.primaryKey;\n  var columns = {};\n\n  for (var i in opt.columns) {\n    var c = opt.columns[i];\n\n    if (typeof c !== typeof types.maybeNull) {\n      columns[i] = types.maybeNull(c);\n    } else {\n      columns[i] = c;\n    }\n  }\n\n  var recordResult = types.model(_objectSpread({}, columns, {\n    _meta: types.optional(types.string, _JSON$stringify({\n      primaryKey: primaryKey,\n      tableName: opt.tableName\n    })),\n    loading: types.optional(types[\"boolean\"], false),\n    errors: types.optional(types.array(types.string), []),\n    isSaved: types.optional(types[\"boolean\"], false)\n  })).views(function (self) {\n    return {\n      get isNewRecord() {\n        return !self[primaryKey];\n      },\n\n      get rawData() {\n        var col = _Object$keys(opt.columns);\n\n        var result = {};\n        col.forEach(function (key) {\n          if (self[key] !== null) {\n            result[key] = self[key];\n          }\n        });\n        return result;\n      }\n\n    };\n  }).actions(function (self) {\n    var actions = {};\n\n    if (opt.actions) {\n      actions = opt.actions(self);\n    }\n\n    return _objectSpread({}, actions, {\n      set: function set(key, value) {\n        if (typeof key === \"string\") {\n          self[key] = value;\n\n          if (self[key] !== value) {\n            self.isSaved = false;\n          }\n        } else {\n          for (var _i in key) {\n            self[_i] = key[_i];\n          }\n\n          self.isSaved = false;\n        }\n      },\n      save: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var id;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                self.validate();\n\n                if (!(self.errors.length === 0)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                if (!self.isNewRecord) {\n                  _context.next = 11;\n                  break;\n                }\n\n                self.set(\"loading\", true);\n                _context.next = 6;\n                return createRecord(opt.tableName, self.rawData, {\n                  primaryKey: primaryKey\n                });\n\n              case 6:\n                id = _context.sent;\n\n                if (id) {\n                  self.set(primaryKey, id);\n                  self.set(\"isSaved\", true);\n                }\n\n                self.set(\"loading\", false);\n                _context.next = 13;\n                break;\n\n              case 11:\n                _context.next = 13;\n                return updateRecord(opt.tableName, self.rawData, {\n                  primaryKey: primaryKey\n                });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })),\n      validate: function validate() {\n        if (opt.validations) {\n          var validations = opt.validations;\n          var errors = [];\n\n          _Object$keys(validations).forEach(function (key) {\n            if (validations[key] === \"required\") {\n              if (self[key] === undefined || self[key] === null || self[key] === \"\") {\n                errors.push(\"\".concat(key, \" is required.\"));\n              }\n            }\n          });\n\n          self.errors = errors;\n        }\n      },\n      load: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (self.isNewRecord) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                _context2.next = 3;\n                return self.find(_defineProperty({}, primaryKey, self[primaryKey]));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })),\n      find: flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(where, findopt) {\n        var _columns, record, _c, _value;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                self.set(\"loading\", true);\n                _context3.prev = 1;\n                _columns = _Object$keys(opt.columns).map(function (c) {\n                  if (isLateType(opt.columns[c]) || isUnionType(opt.columns[c])) {\n                    var _query = \"\";\n                    var col = opt.columns[c];\n                    if (col._subType) _query = col._subType.properties.query._defaultValue;\n\n                    if (_Array$isArray(col._types)) {\n                      col._types.forEach(function (e) {\n                        if (isLateType(e)) {\n                          if (e._subType) {\n                            _query = \"{ \".concat(e._subType.columns.join(\"\\n\"), \" }\");\n                          }\n                        }\n                      });\n                    }\n\n                    if (findopt && findopt.query && findopt.query[c]) {\n                      _query = findopt.query[c];\n                    }\n\n                    if (_query) {\n                      return \"\".concat(c, \" \").concat(_query);\n                    } else {\n                      return \"\";\n                    }\n                  }\n\n                  return c;\n                });\n                _context3.next = 5;\n                return query(opt.tableName, _columns, {\n                  where: where\n                });\n\n              case 5:\n                _context3.t0 = _context3.sent;\n\n                if (_context3.t0) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.t0 = {};\n\n              case 8:\n                record = _context3.t0;\n\n                for (_c in record) {\n                  _value = record[_c];\n\n                  if (_Array$isArray(_value) && isLateType(opt.columns[_c])) {\n                    self.set(_c, {\n                      list: _value,\n                      loading: false\n                    });\n                  } else {\n                    self.set(_c, _value);\n                  }\n                }\n\n                self.set(\"isSaved\", true);\n                self.set(\"loading\", false);\n                _context3.next = 18;\n                break;\n\n              case 14:\n                _context3.prev = 14;\n                _context3.t1 = _context3[\"catch\"](1);\n                self.set(\"loading\", false);\n                console.warn(_context3.t1);\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 14]]);\n      })),\n      \"delete\": flow(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var row;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return deleteRecord(opt.tableName, self.rawData, {\n                  primaryKey: primaryKey\n                });\n\n              case 3:\n                row = _context4.sent;\n\n                _Object$keys(opt.columns).forEach(function (c) {\n                  if (self[c] !== null) {\n                    self.set(c, null);\n                  }\n                });\n\n                _context4.next = 9;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[0, 7]]);\n      }))\n    });\n  });\n  recordResult.columns = _Object$keys(columns);\n  return recordResult;\n});","map":null,"metadata":{},"sourceType":"module"}