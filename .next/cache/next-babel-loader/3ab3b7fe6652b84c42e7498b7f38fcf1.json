{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from \"react\";\nimport { View, TextInput, Text } from \"react-native-web\";\nimport { S, St } from \"./Style\";\nexport default (({\n  setValue,\n  value = \"\",\n  sublabel,\n  label,\n  style,\n  fieldActiveStyle,\n  inputStyle = S(St.TextInput),\n  inputProps,\n  onBlur,\n  type = \"string\"\n}) => {\n  const {\n    0: internalValue,\n    1: setInternalValue\n  } = useState(value);\n  const {\n    0: focused,\n    1: setFocused\n  } = useState(false);\n  const ref = useRef(null);\n  const SLabel = !!value || !!internalValue ? St.LabelFocus : St.Label;\n  return __jsx(View, {\n    style: focused ? S(St.Field, St.FieldActive, fieldActiveStyle, style) : S(St.Field, style)\n  }, !!label && __jsx(View, {\n    pointerEvents: \"none\"\n  }, __jsx(Text, {\n    style: focused ? S(St.LabelFocus, St.LabelActive) : SLabel\n  }, label)), __jsx(TextInput, _extends({\n    ref: ref,\n    secureTextEntry: type === \"password\",\n    onFocus: () => setFocused(true),\n    onBlur: () => {\n      setFocused(false);\n\n      if (typeof onBlur === \"function\") {\n        onBlur();\n      }\n    },\n    style: inputStyle,\n    onChangeText: text => {\n      if (setValue != undefined) setValue(text);\n      setInternalValue(text);\n    },\n    value: value.toString()\n  }, inputProps)), !!sublabel && __jsx(Text, {\n    style: St.SubLabel\n  }, sublabel));\n});","map":null,"metadata":{},"sourceType":"module"}