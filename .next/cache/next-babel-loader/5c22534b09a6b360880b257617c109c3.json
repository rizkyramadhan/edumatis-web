{"ast":null,"code":"var __jsx = React.createElement;\nimport { S, St } from \"./Style\";\nimport React, { useState } from \"react\";\nimport { Picker, Text, View } from \"react-native-web\";\nexport default (function (_ref) {\n  var setValue = _ref.setValue,\n      value = _ref.value,\n      items = _ref.items,\n      label = _ref.label,\n      style = _ref.style,\n      fieldActiveStyle = _ref.fieldActiveStyle,\n      _ref$inputStyle = _ref.inputStyle,\n      inputStyle = _ref$inputStyle === void 0 ? S(St.TextInput) : _ref$inputStyle,\n      inputProps = _ref.inputProps;\n\n  var _useState = useState(),\n      temp = _useState[0],\n      setTemp = _useState[1];\n\n  var _useState2 = useState(false),\n      focused = _useState2[0],\n      setFocused = _useState2[1];\n\n  var SLabel = !!value || !!temp ? St.LabelFocus : St.SelectLabel;\n  return __jsx(View, {\n    style: focused ? S(S(St.Field, style), S(St.FieldActive, fieldActiveStyle)) : S(St.Field, style)\n  }, !!label && __jsx(Text, {\n    style: S(St.LabelFocus, {\n      marginLeft: 10\n    })\n  }, label), __jsx(Picker, {\n    mode: \"dialog\",\n    style: {\n      marginVertical: 5\n    },\n    selectedValue: value || temp,\n    onValueChange: function onValueChange(itemValue, itemIndex) {\n      return setValue != undefined ? setValue(itemValue) : setTemp(itemValue);\n    }\n  }, items.map(function (item, index) {\n    if (typeof item === \"string\") return __jsx(Picker.Item, {\n      key: index,\n      label: item,\n      value: item\n    });\n    return __jsx(Picker.Item, {\n      key: index,\n      label: item.label,\n      value: item.value\n    });\n  })));\n});","map":null,"metadata":{},"sourceType":"module"}