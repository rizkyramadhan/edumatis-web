{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar __jsx = React.createElement;\nimport StackNav from \"../../../../libs/nav/StackNav\";\nimport rawQuery from \"../../../../libs/queries/crud/rawQuery\";\nimport UIBody from \"../../../../libs/ui/UIBody\";\nimport UIButton from \"../../../../libs/ui/UIButton\";\nimport UICol from \"../../../../libs/ui/UICol\";\nimport UIContainer from \"../../../../libs/ui/UIContainer\";\nimport UIHead from \"../../../../libs/ui/UIHead\";\nimport UIList from \"../../../../libs/ui/UIList\";\nimport UIListItem from \"../../../../libs/ui/UIListItem\";\nimport UIRow from \"../../../../libs/ui/UIRow\";\nimport RelativeTime from 'dayjs/plugin/relativeTime';\nimport _ from 'lodash';\nimport get from 'lodash.get';\nimport { observer, useObservable } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { ScrollView, View } from \"react-native-web\";\n\nconst dayjs = require('dayjs');\n\ndayjs.extend(RelativeTime);\nconst Report = observer(({\n  navigation\n}) => {\n  const data = useObservable({\n    listRaw: [],\n    filter: {\n      kewajiban: '',\n      kelas: ''\n    },\n    loading: true\n  });\n  const kelasList = {\n    '-Semua Kelas-': true\n  };\n  const kewajibanList = {\n    '-Semua Kewajiban-': true\n  };\n  const list = data.listRaw.filter(row => {\n    let match = true;\n\n    const kelas = _.get(row, 'murid.kelas_murids[0].kelas.nama_kelas');\n\n    const kewajiban = _.get(row, 'kewajiban.nama_kewajiban');\n\n    if (kelas && !kelasList[kelas]) {\n      kelasList[kelas] = true;\n    }\n\n    if (kewajiban && !kewajibanList[kewajiban]) {\n      kewajibanList[kewajiban] = true;\n    }\n\n    if (data.filter.kewajiban && data.filter.kewajiban !== '-Semua Kewajiban-') {\n      if (kewajiban !== data.filter.kewajiban) {\n        match = false;\n      }\n    }\n\n    if (data.filter.kelas && data.filter.kelas !== '-Semua Kelas-') {\n      if (kelas.trim() !== data.filter.kelas.trim()) {\n        match = false;\n      }\n    }\n\n    console.log(data.filter.kelas);\n    return match;\n  });\n  useEffect(() => {\n    let fetch = async () => {\n      const result = await rawQuery(`{\n        transaksi(order_by: {tstamp: asc}) {\n          id\n          status\n          tstamp\n          amount: detail(path:\"amount\")\n          detail(path:\"status\")\n          paid(path:\"status\")\n          murid {\n            id\n            nama_murid\n            nsa\n            kelas_murids {\n              kelas {\n                nama_kelas\n              }\n            }\n          }\n          kewajiban {\n            nama_kewajiban\n          }\n        }\n      }\n      `);\n      data.listRaw = result.transaksi;\n      data.loading = false;\n    };\n\n    fetch();\n  }, []);\n  return __jsx(UIContainer, null, __jsx(UIHead, {\n    navigation: navigation,\n    title: \"Laporan Transaksi\"\n  }, __jsx(UIButton, {\n    size: \"small\",\n    onPress: () => {\n      const parse = (e, isRoot = false) => {\n        return _Object$keys(e).map(r => {\n          const row = e[r];\n          if (isRoot) return r;\n          return row;\n        }).join(',');\n      };\n\n      const csvList = [];\n      list.map(e => {\n        const res = {};\n\n        for (let i in e) {\n          const row = e[i];\n\n          if (typeof row === 'object' && row !== null) {\n            if (row.nama_kewajiban) res['nama_kewajiban'] = row.nama_kewajiban;\n\n            if (row.nama_murid) {\n              res['nama_murid'] = _.get(row, 'nama_murid');\n              res['nsa'] = _.get(row, 'nsa');\n              res['kelas'] = _.get(row, 'kelas_murids.0.kelas.nama_kelas');\n            }\n          } else res[i] = row;\n        }\n\n        csvList.push(res);\n      });\n      let csvContent = 'data:text/csv;charset=utf-8,' + parse(csvList[0], true) + '\\n' + csvList.map(e => parse(e)).join('\\n');\n      var encodedUri = encodeURI(csvContent);\n      var link = document.createElement('a');\n      link.setAttribute('href', encodedUri);\n      link.setAttribute('download', 'report.csv');\n      document.body.appendChild(link); // Required for FF\n\n      link.click(); // This will download the data file named \"my_data.csv\".\n    },\n    style: {\n      flexDirection: 'column',\n      alignItems: 'center',\n      width: 150\n    }\n  }, \"Download CSV\")), __jsx(UIBody, null, __jsx(UIRow, null, __jsx(\"select\", {\n    style: {\n      margin: 10\n    },\n    value: data.filter.kelas,\n    onChange: e => {\n      data.filter.kelas = e.target.value;\n    }\n  }, _Object$keys(kelasList).map((i, idx) => __jsx(\"option\", {\n    value: i,\n    key: idx\n  }, i))), __jsx(\"select\", {\n    style: {\n      margin: 10\n    },\n    value: data.filter.kewajiban,\n    onChange: e => {\n      data.filter.kewajiban = e.target.value;\n    }\n  }, _Object$keys(kewajibanList).map((i, idx) => __jsx(\"option\", {\n    value: i,\n    key: idx\n  }, i)))), __jsx(ScrollView, null, __jsx(View, {\n    style: {\n      flexDirection: 'row',\n      paddingLeft: 25\n    }\n  }, __jsx(UIRow, {\n    style: {\n      width: 40\n    }\n  }, __jsx(UICol, null, \"No.\")), __jsx(UIRow, {\n    style: {\n      width: 200\n    }\n  }, __jsx(UICol, null, \"Nama\")), __jsx(UIRow, {\n    style: {\n      width: 100\n    }\n  }, __jsx(UICol, null, \"Kelas\")), __jsx(UIRow, {\n    style: {\n      width: 240\n    }\n  }, __jsx(UICol, null, \"Kewajiban\")), __jsx(UIRow, {\n    style: {\n      width: 100\n    }\n  }, __jsx(UICol, null, \"Biaya (Rp)\")), __jsx(UIRow, {\n    style: {\n      width: 100\n    }\n  }, __jsx(UICol, null, \"Status\")), __jsx(UIRow, {\n    style: {\n      width: 150\n    }\n  }, __jsx(UICol, null, \"Waktu\")), __jsx(UIRow, {\n    style: {\n      width: 150\n    }\n  }, __jsx(UICol, null, \"Log\"))), __jsx(UIList, {\n    data: list,\n    loading: data.loading,\n    render: list => {\n      const item = list.item;\n      const tgl = dayjs(item.tstamp);\n      const fromday = tgl.fromNow();\n      const kelas = get(item, 'murid.kelas_murids[0].kelas.nama_kelas') || 'Semua Kelas';\n\n      const nominal = _parseInt(item.amount || item.nominal);\n\n      let status = (item.paid || item.detail || item.status).toLowerCase();\n      if (status === 'paid') status = 'success';\n      return __jsx(UIListItem, {\n        onPress: () => {\n          navigation.navigate('TransaksiDetail', {\n            item: item\n          });\n        }\n      }, __jsx(View, {\n        style: {\n          flexDirection: 'row'\n        }\n      }, __jsx(UIRow, {\n        style: {\n          width: 40\n        }\n      }, __jsx(UICol, null, item.id)), __jsx(UIRow, {\n        style: {\n          width: 200\n        }\n      }, __jsx(UICol, null, item.murid.nama_murid)), __jsx(UIRow, {\n        style: {\n          width: 100\n        }\n      }, __jsx(UICol, null, kelas)), __jsx(UIRow, {\n        style: {\n          width: 240\n        }\n      }, __jsx(UICol, null, item.kewajiban.nama_kewajiban)), __jsx(UIRow, {\n        style: {\n          width: 100\n        }\n      }, __jsx(UICol, null, (nominal || 0).toLocaleString())), __jsx(UIRow, {\n        style: {\n          width: 100\n        }\n      }, __jsx(UICol, null, status)), __jsx(UIRow, {\n        style: {\n          width: 150\n        }\n      }, __jsx(UICol, null, tgl.format('DD MMM YYYY - hh.mm'))), __jsx(UIRow, {\n        style: {\n          width: 150\n        }\n      }, __jsx(UICol, null, fromday))));\n    }\n  }))));\n});\nexport default StackNav({\n  Report: {\n    screen: Report\n  }\n});","map":null,"metadata":{},"sourceType":"module"}