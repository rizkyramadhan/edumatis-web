{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport { S, St } from \"./Style\";\nimport React from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native-web\";\nexport default (function (_ref) {\n  var children = _ref.children,\n      icon = _ref.icon,\n      _ref$iconMode = _ref.iconMode,\n      iconMode = _ref$iconMode === void 0 ? \"start\" : _ref$iconMode,\n      _ref$expand = _ref.expand,\n      expand = _ref$expand === void 0 ? \"block\" : _ref$expand,\n      _ref$fill = _ref.fill,\n      fill = _ref$fill === void 0 ? \"solid\" : _ref$fill,\n      size = _ref.size,\n      style = _ref.style,\n      labelStyle = _ref.labelStyle,\n      _ref$buttonProps = _ref.buttonProps,\n      buttonProps = _ref$buttonProps === void 0 ? {} : _ref$buttonProps,\n      onPress = _ref.onPress;\n  var btnExpand = \"Button\" + expand.charAt(0).toUpperCase() + expand.slice(1).toLowerCase();\n  var btnFIll = \"Button\" + fill.charAt(0).toUpperCase() + fill.slice(1).toLowerCase();\n  var labelClear = fill == \"outline\" || fill == \"clear\" ? \"ButtonLabelClear\" : \"ButtonLabelSolid\";\n  style = S(St.Button, St[btnExpand], St[btnFIll], style);\n  var defaultLabelStyle = S(St.ButtonLabel, St[labelClear], size == \"small\" && St.ButtonLabelSmall, size == \"large\" && St.ButtonLabelLarge);\n\n  if (children.length === 1 || typeof children === \"string\") {\n    labelStyle = S(defaultLabelStyle, labelStyle);\n  }\n\n  return __jsx(TouchableOpacity, _extends({\n    onPress: onPress\n  }, buttonProps, {\n    style: style\n  }), icon && iconMode == \"start\" && __jsx(Text, null, icon), children.map && children.length > 1 ? __jsx(View, {\n    style: S(labelStyle, {\n      paddingVertical: 10\n    })\n  }, children.map(function (C, i) {\n    if (typeof C !== \"object\") {\n      if (typeof C === \"string\" && C.trim() === \"\") return null;\n      return __jsx(Text, {\n        key: i,\n        style: S(defaultLabelStyle, {\n          paddingVertical: 1,\n          marginVertical: 1,\n          lineHeight: \"auto\"\n        })\n      }, C);\n    } else {\n      return C;\n    }\n  })) : __jsx(Text, {\n    style: labelStyle\n  }, children), icon && iconMode == \"end\" && __jsx(Text, null, icon));\n});","map":null,"metadata":{},"sourceType":"module"}