{"ast":null,"code":"var _jsxFileName = \"/Users/riz/Documents/edumatis-web/libs/ui/UIFieldSelect.tsx\";\nvar __jsx = React.createElement;\nimport { S, St } from \"./Style\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useState } from \"react\";\nimport { ScrollView, Text, TouchableOpacity, View } from \"react-native-web\";\nimport UIButton from \"./UIButton\";\nimport UIModal from \"./UIModal\";\nexport default observer(function ({\n  setValue,\n  value,\n  items = [],\n  label,\n  fieldStyle,\n  fieldActiveStyle,\n  inputStyle = S(St.TextInput),\n  inputProps,\n  showTitle = false\n}) {\n  const {\n    0: itemSelected,\n    1: setItemSelected\n  } = useState();\n  const {\n    0: internalValue,\n    1: setInternalValue\n  } = useState();\n  const {\n    0: focused,\n    1: setFocused\n  } = useState(false);\n  const SLabel = !!value || !!internalValue ? St.LabelFocus : St.LabelHidden;\n  return __jsx(TouchableOpacity, {\n    onPress: () => {\n      setFocused(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, __jsx(View, {\n    style: focused ? S(S(St.Field, fieldStyle), S(St.FieldActive, fieldActiveStyle)) : S(St.Field, fieldStyle),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, !!label && __jsx(Text, {\n    style: focused ? S(St.LabelFocus, St.LabelActive) : SLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, label), __jsx(View, {\n    style: St.Select2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(Text, {\n    style: S(St.SelectLabel, itemSelected && St.SelectLabelActive),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, !!itemSelected && itemSelected.label || label), __jsx(Text, {\n    style: St.SelectIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"\\u25BC\")), __jsx(UIModal, {\n    present: focused,\n    setPresent: setFocused,\n    modalProps: {\n      onRequestClose: () => {}\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(View, {\n    style: St.ModalView,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, showTitle && __jsx(View, {\n    style: S(St.ModalHeader, St.SelectHeader),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(Text, {\n    style: {\n      width: \"90%\",\n      alignItems: \"flex-start\",\n      justifyContent: \"flex-start\",\n      color: \"#000\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, label), __jsx(UIButton, {\n    size: \"small\",\n    fill: \"clear\",\n    buttonProps: {\n      onPress: () => setFocused(false)\n    },\n    labelStyle: {\n      color: \"red\"\n    },\n    style: {\n      alignItems: \"flex-end\",\n      justifyContent: \"flex-end\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"\\u2715\")), __jsx(View, {\n    style: St.ModalContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(ScrollView, {\n    style: St.SelectList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, items.map((item, idx) => {\n    const value = typeof item !== \"string\" ? item.value : item;\n    const label = typeof item !== \"string\" ? item.label : item;\n    return __jsx(UIButton, {\n      key: idx,\n      style: S(St.SelectItem, idx === 0 && {\n        borderTopLeftRadius: 10,\n        borderTopRightRadius: 10\n      }, idx === items.length - 1 && {\n        borderBottomWidth: 0,\n        borderBottomLeftRadius: 10,\n        borderBottomRightRadius: 10\n      }),\n      labelStyle: St.SelectItemLabel,\n      buttonProps: {\n        onPress: () => {\n          if (setValue) setValue(value);\n          setItemSelected({\n            value,\n            label\n          });\n          setInternalValue(value);\n          setFocused(false);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, label);\n  })))))));\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/ui/UIFieldSelect.tsx"],"names":["S","St","observer","React","useState","ScrollView","Text","TouchableOpacity","View","UIButton","UIModal","setValue","value","items","label","fieldStyle","fieldActiveStyle","inputStyle","TextInput","inputProps","showTitle","itemSelected","setItemSelected","internalValue","setInternalValue","focused","setFocused","SLabel","LabelFocus","LabelHidden","Field","FieldActive","LabelActive","Select2","SelectLabel","SelectLabelActive","SelectIcon","onRequestClose","ModalView","ModalHeader","SelectHeader","width","alignItems","justifyContent","color","onPress","ModalContent","SelectList","map","item","idx","SelectItem","borderTopLeftRadius","borderTopRightRadius","length","borderBottomWidth","borderBottomLeftRadius","borderBottomRightRadius","SelectItemLabel"],"mappings":"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","sourcesContent":["import { S, St } from \"@app/libs/ui/Style\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useState } from \"react\";\nimport { ScrollView, Text, TouchableOpacity, View } from \"react-native\";\nimport UIButton from \"./UIButton\";\nimport UIModal from \"./UIModal\";\n\nexport default observer(function({\n  setValue,\n  value,\n  items = [],\n  label,\n  fieldStyle,\n  fieldActiveStyle,\n  inputStyle = S(St.TextInput),\n  inputProps,\n  showTitle = false\n}: any) {\n  const [itemSelected, setItemSelected] = useState();\n  const [internalValue, setInternalValue] = useState();\n  const [focused, setFocused] = useState(false);\n  const SLabel = !!value || !!internalValue ? St.LabelFocus : St.LabelHidden;\n  return (\n    <TouchableOpacity\n      onPress={() => {\n        setFocused(true);\n      }}\n    >\n      <View\n        style={\n          focused\n            ? S(S(St.Field, fieldStyle), S(St.FieldActive, fieldActiveStyle))\n            : S(St.Field, fieldStyle)\n        }\n      >\n        {!!label && (\n          <Text style={focused ? S(St.LabelFocus, St.LabelActive) : SLabel}>\n            {label}\n          </Text>\n        )}\n        <View style={St.Select2}>\n          <Text style={S(St.SelectLabel, itemSelected && St.SelectLabelActive)}>\n            {(!!itemSelected && itemSelected.label) || label}\n          </Text>\n          <Text style={St.SelectIcon}>▼</Text>\n        </View>\n        <UIModal\n          present={focused}\n          setPresent={setFocused}\n          modalProps={{\n            onRequestClose: () => {}\n          }}\n        >\n          <View style={St.ModalView}>\n            {showTitle && (\n              <View style={S(St.ModalHeader, St.SelectHeader)}>\n                <Text\n                  style={{\n                    width: \"90%\",\n                    alignItems: \"flex-start\",\n                    justifyContent: \"flex-start\",\n                    color: \"#000\"\n                  }}\n                >\n                  {label}\n                </Text>\n                <UIButton\n                  size=\"small\"\n                  fill=\"clear\"\n                  buttonProps={{ onPress: () => setFocused(false) }}\n                  labelStyle={{ color: \"red\" }}\n                  style={{ alignItems: \"flex-end\", justifyContent: \"flex-end\" }}\n                >\n                  ✕\n                </UIButton>\n              </View>\n            )}\n            <View style={St.ModalContent}>\n              <ScrollView style={St.SelectList}>\n                {items.map((item: any, idx: number) => {\n                  const value = typeof item !== \"string\" ? item.value : item;\n                  const label = typeof item !== \"string\" ? item.label : item;\n                  return (\n                    <UIButton\n                      key={idx}\n                      style={S(\n                        St.SelectItem,\n                        idx === 0 && {\n                          borderTopLeftRadius: 10,\n                          borderTopRightRadius: 10\n                        },\n                        idx === items.length - 1 && {\n                          borderBottomWidth: 0,\n                          borderBottomLeftRadius: 10,\n                          borderBottomRightRadius: 10\n                        }\n                      )}\n                      labelStyle={St.SelectItemLabel}\n                      buttonProps={{\n                        onPress: () => {\n                          if (setValue) setValue(value);\n\n                          setItemSelected({\n                            value,\n                            label\n                          });\n                          setInternalValue(value);\n                          setFocused(false);\n                        }\n                      }}\n                    >\n                      {label}\n                    </UIButton>\n                  );\n                })}\n              </ScrollView>\n            </View>\n          </View>\n        </UIModal>\n      </View>\n    </TouchableOpacity>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}