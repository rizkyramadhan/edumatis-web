{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport config from \"../../config\";\nimport { AsyncStorage } from \"react-native-web\";\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(table, columns, options) {\n    var opt, where, tableArgs, gql, headers, sessionRaw, session, response, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            opt = _objectSpread({}, {\n              useSession: true,\n              debug: false,\n              where: {},\n              args: \"limit:1\"\n            }, options);\n            where = _Object$keys(opt.where).map(function (w) {\n              return \"\".concat(w, \": {_eq: \").concat(_JSON$stringify(opt.where[w]), \"}\");\n            });\n\n            if (where.length > 0) {\n              where[0] = \",where:{\" + where[0];\n              where[where.length - 1] = where[where.length - 1] + \"}\";\n            }\n\n            tableArgs = \"\".concat(opt.args || '', \" \").concat(where.join(\",\")).trim();\n\n            if (tableArgs.length > 0) {\n              tableArgs = \"(\".concat(tableArgs, \")\");\n            }\n\n            gql = \"\\n    {\\n        \".concat(table).concat(tableArgs, \" \\n        \").concat(typeof columns === \"string\" ? columns : \"{\" + columns.join(\"\\n\") + \"}\", \"\\n        \\n    }\");\n\n            if (opt.debug) {\n              console.log(gql);\n            }\n\n            headers = {\n              \"Content-Type\": \"application/json\"\n            };\n\n            if (!opt.useSession) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 11;\n            return AsyncStorage.getItem(\"SESSION\");\n\n          case 11:\n            sessionRaw = _context.sent;\n            session = JSON.parse(sessionRaw || \"false\");\n\n            if (session) {\n              _context.next = 17;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 17:\n            headers[\"X-Hasura-Session-Id\"] = session.id;\n\n          case 18:\n            _context.next = 20;\n            return fetch(config.url, {\n              method: \"POST\",\n              body: _JSON$stringify({\n                query: gql\n              }),\n              headers: headers\n            });\n\n          case 20:\n            response = _context.sent;\n            _context.next = 23;\n            return response.json();\n\n          case 23:\n            json = _context.sent;\n\n            if (!(response.status !== 200)) {\n              _context.next = 28;\n              break;\n            }\n\n            if (!(json && json.errors && json.errors[0] && json.errors[0].message)) {\n              _context.next = 27;\n              break;\n            }\n\n            throw \"\\n  (Query Record Failed) \".concat(json.errors[0].message, \" \\n  \\n  GraphQL Query: \").concat(gql, \"\\n  \\n  \");\n\n          case 27:\n            return _context.abrupt(\"return\", null);\n\n          case 28:\n            if (!(typeof columns !== \"string\")) {\n              _context.next = 32;\n              break;\n            }\n\n            return _context.abrupt(\"return\", json.data[table][0]);\n\n          case 32:\n            return _context.abrupt(\"return\", json.data[table]);\n\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":null,"metadata":{},"sourceType":"module"}