{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport query from \"../queries/crud/query\";\nimport streamQuery from \"../queries/crud/streamQuery\";\nimport { AsyncStorage } from \"react-native-web\";\nimport { flow, types } from \"mobx-state-tree\";\nexport default (opt => {\n  return types.model({\n    query: types.optional(types.string, opt.query || \"\"),\n    loading: types.optional(types.boolean, false),\n    list: types.array(opt.record)\n  }).actions(self => {\n    const meta = JSON.parse(opt.record.properties._meta._defaultValue);\n    return {\n      afterCreate: function () {\n        if (opt.stream) {\n          self.startStream();\n        } else {\n          self.requery();\n        }\n      },\n      startStream: function () {\n        const where = _Object$keys(opt.where || {}).map(w => {\n          return `${w}: {_eq: ${_JSON$stringify(opt.where[w])}}`;\n        });\n\n        if (where.length > 0) {\n          where[0] = \",where:{\" + where[0];\n          where[where.length - 1] = where[where.length - 1] + \"}\";\n        }\n\n        let tableArgs = `${opt.args || \"\"} ${where.join(\",\")}`.trim();\n\n        if (tableArgs.length > 0) {\n          tableArgs = `(${tableArgs})`;\n        }\n\n        const record = JSON.parse(opt.record.properties._meta._defaultValue);\n        const query = `subscription {\n            ${record.tableName}${tableArgs} \n              ${opt.query} \n          }`;\n        streamQuery(query, result => {\n          if (result.type !== \"error\" && result.payload && result.payload.data && result.payload.data[record.tableName]) {\n            self.setList(result.payload.data[record.tableName].map(item => {\n              return opt.record.create(item);\n            }));\n          }\n        });\n      },\n      requery: flow(function* () {\n        let queryOpt = {};\n        if (opt.where) queryOpt[\"where\"] = opt.where;\n        if (opt.args) queryOpt[\"args\"] = opt.args;\n        const result = yield query(meta.tableName, opt.query, queryOpt);\n        self.list = (result || []).map(item => {\n          return opt.record.create(item);\n        });\n      }),\n      serverModify: function (list) {\n        self.list = list;\n      },\n      localUpdate: function (criteria, data) {\n        self.list.forEach(item => {\n          let shouldUpdate = true;\n\n          for (let i in criteria) {\n            if (criteria[i] !== item[i]) {\n              shouldUpdate = false;\n              break;\n            }\n          }\n\n          if (shouldUpdate) {\n            for (let i in data) {\n              item[i] = data[i];\n            }\n          }\n        });\n      },\n      localDelete: function (criteria) {\n        const newlist = [];\n        self.list.forEach(item => {\n          let shouldDelete = true;\n\n          for (let i in criteria) {\n            if (criteria[i] !== item[i]) {\n              shouldDelete = false;\n              break;\n            }\n          }\n\n          if (!shouldDelete) {\n            newlist.push(item);\n          }\n        });\n        self.list = newlist;\n      },\n      setList: function (newList) {\n        self.list = newList;\n      },\n      localSave: flow(function* () {\n        self.loading = true;\n        yield AsyncStorage.setItem(meta.tableName, _JSON$stringify(self.list));\n        self.loading = false;\n      }),\n      localLoad: flow(function* () {\n        self.loading = true;\n        const result = yield AsyncStorage.getItem(meta.tableName);\n        self.list = JSON.parse(result || \"\");\n        self.loading = false;\n      })\n    };\n  });\n});","map":null,"metadata":{},"sourceType":"module"}