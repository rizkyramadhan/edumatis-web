{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/riz/Documents/edumatis-web/libs/ui/UIFieldText.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from \"react\";\nimport { View, TextInput, Text } from \"react-native-web\";\nimport { S, St } from \"./Style\";\nexport default (({\n  setValue,\n  value = \"\",\n  sublabel,\n  label,\n  style,\n  fieldActiveStyle,\n  inputStyle = S(St.TextInput),\n  inputProps,\n  onBlur,\n  type = \"string\"\n}) => {\n  const {\n    0: internalValue,\n    1: setInternalValue\n  } = useState(value);\n  const {\n    0: focused,\n    1: setFocused\n  } = useState(false);\n  const ref = useRef(null);\n  const SLabel = !!value || !!internalValue ? St.LabelFocus : St.Label;\n  return __jsx(View, {\n    style: focused ? S(St.Field, St.FieldActive, fieldActiveStyle, style) : S(St.Field, style),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, !!label && __jsx(View, {\n    pointerEvents: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, __jsx(Text, {\n    style: focused ? S(St.LabelFocus, St.LabelActive) : SLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, label)), __jsx(TextInput, _extends({\n    ref: ref,\n    secureTextEntry: type === \"password\",\n    onFocus: () => setFocused(true),\n    onBlur: () => {\n      setFocused(false);\n\n      if (typeof onBlur === \"function\") {\n        onBlur();\n      }\n    },\n    style: inputStyle,\n    onChangeText: text => {\n      if (setValue != undefined) setValue(text);\n      setInternalValue(text);\n    },\n    value: value.toString()\n  }, inputProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), !!sublabel && __jsx(Text, {\n    style: St.SubLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, sublabel));\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/ui/UIFieldText.tsx"],"names":["React","useState","useRef","View","TextInput","Text","S","St","setValue","value","sublabel","label","style","fieldActiveStyle","inputStyle","inputProps","onBlur","type","internalValue","setInternalValue","focused","setFocused","ref","SLabel","LabelFocus","Label","Field","FieldActive","LabelActive","text","undefined","toString","SubLabel"],"mappings":";;;AAAA,OAAOA,KAAP,IAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,IAAT,EAAeC,SAAf,EAAsCC,IAAtC;AACA,SAASC,CAAT,EAAYC,EAAZ;AAEA,gBAAe,CAAC;AACdC,EAAAA,QADc;AAEdC,EAAAA,KAAK,GAAG,EAFM;AAGdC,EAAAA,QAHc;AAIdC,EAAAA,KAJc;AAKdC,EAAAA,KALc;AAMdC,EAAAA,gBANc;AAOdC,EAAAA,UAAU,GAAGR,CAAC,CAACC,EAAE,CAACH,SAAJ,CAPA;AAQdW,EAAAA,UARc;AASdC,EAAAA,MATc;AAUdC,EAAAA,IAAI,GAAG;AAVO,CAAD,KAWJ;AACT,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoClB,QAAQ,CAACQ,KAAD,CAAlD;AACA,QAAM;AAAA,OAACW,OAAD;AAAA,OAAUC;AAAV,MAAwBpB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMqB,GAAQ,GAAGpB,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMqB,MAAM,GAAG,CAAC,CAACd,KAAF,IAAW,CAAC,CAACS,aAAb,GAA6BX,EAAE,CAACiB,UAAhC,GAA6CjB,EAAE,CAACkB,KAA/D;AAEA,SACE,MAAC,IAAD;AACE,IAAA,KAAK,EACHL,OAAO,GACHd,CAAC,CAACC,EAAE,CAACmB,KAAJ,EAAWnB,EAAE,CAACoB,WAAd,EAA2Bd,gBAA3B,EAA6CD,KAA7C,CADE,GAEHN,CAAC,CAACC,EAAE,CAACmB,KAAJ,EAAWd,KAAX,CAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOG,CAAC,CAACD,KAAF,IACC,MAAC,IAAD;AAAM,IAAA,aAAa,EAAC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAES,OAAO,GAAGd,CAAC,CAACC,EAAE,CAACiB,UAAJ,EAAgBjB,EAAE,CAACqB,WAAnB,CAAJ,GAAsCL,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,KADH,CADF,CARJ,EAcE,MAAC,SAAD;AACE,IAAA,GAAG,EAAEW,GADP;AAEE,IAAA,eAAe,EAAEL,IAAI,KAAK,UAF5B;AAGE,IAAA,OAAO,EAAE,MAAMI,UAAU,CAAC,IAAD,CAH3B;AAIE,IAAA,MAAM,EAAE,MAAM;AACZA,MAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,UAAI,OAAOL,MAAP,KAAkB,UAAtB,EAAkC;AAChCA,QAAAA,MAAM;AACP;AACF,KATH;AAUE,IAAA,KAAK,EAAEF,UAVT;AAWE,IAAA,YAAY,EAAEe,IAAI,IAAI;AACpB,UAAIrB,QAAQ,IAAIsB,SAAhB,EAA2BtB,QAAQ,CAACqB,IAAD,CAAR;AAC3BV,MAAAA,gBAAgB,CAACU,IAAD,CAAhB;AACD,KAdH;AAeE,IAAA,KAAK,EAAEpB,KAAK,CAACsB,QAAN;AAfT,KAgBMhB,UAhBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAdF,EAgCG,CAAC,CAACL,QAAF,IAAc,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEH,EAAE,CAACyB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BtB,QAA3B,CAhCjB,CADF;AAoCD,CArDD","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { View, TextInput, StyleSheet, Text } from \"react-native\";\nimport { S, St } from \"@app/libs/ui/Style\";\n\nexport default ({\n  setValue,\n  value = \"\",\n  sublabel,\n  label,\n  style,\n  fieldActiveStyle,\n  inputStyle = S(St.TextInput),\n  inputProps,\n  onBlur,\n  type = \"string\"\n}: any) => {\n  const [internalValue, setInternalValue] = useState(value);\n  const [focused, setFocused] = useState(false);\n  const ref: any = useRef(null);\n  const SLabel = !!value || !!internalValue ? St.LabelFocus : St.Label;\n\n  return (\n    <View\n      style={\n        focused\n          ? S(St.Field, St.FieldActive, fieldActiveStyle, style)\n          : S(St.Field, style)\n      }\n    >\n      {!!label && (\n        <View pointerEvents=\"none\">\n          <Text style={focused ? S(St.LabelFocus, St.LabelActive) : SLabel}>\n            {label}\n          </Text>\n        </View>\n      )}\n      <TextInput\n        ref={ref}\n        secureTextEntry={type === \"password\"}\n        onFocus={() => setFocused(true)}\n        onBlur={() => {\n          setFocused(false);\n          if (typeof onBlur === \"function\") {\n            onBlur();\n          }\n        }}\n        style={inputStyle}\n        onChangeText={text => {\n          if (setValue != undefined) setValue(text);\n          setInternalValue(text);\n        }}\n        value={value.toString()}\n        {...inputProps}\n      />\n      {!!sublabel && <Text style={St.SubLabel}>{sublabel}</Text>}\n    </View>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}