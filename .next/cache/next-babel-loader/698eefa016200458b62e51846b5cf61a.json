{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport createRecord from \"../../../../../libs/queries/crud/createRecord\";\nimport rawQuery from \"../../../../../libs/queries/crud/rawQuery\";\nimport updateRecord from \"../../../../../libs/queries/crud/updateRecord\";\nimport UIBody from \"../../../../../libs/ui/UIBody\";\nimport UIButton from \"../../../../../libs/ui/UIButton\";\nimport UIContainer from \"../../../../../libs/ui/UIContainer\";\nimport UIFieldText from \"../../../../../libs/ui/UIFieldText\";\nimport UIHead from \"../../../../../libs/ui/UIHead\";\nimport { observer, useObservable } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport MuridList from \"./MuridList\";\nexport default observer(function (_ref) {\n  var navigation = _ref.navigation;\n  var data = useObservable({\n    loading: true,\n    murids: [],\n    form: (navigation || {\n      getParam: function getParam() {\n        return {};\n      }\n    }).getParam(\"item\")\n  });\n  useEffect(function () {\n    var fetch =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return rawQuery(\"{\\n        murid(where: {kelas_murids: {kelas_id: {_eq: \".concat(data.form.id, \"}}}) {\\n          id\\n          email\\n          data\\n          is_active\\n          nisn\\n          no_akta_kelahiran\\n          nsa\\n          tgl_lahir\\n          updated_at\\n          nama_murid\\n        }\\n      }\\n      \"));\n\n              case 2:\n                res = _context.sent;\n                data.murids = res.murid;\n                data.loading = false;\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetch() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetch();\n  }, []);\n  return __jsx(UIContainer, null, __jsx(UIHead, {\n    navigation: navigation,\n    title: \" Kelas \" + (data.form.id ? \"#\".concat(data.form.id) : \"Baru\"),\n    onBack: function onBack() {\n      navigation.goBack();\n    }\n  }, __jsx(UIButton, {\n    onPress:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var form;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              form = _objectSpread({}, data.form);\n              delete form.kelas_murids_aggregate;\n\n              if (!form.id) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.next = 5;\n              return updateRecord(\"kelas\", form);\n\n            case 5:\n              _context2.next = 9;\n              break;\n\n            case 7:\n              _context2.next = 9;\n              return createRecord(\"kelas\", form);\n\n            case 9:\n              navigation.goBack();\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))\n  }, \"Simpan\")), __jsx(UIBody, null, __jsx(UIFieldText, {\n    label: \"Nama Kelas\",\n    setValue: function setValue(value) {\n      data.form.nama_kelas = value;\n    },\n    value: data.form.nama_kelas || \"\"\n  }), __jsx(MuridList, {\n    kelas: data.form,\n    list: data.murids,\n    loading: data.loading,\n    navigation: navigation\n  })));\n});","map":null,"metadata":{},"sourceType":"module"}