{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport config from \"../../config\";\nimport { AsyncStorage } from \"react-native-web\";\nexport default (async (table, columns, options) => {\n  const opt = _objectSpread({}, {\n    useSession: true,\n    debug: false,\n    where: {},\n    args: \"limit:1\"\n  }, options);\n\n  const where = _Object$keys(opt.where).map(w => {\n    return `${w}: {_eq: ${_JSON$stringify(opt.where[w])}}`;\n  });\n\n  if (where.length > 0) {\n    where[0] = \",where:{\" + where[0];\n    where[where.length - 1] = where[where.length - 1] + \"}\";\n  }\n\n  let tableArgs = `${opt.args || ''} ${where.join(\",\")}`.trim();\n\n  if (tableArgs.length > 0) {\n    tableArgs = `(${tableArgs})`;\n  }\n\n  const gql = `\n    {\n        ${table}${tableArgs} \n        ${typeof columns === \"string\" ? columns : \"{\" + columns.join(\"\\n\") + \"}\"}\n        \n    }`;\n\n  if (opt.debug) {\n    console.log(gql);\n  }\n\n  let headers = {\n    \"Content-Type\": \"application/json\"\n  };\n\n  if (opt.useSession) {\n    const sessionRaw = await AsyncStorage.getItem(\"SESSION\");\n    const session = JSON.parse(sessionRaw || \"false\");\n\n    if (!session) {\n      return false;\n    } else {\n      headers[\"X-Hasura-Session-Id\"] = session.id;\n    }\n  }\n\n  const response = await fetch(config.url, {\n    method: \"POST\",\n    body: _JSON$stringify({\n      query: gql\n    }),\n    headers\n  });\n  const json = await response.json();\n\n  if (response.status !== 200) {\n    if (json && json.errors && json.errors[0] && json.errors[0].message) {\n      throw `\n  (Query Record Failed) ${json.errors[0].message} \n  \n  GraphQL Query: ${gql}\n  \n  `;\n    }\n\n    return null;\n  }\n\n  if (typeof columns !== \"string\") {\n    return json.data[table][0];\n  } else {\n    return json.data[table];\n  }\n});","map":null,"metadata":{},"sourceType":"module"}