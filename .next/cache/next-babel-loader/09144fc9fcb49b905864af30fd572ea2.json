{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { AsyncStorage } from \"react-native-web\";\nimport config from \"../../config\";\nexport default (async (query, wsCallback, options) => {\n  const opt = _objectSpread({}, {\n    useSession: true,\n    debug: false\n  }, options);\n\n  let headers = {\n    \"Content-Type\": \"application/json\"\n  };\n\n  if (opt.useSession) {\n    const sessionRaw = await AsyncStorage.getItem(\"SESSION\");\n    const session = JSON.parse(sessionRaw || \"false\");\n\n    if (!session) {\n      return false;\n    } else {\n      headers[\"X-Hasura-Session-Id\"] = session.id;\n    }\n  }\n\n  const ws = new WebSocket(config.wsurl);\n\n  ws.onopen = async () => {\n    ws.send(_JSON$stringify({\n      type: \"connection_init\",\n      payload: {\n        headers\n      }\n    }));\n    ws.send(_JSON$stringify({\n      id: \"1\",\n      type: \"start\",\n      payload: {\n        variables: {},\n        extensions: {},\n        operationName: null,\n        query\n      }\n    }));\n  };\n\n  ws.onmessage = e => {\n    try {\n      const data = JSON.parse(e.data);\n\n      if (data.type === \"data\" || data.type === \"error\") {\n        wsCallback(data);\n\n        if (data.type === \"error\") {\n          console.log(query, data);\n        }\n      }\n    } catch (err) {}\n  };\n\n  ws.onerror = e => {// an error occurred\n  };\n\n  ws.onclose = e => {// connection closed\n  };\n\n  return ws;\n});","map":null,"metadata":{},"sourceType":"module"}