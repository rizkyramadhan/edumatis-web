{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport config from \"../../config\";\nimport { checkSession } from \"../user/checkSession\";\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(table, data, options) {\n    var opt, postData, i, gql, headers, session, response, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            opt = _objectSpread({}, {\n              useSession: true,\n              debug: false,\n              primaryKey: \"id\"\n            }, options);\n            postData = {};\n            _context.t0 = _regeneratorRuntime.keys(data);\n\n          case 3:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 10;\n              break;\n            }\n\n            i = _context.t1.value;\n\n            if (!(i === opt.primaryKey || i.endsWith(\"_aggregate\"))) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"continue\", 3);\n\n          case 7:\n            postData[i] = data[i];\n            _context.next = 3;\n            break;\n\n          case 10:\n            gql = \"mutation update($data:\".concat(table, \"_set_input!) {\\n    update_\").concat(table, \"(\\n      where: {\").concat(opt.primaryKey, \": {_eq: \\\"\").concat(data[opt.primaryKey], \"\\\"}},\\n      _set: $data\\n    ) {\\n      returning {\\n        \").concat(opt.primaryKey, \"\\n      }\\n    }\\n  }\");\n\n            if (opt && opt.debug) {\n              console.log(gql, data);\n            }\n\n            headers = {\n              \"Content-Type\": \"application/json\"\n            };\n\n            if (!opt.useSession) {\n              _context.next = 20;\n              break;\n            }\n\n            _context.next = 16;\n            return checkSession();\n\n          case 16:\n            session = _context.sent;\n            headers[\"X-Hasura-Session-Id\"] = session.id;\n\n            if (session) {\n              _context.next = 20;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 20:\n            _context.next = 22;\n            return fetch(config.url, {\n              method: \"POST\",\n              body: _JSON$stringify({\n                operationName: \"update\",\n                query: gql,\n                variables: {\n                  data: postData\n                }\n              }),\n              headers: headers\n            });\n\n          case 22:\n            response = _context.sent;\n            _context.next = 25;\n            return response.json();\n\n          case 25:\n            json = _context.sent;\n\n            if (!(response.status !== 200)) {\n              _context.next = 30;\n              break;\n            }\n\n            if (!(json && json.errors && json.errors[0] && json.errors[0].message)) {\n              _context.next = 29;\n              break;\n            }\n\n            throw \"\\n(Update Record Failed) \".concat(json.errors[0].message, \" \\n\\nGraphQL Mutation:\\n\").concat(gql, \"\\n\\nData: \\n\").concat(_JSON$stringify(data, null, 2).replace(/\"/gi, \"'\"), \"\\n        \").trim();\n\n          case 29:\n            return _context.abrupt(\"return\", null);\n\n          case 30:\n            return _context.abrupt(\"return\", json);\n\n          case 31:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/queries/crud/updateRecord.ts"],"names":["config","checkSession","table","data","options","opt","useSession","debug","primaryKey","postData","i","endsWith","gql","console","log","headers","session","id","fetch","url","method","body","operationName","query","variables","response","json","status","errors","message","replace","trim"],"mappings":";;;;AAAA,OAAOA,MAAP;AACA,SAASC,YAAT;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBAAOC,KAAP,EAAsBC,IAAtB,EAAiCC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,GADO,qBAER;AAAEC,cAAAA,UAAU,EAAE,IAAd;AAAoBC,cAAAA,KAAK,EAAE,KAA3B;AAAkCC,cAAAA,UAAU,EAAE;AAA9C,aAFQ,EAGRJ,OAHQ;AAMPK,YAAAA,QANO,GAMS,EANT;AAAA,mDAOCN,IAPD;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOJO,YAAAA,CAPI;;AAAA,kBAQPA,CAAC,KAAKL,GAAG,CAACG,UAAV,IAAwBE,CAAC,CAACC,QAAF,CAAW,YAAX,CARjB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAWXF,YAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcP,IAAI,CAACO,CAAD,CAAlB;AAXW;AAAA;;AAAA;AAcPE,YAAAA,GAdO,mCAcwBV,KAdxB,wCAeFA,KAfE,8BAgBCG,GAAG,CAACG,UAhBL,uBAgB2BL,IAAI,CAACE,GAAG,CAACG,UAAL,CAhB/B,2EAoBLH,GAAG,CAACG,UApBC;;AAyBb,gBAAIH,GAAG,IAAIA,GAAG,CAACE,KAAf,EAAsB;AACpBM,cAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiBT,IAAjB;AACD;;AAEGY,YAAAA,OA7BS,GA6BM;AACjB,8BAAgB;AADC,aA7BN;;AAAA,iBAgCTV,GAAG,CAACC,UAhCK;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiCWL,YAAY,EAjCvB;;AAAA;AAiCLe,YAAAA,OAjCK;AAkCXD,YAAAA,OAAO,CAAC,qBAAD,CAAP,GAAiCC,OAAO,CAACC,EAAzC;;AAlCW,gBAmCND,OAnCM;AAAA;AAAA;AAAA;;AAAA,6CAoCF,KApCE;;AAAA;AAAA;AAAA,mBAwCoBE,KAAK,CAAClB,MAAM,CAACmB,GAAR,EAAa;AACjDC,cAAAA,MAAM,EAAE,MADyC;AAEjDC,cAAAA,IAAI,EAAE,gBAAe;AACnBC,gBAAAA,aAAa,EAAE,QADI;AAEnBC,gBAAAA,KAAK,EAAEX,GAFY;AAGnBY,gBAAAA,SAAS,EAAE;AACTrB,kBAAAA,IAAI,EAAEM;AADG;AAHQ,eAAf,CAF2C;AASjDM,cAAAA,OAAO,EAAPA;AATiD,aAAb,CAxCzB;;AAAA;AAwCPU,YAAAA,QAxCO;AAAA;AAAA,mBAoDMA,QAAQ,CAACC,IAAT,EApDN;;AAAA;AAoDPA,YAAAA,IApDO;;AAAA,kBAqDTD,QAAQ,CAACE,MAAT,KAAoB,GArDX;AAAA;AAAA;AAAA;;AAAA,kBAsDPD,IAAI,IAAIA,IAAI,CAACE,MAAb,IAAuBF,IAAI,CAACE,MAAL,CAAY,CAAZ,CAAvB,IAAyCF,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,OAtDjD;AAAA;AAAA;AAAA;;AAAA,kBAuDH,mCACaH,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,OAD5B,qCAIVjB,GAJU,yBAOV,gBAAeT,IAAf,EAAqB,IAArB,EAA2B,CAA3B,EAA8B2B,OAA9B,CAAsC,KAAtC,EAA6C,GAA7C,CAPU,gBAQFC,IARE,EAvDG;;AAAA;AAAA,6CAiEJ,IAjEI;;AAAA;AAAA,6CAmENL,IAnEM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import config from \"@app/libs/config\";\nimport { checkSession } from \"../user/checkSession\";\n\ninterface opts {\n  useSession?: boolean;\n  debug?: boolean;\n  primaryKey?: string;\n}\n\nexport default async (table: string, data: any, options?: opts) => {\n  const opt = {\n    ...{ useSession: true, debug: false, primaryKey: \"id\" },\n    ...options\n  };\n\n  const postData: any = {};\n  for (let i in data) {\n    if (i === opt.primaryKey || i.endsWith(\"_aggregate\")) {\n      continue;\n    }\n    postData[i] = data[i];\n  }\n\n  const gql = `mutation update($data:${table}_set_input!) {\n    update_${table}(\n      where: {${opt.primaryKey}: {_eq: \"${data[opt.primaryKey]}\"}},\n      _set: $data\n    ) {\n      returning {\n        ${opt.primaryKey}\n      }\n    }\n  }`;\n\n  if (opt && opt.debug) {\n    console.log(gql, data);\n  }\n\n  let headers: any = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (opt.useSession) {\n    const session = await checkSession();\n    headers[\"X-Hasura-Session-Id\"] = session.id;\n    if (!session) {\n      return false;\n    }\n  }\n\n  const response: Response = await fetch(config.url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      operationName: \"update\",\n      query: gql,\n      variables: {\n        data: postData\n      }\n    }),\n    headers\n  });\n\n  const json = await response.json();\n  if (response.status !== 200) {\n    if (json && json.errors && json.errors[0] && json.errors[0].message) {\n      throw `\n(Update Record Failed) ${json.errors[0].message} \n\nGraphQL Mutation:\n${gql}\n\nData: \n${JSON.stringify(data, null, 2).replace(/\"/gi, \"'\")}\n        `.trim();\n    }\n    return null;\n  }\n  return json;\n};\n"]},"metadata":{},"sourceType":"module"}