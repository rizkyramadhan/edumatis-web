{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport config from \"../../config\";\nimport { checkSession } from \"../user/checkSession\";\nexport default\n/*#__PURE__*/\n(function () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(table, data, options) {\n    var opt, pk, gql, headers, session, response, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            opt = _objectSpread({}, {\n              useSession: true,\n              debug: false,\n              primaryKey: \"id\"\n            }, options);\n            pk = typeof data[opt.primaryKey] === \"string\" ? \"\\\"\".concat(data[opt.primaryKey], \"\\\"\") : data[opt.primaryKey];\n            gql = \"mutation delete {\\n    delete_\".concat(table, \"(\\n      where: {\").concat(opt.primaryKey, \": {_eq: \").concat(pk, \"}},\\n    ) {\\n      affected_rows\\n    }\\n  }\");\n            headers = {\n              \"Content-Type\": \"application/json\"\n            };\n\n            if (!opt.useSession) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 7;\n            return checkSession();\n\n          case 7:\n            session = _context.sent;\n            headers[\"X-Hasura-Session-Id\"] = session.id;\n\n            if (session) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 11:\n            _context.next = 13;\n            return fetch(config.url, {\n              method: \"POST\",\n              body: _JSON$stringify({\n                operationName: \"delete\",\n                query: gql\n              }),\n              headers: headers\n            });\n\n          case 13:\n            response = _context.sent;\n            _context.next = 16;\n            return response.json();\n\n          case 16:\n            json = _context.sent;\n\n            if (!(response.status !== 200)) {\n              _context.next = 21;\n              break;\n            }\n\n            if (!(json && json.errors && json.errors[0] && json.errors[0].message)) {\n              _context.next = 20;\n              break;\n            }\n\n            throw \"\\n(Create Record Failed) \".concat(json.errors[0].message, \" \\n\\nGraphQL Mutation:\\n\").concat(gql, \"\\n\\nData: \\n\").concat(_JSON$stringify(data, null, 2).replace(/\"/gi, \"'\"), \"\\n        \").trim();\n\n          case 20:\n            return _context.abrupt(\"return\", null);\n\n          case 21:\n            return _context.abrupt(\"return\", json);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/queries/crud/deleteRecord.ts"],"names":["config","checkSession","table","data","options","opt","useSession","debug","primaryKey","pk","gql","headers","session","id","fetch","url","method","body","operationName","query","response","json","status","errors","message","replace","trim"],"mappings":";;;;AAAA,OAAOA,MAAP;AACA,SAASC,YAAT;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAe,iBAAOC,KAAP,EAAsBC,IAAtB,EAAiCC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,GADO,qBAER;AAAEC,cAAAA,UAAU,EAAE,IAAd;AAAoBC,cAAAA,KAAK,EAAE,KAA3B;AAAkCC,cAAAA,UAAU,EAAE;AAA9C,aAFQ,EAGRJ,OAHQ;AAKPK,YAAAA,EALO,GAMX,OAAON,IAAI,CAACE,GAAG,CAACG,UAAL,CAAX,KAAgC,QAAhC,eACQL,IAAI,CAACE,GAAG,CAACG,UAAL,CADZ,UAEIL,IAAI,CAACE,GAAG,CAACG,UAAL,CARG;AAUPE,YAAAA,GAVO,2CAWFR,KAXE,8BAYCG,GAAG,CAACG,UAZL,qBAY0BC,EAZ1B;AAiBTE,YAAAA,OAjBS,GAiBM;AACjB,8BAAgB;AADC,aAjBN;;AAAA,iBAoBTN,GAAG,CAACC,UApBK;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAqBWL,YAAY,EArBvB;;AAAA;AAqBLW,YAAAA,OArBK;AAsBXD,YAAAA,OAAO,CAAC,qBAAD,CAAP,GAAiCC,OAAO,CAACC,EAAzC;;AAtBW,gBAuBND,OAvBM;AAAA;AAAA;AAAA;;AAAA,6CAwBF,KAxBE;;AAAA;AAAA;AAAA,mBA4BoBE,KAAK,CAACd,MAAM,CAACe,GAAR,EAAa;AACjDC,cAAAA,MAAM,EAAE,MADyC;AAEjDC,cAAAA,IAAI,EAAE,gBAAe;AACnBC,gBAAAA,aAAa,EAAE,QADI;AAEnBC,gBAAAA,KAAK,EAAET;AAFY,eAAf,CAF2C;AAMjDC,cAAAA,OAAO,EAAPA;AANiD,aAAb,CA5BzB;;AAAA;AA4BPS,YAAAA,QA5BO;AAAA;AAAA,mBAoCMA,QAAQ,CAACC,IAAT,EApCN;;AAAA;AAoCPA,YAAAA,IApCO;;AAAA,kBAqCTD,QAAQ,CAACE,MAAT,KAAoB,GArCX;AAAA;AAAA;AAAA;;AAAA,kBAsCPD,IAAI,IAAIA,IAAI,CAACE,MAAb,IAAuBF,IAAI,CAACE,MAAL,CAAY,CAAZ,CAAvB,IAAyCF,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,OAtCjD;AAAA;AAAA;AAAA;;AAAA,kBAuCH,mCACaH,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,OAD5B,qCAIVd,GAJU,yBAOV,gBAAeP,IAAf,EAAqB,IAArB,EAA2B,CAA3B,EAA8BsB,OAA9B,CAAsC,KAAtC,EAA6C,GAA7C,CAPU,gBAQFC,IARE,EAvCG;;AAAA;AAAA,6CAiDJ,IAjDI;;AAAA;AAAA,6CAmDNL,IAnDM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import config from \"@app/libs/config\";\nimport { checkSession } from \"../user/checkSession\";\n\ninterface opts {\n  useSession?: boolean;\n  debug?: boolean;\n  primaryKey?: string;\n}\n\nexport default async (table: string, data: any, options?: opts) => {\n  const opt = {\n    ...{ useSession: true, debug: false, primaryKey: \"id\" },\n    ...options\n  };\n  const pk =\n    typeof data[opt.primaryKey] === \"string\"\n      ? `\"${data[opt.primaryKey]}\"`\n      : data[opt.primaryKey];\n\n  const gql = `mutation delete {\n    delete_${table}(\n      where: {${opt.primaryKey}: {_eq: ${pk}}},\n    ) {\n      affected_rows\n    }\n  }`;\n  let headers: any = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (opt.useSession) {\n    const session = await checkSession();\n    headers[\"X-Hasura-Session-Id\"] = session.id;\n    if (!session) {\n      return false;\n    }\n  }\n\n  const response: Response = await fetch(config.url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      operationName: \"delete\",\n      query: gql\n    }),\n    headers\n  });\n  const json = await response.json();\n  if (response.status !== 200) {\n    if (json && json.errors && json.errors[0] && json.errors[0].message) {\n      throw `\n(Create Record Failed) ${json.errors[0].message} \n\nGraphQL Mutation:\n${gql}\n\nData: \n${JSON.stringify(data, null, 2).replace(/\"/gi, \"'\")}\n        `.trim();\n    }\n    return null;\n  }\n  return json;\n};\n"]},"metadata":{},"sourceType":"module"}