{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/riz/Documents/edumatis-web/pages/app/screens/siswa/Kewajiban/Kewajiban.tsx\";\nvar __jsx = React.createElement;\nimport StackNav from \"../../../../../libs/nav/StackNav\";\nimport rawQuery from \"../../../../../libs/queries/crud/rawQuery\";\nimport { getSession } from \"../../../../../libs/queries/user/getsetSession\";\nimport UIBody from \"../../../../../libs/ui/UIBody\";\nimport UIContainer from \"../../../../../libs/ui/UIContainer\";\nimport UIHead from \"../../../../../libs/ui/UIHead\";\nimport UIList from \"../../../../../libs/ui/UIList\";\nimport UIListItem from \"../../../../../libs/ui/UIListItem\";\nimport dayjs from \"dayjs\";\nimport { observer, useObservable } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Text, View } from \"react-native-web\";\nimport KewajibanDetail from \"./KewajibanDetail\";\nconst Kewajiban = observer(({\n  navigation\n}) => {\n  const data = useObservable({\n    list: [],\n    loading: true\n  });\n  return __jsx(UIContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, __jsx(UIHead, {\n    title: \"Kewajiban bulan ini\",\n    navigation: navigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), __jsx(UIBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, __jsx(UIList, {\n    data: data.list,\n    loading: data.loading,\n    render: list => {\n      const item = list.item;\n      return __jsx(UIListItem, {\n        onPress: () => {\n          navigation.navigate(\"KewajibanDetail\", {\n            item: item\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, __jsx(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, __jsx(Text, {\n        style: {\n          fontSize: 15,\n          fontWeight: \"bold\",\n          color: \"#555\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, item.nama_kewajiban), __jsx(Text, {\n        style: {\n          fontSize: 14\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Rp \", item.nominal.toLocaleString(), \" (\", item.status, \")\")), __jsx(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, __jsx(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, item.tipe_pembayaran)));\n    },\n    reload: async () => {\n      const session = await getSession();\n      const kelasRaw = await rawQuery(`{\n              kelas_murid(where: {murid_id: {_eq: ${session.murid.id}}}) {\n                kelas_id\n              }\n            }`);\n\n      if (kelasRaw && kelasRaw.kelas_murid && kelasRaw.kelas_murid.length > 0) {\n        const kelas = kelasRaw.kelas_murid.map(k => {\n          return k.kelas_id.toString();\n        });\n        const monthStart = dayjs().startOf(\"month\").subtract(1, \"day\").format(\"YYYY-MM-DD\");\n        const monthEnd = dayjs().endOf(\"month\").add(1, \"day\").format(\"YYYY-MM-DD\");\n        const result = await rawQuery(`{\n                kewajiban(order_by: [{tipe_pembayaran: asc}, {id: asc}], \n                  where: {kelas: {_has_keys_any: ${_JSON$stringify(kelas)}}}) {\n                  id\n                  nama_kewajiban\n                  nominal\n                  tipe_pembayaran\n                  kelas\n                  transaksi(\n                    where: {\n                      kewajiban: {\n                        _or:[\n                          {_and:[\n                            {tipe_pembayaran:{_eq:\"Bulanan\"}},\n                            {transaksi: {\n                               _and:[\n                                {tstamp: {_gte: \"${monthStart}\"}},\n                                {tstamp: {_lte: \"${monthEnd}\"}},\n                              ] \n                            }}\n                          ]},\n                          {tipe_pembayaran:{_eq:\"Insidentil\"}}\n                        ]\n                      }\n                    }\n                  ) {\n                    id\n                    status\n                    tstamp\n                    detail\n                  }\n                }  \n              }`);\n        data.list = result.kewajiban.map(item => {\n          _Object$keys(item.kelas).forEach(i => {\n            const k = item.kelas[i];\n\n            if (kelas.indexOf(k.id + \"\") >= 0 && k.nominal !== undefined) {\n              item.nominal = k.nominal * 1;\n            }\n\n            k.murid.forEach(m => {\n              if (m && session.murid && m.id === session.murid.id) {\n                if (m.nominal !== undefined) {\n                  item.nominal = m.nominal * 1;\n                }\n              }\n            });\n          });\n\n          item.status = \"Belum Lunas\";\n          item.transaksi.forEach(t => {\n            if (t.paid === \"success\") {\n              item.status = \"Lunas\";\n            }\n          });\n          return item;\n        });\n      }\n\n      data.loading = false;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })));\n});\nexport default StackNav({\n  Kewajiban: {\n    screen: Kewajiban\n  },\n  KewajibanDetail: {\n    screen: KewajibanDetail\n  }\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/pages/app/screens/siswa/Kewajiban/Kewajiban.tsx"],"names":["StackNav","rawQuery","getSession","UIBody","UIContainer","UIHead","UIList","UIListItem","dayjs","observer","useObservable","React","Text","View","KewajibanDetail","Kewajiban","navigation","data","list","loading","item","navigate","fontSize","fontWeight","color","nama_kewajiban","nominal","toLocaleString","status","tipe_pembayaran","session","kelasRaw","murid","id","kelas_murid","length","kelas","map","k","kelas_id","toString","monthStart","startOf","subtract","format","monthEnd","endOf","add","result","kewajiban","forEach","i","indexOf","undefined","m","transaksi","t","paid","screen"],"mappings":"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","sourcesContent":["import StackNav from \"@app/libs/nav/StackNav\";\nimport rawQuery from \"@app/libs/queries/crud/rawQuery\";\nimport { getSession } from \"@app/libs/queries/user/getsetSession\";\nimport UIBody from \"@app/libs/ui/UIBody\";\nimport UIContainer from \"@app/libs/ui/UIContainer\";\nimport UIHead from \"@app/libs/ui/UIHead\";\nimport UIList from \"@app/libs/ui/UIList\";\nimport UIListItem from \"@app/libs/ui/UIListItem\";\nimport dayjs from \"dayjs\";\nimport { observer, useObservable } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Text, View } from \"react-native\";\nimport KewajibanDetail from \"./KewajibanDetail\";\n\nconst Kewajiban = observer(({ navigation }: any) => {\n  const data = useObservable({\n    list: [],\n    loading: true\n  });\n  return (\n    <UIContainer>\n      <UIHead title=\"Kewajiban bulan ini\" navigation={navigation} />\n      <UIBody>\n        <UIList\n          data={data.list}\n          loading={data.loading}\n          render={(list: any) => {\n            const item = list.item;\n            return (\n              <UIListItem\n                onPress={() => {\n                  navigation.navigate(\"KewajibanDetail\", {\n                    item: item\n                  });\n                }}\n              >\n                <View>\n                  <Text\n                    style={{ fontSize: 15, fontWeight: \"bold\", color: \"#555\" }}\n                  >\n                    {item.nama_kewajiban}\n                  </Text>\n                  <Text style={{ fontSize: 14 }}>\n                    Rp {item.nominal.toLocaleString()} ({item.status})\n                  </Text>\n                </View>\n                <View>\n                  <Text>{item.tipe_pembayaran}</Text>\n                </View>\n              </UIListItem>\n            );\n          }}\n          reload={async () => {\n            const session = await getSession();\n            const kelasRaw = await rawQuery(`{\n              kelas_murid(where: {murid_id: {_eq: ${session.murid.id}}}) {\n                kelas_id\n              }\n            }`);\n\n            if (\n              kelasRaw &&\n              kelasRaw.kelas_murid &&\n              kelasRaw.kelas_murid.length > 0\n            ) {\n              const kelas = kelasRaw.kelas_murid.map((k: any) => {\n                return k.kelas_id.toString();\n              });\n              const monthStart = dayjs()\n                .startOf(\"month\")\n                .subtract(1, \"day\")\n                .format(\"YYYY-MM-DD\");\n              const monthEnd = dayjs()\n                .endOf(\"month\")\n                .add(1, \"day\")\n                .format(\"YYYY-MM-DD\");\n\n              const result = await rawQuery(\n                `{\n                kewajiban(order_by: [{tipe_pembayaran: asc}, {id: asc}], \n                  where: {kelas: {_has_keys_any: ${JSON.stringify(kelas)}}}) {\n                  id\n                  nama_kewajiban\n                  nominal\n                  tipe_pembayaran\n                  kelas\n                  transaksi(\n                    where: {\n                      kewajiban: {\n                        _or:[\n                          {_and:[\n                            {tipe_pembayaran:{_eq:\"Bulanan\"}},\n                            {transaksi: {\n                               _and:[\n                                {tstamp: {_gte: \"${monthStart}\"}},\n                                {tstamp: {_lte: \"${monthEnd}\"}},\n                              ] \n                            }}\n                          ]},\n                          {tipe_pembayaran:{_eq:\"Insidentil\"}}\n                        ]\n                      }\n                    }\n                  ) {\n                    id\n                    status\n                    tstamp\n                    detail\n                  }\n                }  \n              }`\n              );\n              data.list = result.kewajiban.map((item: any) => {\n                Object.keys(item.kelas).forEach((i: any) => {\n                  const k = item.kelas[i];\n                  if (\n                    kelas.indexOf(k.id + \"\") >= 0 &&\n                    k.nominal !== undefined\n                  ) {\n                    item.nominal = k.nominal * 1;\n                  }\n                  k.murid.forEach((m: any) => {\n                    if (m && session.murid && m.id === session.murid.id) {\n                      if (m.nominal !== undefined) {\n                        item.nominal = m.nominal * 1;\n                      }\n                    }\n                  });\n                }); \n\n                item.status = \"Belum Lunas\";\n                item.transaksi.forEach((t: any) => {\n                  if (t.paid === \"success\") {\n                    item.status = \"Lunas\";\n                  }\n                });\n\n                return item;\n              });\n            }\n\n            data.loading = false;\n          }}\n        />\n      </UIBody>\n    </UIContainer>\n  );\n});\n\nexport default StackNav({\n  Kewajiban: { screen: Kewajiban },\n  KewajibanDetail: { screen: KewajibanDetail }\n});\n"]},"metadata":{},"sourceType":"module"}