{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport config from \"../../config\";\nimport { AsyncStorage } from \"react-native-web\";\nexport default (async (table, columns, options) => {\n  const opt = _objectSpread({}, {\n    useSession: true,\n    debug: false,\n    where: {},\n    args: \"limit:1\"\n  }, options);\n\n  const where = _Object$keys(opt.where).map(w => {\n    return `${w}: {_eq: ${_JSON$stringify(opt.where[w])}}`;\n  });\n\n  if (where.length > 0) {\n    where[0] = \",where:{\" + where[0];\n    where[where.length - 1] = where[where.length - 1] + \"}\";\n  }\n\n  let tableArgs = `${opt.args || ''} ${where.join(\",\")}`.trim();\n\n  if (tableArgs.length > 0) {\n    tableArgs = `(${tableArgs})`;\n  }\n\n  const gql = `\n    {\n        ${table}${tableArgs} \n        ${typeof columns === \"string\" ? columns : \"{\" + columns.join(\"\\n\") + \"}\"}\n        \n    }`;\n\n  if (opt.debug) {\n    console.log(gql);\n  }\n\n  let headers = {\n    \"Content-Type\": \"application/json\"\n  };\n\n  if (opt.useSession) {\n    const sessionRaw = await AsyncStorage.getItem(\"SESSION\");\n    const session = JSON.parse(sessionRaw || \"false\");\n\n    if (!session) {\n      return false;\n    } else {\n      headers[\"X-Hasura-Session-Id\"] = session.id;\n    }\n  }\n\n  const response = await fetch(config.url, {\n    method: \"POST\",\n    body: _JSON$stringify({\n      query: gql\n    }),\n    headers\n  });\n  const json = await response.json();\n\n  if (response.status !== 200) {\n    if (json && json.errors && json.errors[0] && json.errors[0].message) {\n      throw `\n  (Query Record Failed) ${json.errors[0].message} \n  \n  GraphQL Query: ${gql}\n  \n  `;\n    }\n\n    return null;\n  }\n\n  if (typeof columns !== \"string\") {\n    return json.data[table][0];\n  } else {\n    return json.data[table];\n  }\n});","map":{"version":3,"sources":["/Users/riz/Documents/edumatis-web/libs/queries/crud/query.ts"],"names":["config","AsyncStorage","table","columns","options","opt","useSession","debug","where","args","map","w","length","tableArgs","join","trim","gql","console","log","headers","sessionRaw","getItem","session","JSON","parse","id","response","fetch","url","method","body","query","json","status","errors","message","data"],"mappings":";;;AAAA,OAAOA,MAAP;AACA,SAASC,YAAT;AASA,gBAAe,OACbC,KADa,EAEbC,OAFa,EAGbC,OAHa,KAIV;AACH,QAAMC,GAAG,qBACJ;AAAEC,IAAAA,UAAU,EAAE,IAAd;AAAoBC,IAAAA,KAAK,EAAE,KAA3B;AAAkCC,IAAAA,KAAK,EAAE,EAAzC;AAA6CC,IAAAA,IAAI,EAAE;AAAnD,GADI,EAEJL,OAFI,CAAT;;AAKA,QAAMI,KAAK,GAAG,aAAYH,GAAG,CAACG,KAAhB,EAAuBE,GAAvB,CAA4BC,CAAD,IAAe;AACtD,WAAQ,GAAEA,CAAE,WAAU,gBAAeN,GAAG,CAACG,KAAJ,CAAUG,CAAV,CAAf,CAA6B,GAAnD;AACD,GAFa,CAAd;;AAGA,MAAIH,KAAK,CAACI,MAAN,GAAe,CAAnB,EAAsB;AACpBJ,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,aAAaA,KAAK,CAAC,CAAD,CAA7B;AACAA,IAAAA,KAAK,CAACA,KAAK,CAACI,MAAN,GAAe,CAAhB,CAAL,GAA0BJ,KAAK,CAACA,KAAK,CAACI,MAAN,GAAe,CAAhB,CAAL,GAA0B,GAApD;AACD;;AAED,MAAIC,SAAS,GAAI,GAAER,GAAG,CAACI,IAAJ,IAAY,EAAG,IAAGD,KAAK,CAACM,IAAN,CAAW,GAAX,CAAgB,EAArC,CAAuCC,IAAvC,EAAhB;;AACA,MAAIF,SAAS,CAACD,MAAV,GAAmB,CAAvB,EAA0B;AACxBC,IAAAA,SAAS,GAAI,IAAGA,SAAU,GAA1B;AACD;;AAED,QAAMG,GAAG,GAAI;;UAELd,KAAM,GAAEW,SAAU;UAElB,OAAOV,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwC,MAAMA,OAAO,CAACW,IAAR,CAAa,IAAb,CAAN,GAA2B,GACpE;;MALP;;AASA,MAAIT,GAAG,CAACE,KAAR,EAAe;AACbU,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AAED,MAAIG,OAAY,GAAG;AACjB,oBAAgB;AADC,GAAnB;;AAIA,MAAId,GAAG,CAACC,UAAR,EAAoB;AAClB,UAAMc,UAAU,GAAG,MAAMnB,YAAY,CAACoB,OAAb,CAAqB,SAArB,CAAzB;AACA,UAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,UAAU,IAAI,OAAzB,CAAhB;;AACA,QAAI,CAACE,OAAL,EAAc;AACZ,aAAO,KAAP;AACD,KAFD,MAEO;AACLH,MAAAA,OAAO,CAAC,qBAAD,CAAP,GAAiCG,OAAO,CAACG,EAAzC;AACD;AACF;;AAED,QAAMC,QAAkB,GAAG,MAAMC,KAAK,CAAC3B,MAAM,CAAC4B,GAAR,EAAa;AACjDC,IAAAA,MAAM,EAAE,MADyC;AAEjDC,IAAAA,IAAI,EAAE,gBAAe;AACnBC,MAAAA,KAAK,EAAEf;AADY,KAAf,CAF2C;AAKjDG,IAAAA;AALiD,GAAb,CAAtC;AAOA,QAAMa,IAAI,GAAG,MAAMN,QAAQ,CAACM,IAAT,EAAnB;;AACA,MAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,QAAID,IAAI,IAAIA,IAAI,CAACE,MAAb,IAAuBF,IAAI,CAACE,MAAL,CAAY,CAAZ,CAAvB,IAAyCF,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,OAA5D,EAAqE;AACnE,YAAO;0BACaH,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,OAAQ;;mBAE9BnB,GAAI;;GAHjB;AAMD;;AACD,WAAO,IAAP;AACD;;AAED,MAAI,OAAOb,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAO6B,IAAI,CAACI,IAAL,CAAUlC,KAAV,EAAiB,CAAjB,CAAP;AACD,GAFD,MAEO;AACL,WAAO8B,IAAI,CAACI,IAAL,CAAUlC,KAAV,CAAP;AACD;AACF,CA3ED","sourcesContent":["import config from \"@app/libs/config\";\nimport { AsyncStorage } from \"react-native\";\n\ninterface opts {\n  useSession?: boolean;\n  debug?: boolean;\n  where?: any;\n  args?: string;\n}\n\nexport default async (\n  table: string,\n  columns: string[] | string,\n  options?: opts\n) => {\n  const opt = {\n    ...{ useSession: true, debug: false, where: {}, args: \"limit:1\" },\n    ...options\n  };\n\n  const where = Object.keys(opt.where).map((w: string) => {\n    return `${w}: {_eq: ${JSON.stringify(opt.where[w])}}`;\n  });\n  if (where.length > 0) {\n    where[0] = \",where:{\" + where[0];\n    where[where.length - 1] = where[where.length - 1] + \"}\";\n  }\n\n  let tableArgs = `${opt.args || ''} ${where.join(\",\")}`.trim();\n  if (tableArgs.length > 0) {\n    tableArgs = `(${tableArgs})`;\n  }\n\n  const gql = `\n    {\n        ${table}${tableArgs} \n        ${\n          typeof columns === \"string\" ? columns : \"{\" + columns.join(\"\\n\") + \"}\"\n        }\n        \n    }`;\n\n  if (opt.debug) {\n    console.log(gql);\n  }\n\n  let headers: any = {\n    \"Content-Type\": \"application/json\"\n  };\n  \n  if (opt.useSession) {\n    const sessionRaw = await AsyncStorage.getItem(\"SESSION\");\n    const session = JSON.parse(sessionRaw || \"false\");\n    if (!session) {\n      return false;\n    } else {\n      headers[\"X-Hasura-Session-Id\"] = session.id;\n    }\n  }\n\n  const response: Response = await fetch(config.url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      query: gql\n    }),\n    headers\n  });\n  const json = await response.json();\n  if (response.status !== 200) {\n    if (json && json.errors && json.errors[0] && json.errors[0].message) {\n      throw `\n  (Query Record Failed) ${json.errors[0].message} \n  \n  GraphQL Query: ${gql}\n  \n  `;\n    }\n    return null;\n  }\n\n  if (typeof columns !== \"string\") {\n    return json.data[table][0];\n  } else {\n    return json.data[table];\n  }\n};\n"]},"metadata":{},"sourceType":"module"}